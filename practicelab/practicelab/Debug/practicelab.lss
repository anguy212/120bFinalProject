
practicelab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000d44  00000dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  00000ddc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f18  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000976  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e7  00000000  00000000  00002782  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055a  00000000  00000000  000030e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008bf  00000000  00000000  0000363e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003efd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
   6:	00 00       	nop
   8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
   a:	00 00       	nop
   c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
   e:	00 00       	nop
  10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
  12:	00 00       	nop
  14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
  16:	00 00       	nop
  18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
  1e:	00 00       	nop
  20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
  22:	00 00       	nop
  24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
  26:	00 00       	nop
  28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a0 c0       	rjmp	.+320    	; 0x16e <__bad_interrupt>
  2e:	00 00       	nop
  30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
  32:	00 00       	nop
  34:	d2 c0       	rjmp	.+420    	; 0x1da <__vector_13>
  36:	00 00       	nop
  38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
  3e:	00 00       	nop
  40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
  42:	00 00       	nop
  44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
  46:	00 00       	nop
  48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
  4e:	00 00       	nop
  50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
  52:	00 00       	nop
  54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
  56:	00 00       	nop
  58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	88 c0       	rjmp	.+272    	; 0x16e <__bad_interrupt>
  5e:	00 00       	nop
  60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
  62:	00 00       	nop
  64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
  66:	00 00       	nop
  68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
  6e:	00 00       	nop
  70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
  72:	00 00       	nop
  74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
  76:	00 00       	nop
  78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
  7e:	00 00       	nop
  80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
  82:	00 00       	nop
  84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
  86:	00 00       	nop
  88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b7 01       	movw	r22, r14
  8e:	b9 01       	movw	r22, r18
  90:	bb 01       	movw	r22, r22
  92:	bd 01       	movw	r22, r26
  94:	bf 01       	movw	r22, r30
  96:	c1 01       	movw	r24, r2
  98:	c3 01       	movw	r24, r6
  9a:	c5 01       	movw	r24, r10
  9c:	c7 01       	movw	r24, r14
  9e:	e7 01       	movw	r28, r14
  a0:	d3 01       	movw	r26, r6
  a2:	d5 01       	movw	r26, r10
  a4:	d7 01       	movw	r26, r14
  a6:	d9 01       	movw	r26, r18
  a8:	db 01       	movw	r26, r22
  aa:	dd 01       	movw	r26, r26
  ac:	df 01       	movw	r26, r30
  ae:	e1 01       	movw	r28, r2
  b0:	e3 01       	movw	r28, r6
  b2:	07 63       	ori	r16, 0x37	; 55
  b4:	42 36       	cpi	r20, 0x62	; 98
  b6:	b7 9b       	sbis	0x16, 7	; 22
  b8:	d8 a7       	std	Y+40, r29	; 0x28
  ba:	1a 39       	cpi	r17, 0x9A	; 154
  bc:	68 56       	subi	r22, 0x68	; 104
  be:	18 ae       	std	Y+56, r1	; 0x38
  c0:	ba ab       	std	Y+50, r27	; 0x32
  c2:	55 8c       	ldd	r5, Z+29	; 0x1d
  c4:	1d 3c       	cpi	r17, 0xCD	; 205
  c6:	b7 cc       	rjmp	.-1682   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
  c8:	57 63       	ori	r21, 0x37	; 55
  ca:	bd 6d       	ori	r27, 0xDD	; 221
  cc:	ed fd       	.word	0xfded	; ????
  ce:	75 3e       	cpi	r23, 0xE5	; 229
  d0:	f6 17       	cp	r31, r22
  d2:	72 31       	cpi	r23, 0x12	; 18
  d4:	bf 00       	.word	0x00bf	; ????
  d6:	00 00       	nop
  d8:	80 3f       	cpi	r24, 0xF0	; 240
  da:	08 00       	.word	0x0008	; ????
  dc:	00 00       	nop
  de:	be 92       	st	-X, r11
  e0:	24 49       	sbci	r18, 0x94	; 148
  e2:	12 3e       	cpi	r17, 0xE2	; 226
  e4:	ab aa       	std	Y+51, r10	; 0x33
  e6:	aa 2a       	or	r10, r26
  e8:	be cd       	rjmp	.-1156   	; 0xfffffc66 <__eeprom_end+0xff7efc66>
  ea:	cc cc       	rjmp	.-1640   	; 0xfffffa84 <__eeprom_end+0xff7efa84>
  ec:	4c 3e       	cpi	r20, 0xEC	; 236
  ee:	00 00       	nop
  f0:	00 80       	ld	r0, Z
  f2:	be ab       	std	Y+54, r27	; 0x36
  f4:	aa aa       	std	Y+50, r10	; 0x32
  f6:	aa 3e       	cpi	r26, 0xEA	; 234
  f8:	00 00       	nop
  fa:	00 00       	nop
  fc:	bf 00       	.word	0x00bf	; ????
  fe:	00 00       	nop
 100:	80 3f       	cpi	r24, 0xF0	; 240
 102:	00 00       	nop
 104:	00 00       	nop
 106:	00 08       	sbc	r0, r0
 108:	41 78       	andi	r20, 0x81	; 129
 10a:	d3 bb       	out	0x13, r29	; 19
 10c:	43 87       	std	Z+11, r20	; 0x0b
 10e:	d1 13       	cpse	r29, r17
 110:	3d 19       	sub	r19, r13
 112:	0e 3c       	cpi	r16, 0xCE	; 206
 114:	c3 bd       	out	0x23, r28	; 35
 116:	42 82       	std	Z+2, r4	; 0x02
 118:	ad 2b       	or	r26, r29
 11a:	3e 68       	ori	r19, 0x8E	; 142
 11c:	ec 82       	std	Y+4, r14	; 0x04
 11e:	76 be       	out	0x36, r7	; 54
 120:	d9 8f       	std	Y+25, r29	; 0x19
 122:	e1 a9       	ldd	r30, Z+49	; 0x31
 124:	3e 4c       	sbci	r19, 0xCE	; 206
 126:	80 ef       	ldi	r24, 0xF0	; 240
 128:	ff be       	out	0x3f, r15	; 63
 12a:	01 c4       	rjmp	.+2050   	; 0x92e <__fp_round+0x4>
 12c:	ff 7f       	andi	r31, 0xFF	; 255
 12e:	3f 00       	.word	0x003f	; ????
 130:	00 00       	nop
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d0 e4       	ldi	r29, 0x40	; 64
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61

00000140 <__do_copy_data>:
 140:	11 e0       	ldi	r17, 0x01	; 1
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	b1 e0       	ldi	r27, 0x01	; 1
 146:	e4 e4       	ldi	r30, 0x44	; 68
 148:	fd e0       	ldi	r31, 0x0D	; 13
 14a:	00 e0       	ldi	r16, 0x00	; 0
 14c:	0b bf       	out	0x3b, r16	; 59
 14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x14>
 150:	07 90       	elpm	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	a4 30       	cpi	r26, 0x04	; 4
 156:	b1 07       	cpc	r27, r17
 158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0x10>

0000015a <__do_clear_bss>:
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	a4 e0       	ldi	r26, 0x04	; 4
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
 162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
 164:	a9 30       	cpi	r26, 0x09	; 9
 166:	b2 07       	cpc	r27, r18
 168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
 16a:	33 d1       	rcall	.+614    	; 0x3d2 <main>
 16c:	e9 c5       	rjmp	.+3026   	; 0xd40 <_exit>

0000016e <__bad_interrupt>:
 16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <TimerSet>:
    unsigned char c = column;
    while(*string) {
        LCD_Cursor(c++);
        LCD_WriteData(*string++);
    }
}
 170:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 174:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 178:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 17c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 180:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 184:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 188:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 18c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 190:	08 95       	ret

00000192 <TimerOn>:
 192:	8b e0       	ldi	r24, 0x0B	; 11
 194:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 198:	8d e7       	ldi	r24, 0x7D	; 125
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1aa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1ae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ba:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1be:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1c6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1ca:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1ce:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 1d2:	8f b7       	in	r24, 0x3f	; 63
 1d4:	80 68       	ori	r24, 0x80	; 128
 1d6:	8f bf       	out	0x3f, r24	; 63
 1d8:	08 95       	ret

000001da <__vector_13>:
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1f0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1f4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 1f8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	a1 09       	sbc	r26, r1
 200:	b1 09       	sbc	r27, r1
 202:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 206:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 20a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 20e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 212:	89 2b       	or	r24, r25
 214:	8a 2b       	or	r24, r26
 216:	8b 2b       	or	r24, r27
 218:	99 f4       	brne	.+38     	; 0x240 <__vector_13+0x66>
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
 220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 224:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 228:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 22c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 230:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 234:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 238:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 23c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <delay_ms>:
 252:	18 16       	cp	r1, r24
 254:	19 06       	cpc	r1, r25
 256:	5c f0       	brlt	.+22     	; 0x26e <delay_ms+0x1c>
 258:	08 95       	ret
 25a:	00 00       	nop
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	31 09       	sbc	r19, r1
 260:	e1 f7       	brne	.-8      	; 0x25a <delay_ms+0x8>
 262:	4f 5f       	subi	r20, 0xFF	; 255
 264:	5f 4f       	sbci	r21, 0xFF	; 255
 266:	84 17       	cp	r24, r20
 268:	95 07       	cpc	r25, r21
 26a:	19 f4       	brne	.+6      	; 0x272 <delay_ms+0x20>
 26c:	08 95       	ret
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	27 e0       	ldi	r18, 0x07	; 7
 274:	33 e0       	ldi	r19, 0x03	; 3
 276:	f1 cf       	rjmp	.-30     	; 0x25a <delay_ms+0x8>

00000278 <LCD_WriteCommand>:
 278:	10 98       	cbi	0x02, 0	; 2
 27a:	8b b9       	out	0x0b, r24	; 11
 27c:	11 9a       	sbi	0x02, 1	; 2
 27e:	00 00       	nop
 280:	11 98       	cbi	0x02, 1	; 2
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	e5 cf       	rjmp	.-54     	; 0x252 <delay_ms>
 288:	08 95       	ret

0000028a <LCD_ClearScreen>:
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	f5 cf       	rjmp	.-22     	; 0x278 <LCD_WriteCommand>
 28e:	08 95       	ret

00000290 <LCD_init>:
 290:	84 e6       	ldi	r24, 0x64	; 100
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	de df       	rcall	.-68     	; 0x252 <delay_ms>
 296:	88 e3       	ldi	r24, 0x38	; 56
 298:	ef df       	rcall	.-34     	; 0x278 <LCD_WriteCommand>
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	ed df       	rcall	.-38     	; 0x278 <LCD_WriteCommand>
 29e:	8f e0       	ldi	r24, 0x0F	; 15
 2a0:	eb df       	rcall	.-42     	; 0x278 <LCD_WriteCommand>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	e9 df       	rcall	.-46     	; 0x278 <LCD_WriteCommand>
 2a6:	8a e0       	ldi	r24, 0x0A	; 10
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	d3 cf       	rjmp	.-90     	; 0x252 <delay_ms>
 2ac:	08 95       	ret

000002ae <LCD_WriteData>:
 2ae:	10 9a       	sbi	0x02, 0	; 2
 2b0:	8b b9       	out	0x0b, r24	; 11
 2b2:	11 9a       	sbi	0x02, 1	; 2
 2b4:	00 00       	nop
 2b6:	11 98       	cbi	0x02, 1	; 2
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	ca cf       	rjmp	.-108    	; 0x252 <delay_ms>
 2be:	08 95       	ret

000002c0 <GetKeypadKey>:
//--------End find GCD function ----------------------------------------------

// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
 2c0:	8f ee       	ldi	r24, 0xEF	; 239
 2c2:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
 2c4:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('1'); }
 2c6:	30 9b       	sbis	0x06, 0	; 6
 2c8:	29 c0       	rjmp	.+82     	; 0x31c <GetKeypadKey+0x5c>
    if (GetBit(PINC,1)==0) { return('4'); }
 2ca:	31 9b       	sbis	0x06, 1	; 6
 2cc:	29 c0       	rjmp	.+82     	; 0x320 <GetKeypadKey+0x60>
    if (GetBit(PINC,2)==0) { return('7'); }
 2ce:	32 9b       	sbis	0x06, 2	; 6
 2d0:	29 c0       	rjmp	.+82     	; 0x324 <GetKeypadKey+0x64>
    if (GetBit(PINC,3)==0) { return('*'); }
 2d2:	33 9b       	sbis	0x06, 3	; 6
 2d4:	29 c0       	rjmp	.+82     	; 0x328 <GetKeypadKey+0x68>
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
 2d6:	8f ed       	ldi	r24, 0xDF	; 223
 2d8:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
 2da:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('2'); }
 2dc:	30 9b       	sbis	0x06, 0	; 6
 2de:	26 c0       	rjmp	.+76     	; 0x32c <GetKeypadKey+0x6c>
    if (GetBit(PINC,1)==0) { return('5'); }
 2e0:	31 9b       	sbis	0x06, 1	; 6
 2e2:	26 c0       	rjmp	.+76     	; 0x330 <GetKeypadKey+0x70>
    if (GetBit(PINC,2)==0) { return('8'); }
 2e4:	32 9b       	sbis	0x06, 2	; 6
 2e6:	26 c0       	rjmp	.+76     	; 0x334 <GetKeypadKey+0x74>
    if (GetBit(PINC,3)==0) { return('0'); }
 2e8:	33 9b       	sbis	0x06, 3	; 6
 2ea:	26 c0       	rjmp	.+76     	; 0x338 <GetKeypadKey+0x78>
    // ... *****FINISH*****
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
 2ec:	8f eb       	ldi	r24, 0xBF	; 191
 2ee:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
 2f0:	00 00       	nop
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
 2f2:	30 9b       	sbis	0x06, 0	; 6
 2f4:	23 c0       	rjmp	.+70     	; 0x33c <GetKeypadKey+0x7c>
    if (GetBit(PINC,1)==0) { return('6'); }
 2f6:	31 9b       	sbis	0x06, 1	; 6
 2f8:	23 c0       	rjmp	.+70     	; 0x340 <GetKeypadKey+0x80>
    if (GetBit(PINC,2)==0) { return('9'); }
 2fa:	32 9b       	sbis	0x06, 2	; 6
 2fc:	23 c0       	rjmp	.+70     	; 0x344 <GetKeypadKey+0x84>
    if (GetBit(PINC,3)==0) { return('#'); }
 2fe:	33 9b       	sbis	0x06, 3	; 6
 300:	23 c0       	rjmp	.+70     	; 0x348 <GetKeypadKey+0x88>
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
 302:	8f e7       	ldi	r24, 0x7F	; 127
 304:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
 306:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('A'); }
 308:	30 9b       	sbis	0x06, 0	; 6
 30a:	20 c0       	rjmp	.+64     	; 0x34c <GetKeypadKey+0x8c>
    if (GetBit(PINC,1)==0) { return('B'); }
 30c:	31 9b       	sbis	0x06, 1	; 6
 30e:	20 c0       	rjmp	.+64     	; 0x350 <GetKeypadKey+0x90>
    if (GetBit(PINC,2)==0) { return('C'); }
 310:	32 9b       	sbis	0x06, 2	; 6
 312:	20 c0       	rjmp	.+64     	; 0x354 <GetKeypadKey+0x94>
    if (GetBit(PINC,3)==0) { return('D'); }
 314:	33 9b       	sbis	0x06, 3	; 6
 316:	20 c0       	rjmp	.+64     	; 0x358 <GetKeypadKey+0x98>
    
    return('\0'); // default value
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	08 95       	ret
// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('1'); }
 31c:	81 e3       	ldi	r24, 0x31	; 49
 31e:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('4'); }
 320:	84 e3       	ldi	r24, 0x34	; 52
 322:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('7'); }
 324:	87 e3       	ldi	r24, 0x37	; 55
 326:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('*'); }
 328:	8a e2       	ldi	r24, 0x2A	; 42
 32a:	08 95       	ret
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('2'); }
 32c:	82 e3       	ldi	r24, 0x32	; 50
 32e:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('5'); }
 330:	85 e3       	ldi	r24, 0x35	; 53
 332:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('8'); }
 334:	88 e3       	ldi	r24, 0x38	; 56
 336:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('0'); }
 338:	80 e3       	ldi	r24, 0x30	; 48
 33a:	08 95       	ret
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
 33c:	83 e3       	ldi	r24, 0x33	; 51
 33e:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('6'); }
 340:	86 e3       	ldi	r24, 0x36	; 54
 342:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('9'); }
 344:	89 e3       	ldi	r24, 0x39	; 57
 346:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('#'); }
 348:	83 e2       	ldi	r24, 0x23	; 35
 34a:	08 95       	ret
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('A'); }
 34c:	81 e4       	ldi	r24, 0x41	; 65
 34e:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('B'); }
 350:	82 e4       	ldi	r24, 0x42	; 66
 352:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('C'); }
 354:	83 e4       	ldi	r24, 0x43	; 67
 356:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('D'); }
 358:	84 e4       	ldi	r24, 0x44	; 68
    
    return('\0'); // default value
    
}
 35a:	08 95       	ret

0000035c <changetoInteger>:
unsigned char changetoInteger(unsigned char var)
{
	switch(var)
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	fc 01       	movw	r30, r24
 360:	f1 97       	sbiw	r30, 0x31	; 49
 362:	e9 30       	cpi	r30, 0x09	; 9
 364:	f1 05       	cpc	r31, r1
 366:	a8 f4       	brcc	.+42     	; 0x392 <changetoInteger+0x36>
 368:	ea 5b       	subi	r30, 0xBA	; 186
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	e0 c4       	rjmp	.+2496   	; 0xd2e <__tablejump2__>
	{
		case '0': return 0;
		case '1': return 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	08 95       	ret
		case '2': return 2;
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	08 95       	ret
		case '3': return 3;
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	08 95       	ret
		case '4': return 4;
 37a:	84 e0       	ldi	r24, 0x04	; 4
 37c:	08 95       	ret
		case '5': return 5;
 37e:	85 e0       	ldi	r24, 0x05	; 5
 380:	08 95       	ret
		case '6': return 6;
 382:	86 e0       	ldi	r24, 0x06	; 6
 384:	08 95       	ret
		case '7': return 7;
 386:	87 e0       	ldi	r24, 0x07	; 7
 388:	08 95       	ret
		case '8': return 8;
 38a:	88 e0       	ldi	r24, 0x08	; 8
 38c:	08 95       	ret
		case '9': return 9;
 38e:	89 e0       	ldi	r24, 0x09	; 9
 390:	08 95       	ret
}
unsigned char changetoInteger(unsigned char var)
{
	switch(var)
	{
		case '0': return 0;
 392:	80 e0       	ldi	r24, 0x00	; 0
		case '7': return 7;
		case '8': return 8;
		case '9': return 9;
		default: return 0;
	}
}
 394:	08 95       	ret

00000396 <changetoChar>:
char changetoChar(unsigned char num)
{
	switch(num)
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	8a 30       	cpi	r24, 0x0A	; 10
 39a:	91 05       	cpc	r25, r1
 39c:	b0 f4       	brcc	.+44     	; 0x3ca <changetoChar+0x34>
 39e:	fc 01       	movw	r30, r24
 3a0:	e1 5b       	subi	r30, 0xB1	; 177
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	c4 c4       	rjmp	.+2440   	; 0xd2e <__tablejump2__>
	{
		case 0: return '0';
		case 1: return '1';
 3a6:	81 e3       	ldi	r24, 0x31	; 49
 3a8:	08 95       	ret
		case 2: return '2';
 3aa:	82 e3       	ldi	r24, 0x32	; 50
 3ac:	08 95       	ret
		case 3: return '3';
 3ae:	83 e3       	ldi	r24, 0x33	; 51
 3b0:	08 95       	ret
		case 4: return '4';
 3b2:	84 e3       	ldi	r24, 0x34	; 52
 3b4:	08 95       	ret
		case 5: return '5';
 3b6:	85 e3       	ldi	r24, 0x35	; 53
 3b8:	08 95       	ret
		case 6: return '6';
 3ba:	86 e3       	ldi	r24, 0x36	; 54
 3bc:	08 95       	ret
		case 7: return '7';
 3be:	87 e3       	ldi	r24, 0x37	; 55
 3c0:	08 95       	ret
		case 8: return '8';
 3c2:	88 e3       	ldi	r24, 0x38	; 56
 3c4:	08 95       	ret
		case 9: return '9';
 3c6:	89 e3       	ldi	r24, 0x39	; 57
 3c8:	08 95       	ret
		default: return '\0';
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret
}
char changetoChar(unsigned char num)
{
	switch(num)
	{
		case 0: return '0';
 3ce:	80 e3       	ldi	r24, 0x30	; 48
		case 8: return '8';
		case 9: return '9';
		default: return '\0';

	}
}
 3d0:	08 95       	ret

000003d2 <main>:
    int (*TickFct)(int); //Task tick function
} task;

// Implement scheduler code from PES.
int main()
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	2c 97       	sbiw	r28, 0x0c	; 12
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
    // Set Data Direction Registers
    // Buttons PORTA[0-7], set AVR PORTA to pull down logic
    DDRA = 0xFF; PORTA = 0x00;
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	81 b9       	out	0x01, r24	; 1
 3ea:	12 b8       	out	0x02, r1	; 2
    DDRD = 0xFF; PORTD = 0x00;
 3ec:	8a b9       	out	0x0a, r24	; 10
 3ee:	1b b8       	out	0x0b, r1	; 11
    DDRC = 0xF0; PORTC = 0x0F;
 3f0:	80 ef       	ldi	r24, 0xF0	; 240
 3f2:	87 b9       	out	0x07, r24	; 7
 3f4:	8f e0       	ldi	r24, 0x0F	; 15
 3f6:	88 b9       	out	0x08, r24	; 8
	unsigned char key; 
	unsigned char number[7] = {0, 0, 0, 0 , 0 , 0 , 0};
 3f8:	fe 01       	movw	r30, r28
 3fa:	31 96       	adiw	r30, 0x01	; 1
 3fc:	87 e0       	ldi	r24, 0x07	; 7
 3fe:	df 01       	movw	r26, r30
 400:	1d 92       	st	X+, r1
 402:	8a 95       	dec	r24
 404:	e9 f7       	brne	.-6      	; 0x400 <__LOCK_REGION_LENGTH__>
	unsigned char count = 0;
	unsigned char place = 0;
	LCD_init();
 406:	44 df       	rcall	.-376    	; 0x290 <LCD_init>
	LCD_ClearScreen();	
 408:	40 df       	rcall	.-384    	; 0x28a <LCD_ClearScreen>
 40a:	68 ec       	ldi	r22, 0xC8	; 200
	    
	TimerSet(200);
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	ae de       	rcall	.-676    	; 0x170 <TimerSet>
	TimerOn();
 414:	be de       	rcall	.-644    	; 0x192 <TimerOn>
    DDRD = 0xFF; PORTD = 0x00;
    DDRC = 0xF0; PORTC = 0x0F;
	unsigned char key; 
	unsigned char number[7] = {0, 0, 0, 0 , 0 , 0 , 0};
	unsigned char count = 0;
	unsigned char place = 0;
 416:	18 86       	std	Y+8, r1	; 0x08
    DDRA = 0xFF; PORTA = 0x00;
    DDRD = 0xFF; PORTD = 0x00;
    DDRC = 0xF0; PORTC = 0x0F;
	unsigned char key; 
	unsigned char number[7] = {0, 0, 0, 0 , 0 , 0 , 0};
	unsigned char count = 0;
 418:	31 2c       	mov	r3, r1
		unsigned char holder2 = place - 1;
		unsigned char holder = 0;
		if (key == '#')
		{
			//LCD_ClearScreen();
			for(int i = 0; i < place; i++)
 41a:	21 2c       	mov	r2, r1
	
    while(1) {
		//unsigned char num = 9;
		//LCD_WriteData(9*pow(10, 1) + 7);
        // Scheduler code
       key = GetKeypadKey();
 41c:	51 df       	rcall	.-350    	; 0x2c0 <GetKeypadKey>
 41e:	18 2f       	mov	r17, r24
 420:	88 23       	and	r24, r24
		if(key !=  '\0' && key != '#')
 422:	09 f4       	brne	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	1a c1       	rjmp	.+564    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 426:	83 32       	cpi	r24, 0x23	; 35
 428:	09 f4       	brne	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	1e c1       	rjmp	.+572    	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
		{
			LCD_WriteData(key);
 42c:	40 df       	rcall	.-384    	; 0x2ae <LCD_WriteData>
 42e:	1a 32       	cpi	r17, 0x2A	; 42
			if (key == '*')
 430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	38 86       	std	Y+8, r3	; 0x08
			{
				place = count;
 434:	e1 e0       	ldi	r30, 0x01	; 1
			}
			number[count] = key;
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	ec 0f       	add	r30, r28
 43a:	fd 1f       	adc	r31, r29
 43c:	e3 0d       	add	r30, r3
 43e:	f1 1d       	adc	r31, r1
 440:	10 83       	st	Z, r17
			count++;
 442:	33 94       	inc	r3
 444:	0a c1       	rjmp	.+532    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
		{
			//LCD_ClearScreen();
			for(int i = 0; i < place; i++)
			{
				//LCD_WriteData(number[i]);
				holder = changetoInteger(number[i]);
 446:	f7 01       	movw	r30, r14
 448:	81 91       	ld	r24, Z+
 44a:	7f 01       	movw	r14, r30
 44c:	87 df       	rcall	.-242    	; 0x35c <changetoInteger>
 44e:	68 2e       	mov	r6, r24
				num1 = holder*pow(10, holder2) + num1;
 450:	67 2d       	mov	r22, r7
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	14 d2       	rcall	.+1064   	; 0x882 <__floatunsisf>
 45a:	9b 01       	movw	r18, r22
 45c:	ac 01       	movw	r20, r24
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	80 e2       	ldi	r24, 0x20	; 32
 464:	91 e4       	ldi	r25, 0x41	; 65
 466:	fe d2       	rcall	.+1532   	; 0xa64 <pow>
 468:	4b 01       	movw	r8, r22
 46a:	5c 01       	movw	r10, r24
 46c:	66 2d       	mov	r22, r6
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	08 d2       	rcall	.+1040   	; 0x886 <__floatsisf>
 476:	a5 01       	movw	r20, r10
 478:	94 01       	movw	r18, r8
 47a:	91 d2       	rcall	.+1314   	; 0x99e <__mulsf3>
 47c:	4b 01       	movw	r8, r22
 47e:	5c 01       	movw	r10, r24
 480:	60 2f       	mov	r22, r16
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	fe d1       	rcall	.+1020   	; 0x886 <__floatsisf>
 48a:	9b 01       	movw	r18, r22
 48c:	ac 01       	movw	r20, r24
 48e:	c5 01       	movw	r24, r10
 490:	b4 01       	movw	r22, r8
 492:	fa d0       	rcall	.+500    	; 0x688 <__addsf3>
 494:	ca d1       	rcall	.+916    	; 0x82a <__fixunssfsi>
 496:	06 2f       	mov	r16, r22
 498:	7a 94       	dec	r7
				holder2--;	
 49a:	ff ef       	ldi	r31, 0xFF	; 255
		unsigned char holder2 = place - 1;
		unsigned char holder = 0;
		if (key == '#')
		{
			//LCD_ClearScreen();
			for(int i = 0; i < place; i++)
 49c:	7f 12       	cpse	r7, r31
 49e:	d3 cf       	rjmp	.-90     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a2:	02 2d       	mov	r16, r2
 4a4:	23 2d       	mov	r18, r3
				num1 = holder*pow(10, holder2) + num1;
				holder2--;	
			}
			//LCD_WriteData('.');
			holder2 = 1;
			for(int j = place+1; j < count; j++)
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	c6 01       	movw	r24, r12
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	82 17       	cp	r24, r18
 4ae:	93 07       	cpc	r25, r19
 4b0:	0c f0       	brlt	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b2:	40 c0       	rjmp	.+128    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 4b4:	88 85       	ldd	r24, Y+8	; 0x08
 4b6:	a8 2e       	mov	r10, r24
 4b8:	b1 2c       	mov	r11, r1
 4ba:	9f ef       	ldi	r25, 0xFF	; 255
 4bc:	a9 1a       	sub	r10, r25
 4be:	b9 0a       	sbc	r11, r25
 4c0:	a1 e0       	ldi	r26, 0x01	; 1
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	ac 0f       	add	r26, r28
 4c6:	bd 1f       	adc	r27, r29
 4c8:	aa 0e       	add	r10, r26
 4ca:	bb 1e       	adc	r11, r27
 4cc:	88 2e       	mov	r8, r24
 4ce:	83 94       	inc	r8
 4d0:	83 94       	inc	r8
 4d2:	83 18       	sub	r8, r3
 4d4:	ee 24       	eor	r14, r14
 4d6:	e3 94       	inc	r14
			{
				//LCD_WriteData(number[j]);
				holder = changetoInteger(number[j]);
 4d8:	f2 2c       	mov	r15, r2
 4da:	f5 01       	movw	r30, r10
 4dc:	81 91       	ld	r24, Z+
 4de:	5f 01       	movw	r10, r30
 4e0:	3d df       	rcall	.-390    	; 0x35c <changetoInteger>
				num2 = holder*pow(10, holder2) + num2;
 4e2:	98 2e       	mov	r9, r24
 4e4:	6e 2d       	mov	r22, r14
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	ca d1       	rcall	.+916    	; 0x882 <__floatunsisf>
 4ee:	9b 01       	movw	r18, r22
 4f0:	ac 01       	movw	r20, r24
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	80 e2       	ldi	r24, 0x20	; 32
 4f8:	91 e4       	ldi	r25, 0x41	; 65
 4fa:	b4 d2       	rcall	.+1384   	; 0xa64 <pow>
 4fc:	2b 01       	movw	r4, r22
 4fe:	3c 01       	movw	r6, r24
 500:	69 2d       	mov	r22, r9
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	be d1       	rcall	.+892    	; 0x886 <__floatsisf>
 50a:	a3 01       	movw	r20, r6
 50c:	92 01       	movw	r18, r4
 50e:	47 d2       	rcall	.+1166   	; 0x99e <__mulsf3>
 510:	2b 01       	movw	r4, r22
 512:	3c 01       	movw	r6, r24
 514:	6f 2d       	mov	r22, r15
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	b4 d1       	rcall	.+872    	; 0x886 <__floatsisf>
 51e:	9b 01       	movw	r18, r22
 520:	ac 01       	movw	r20, r24
 522:	c3 01       	movw	r24, r6
 524:	b2 01       	movw	r22, r4
 526:	b0 d0       	rcall	.+352    	; 0x688 <__addsf3>
 528:	80 d1       	rcall	.+768    	; 0x82a <__fixunssfsi>
				holder2--;
 52a:	f6 2e       	mov	r15, r22
				num1 = holder*pow(10, holder2) + num1;
				holder2--;	
			}
			//LCD_WriteData('.');
			holder2 = 1;
			for(int j = place+1; j < count; j++)
 52c:	ea 94       	dec	r14
 52e:	e8 10       	cpse	r14, r8
 530:	d4 cf       	rjmp	.-88     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
				holder2--;
			}
		
		float n1 = (float) num1;
		float n2 = (float) num2;
		float dec = n1 + (n2/100);		
 532:	01 c0       	rjmp	.+2      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 534:	f2 2c       	mov	r15, r2
 536:	6f 2d       	mov	r22, r15
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	a1 d1       	rcall	.+834    	; 0x882 <__floatunsisf>
 540:	20 e0       	ldi	r18, 0x00	; 0
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	48 ec       	ldi	r20, 0xC8	; 200
 546:	52 e4       	ldi	r21, 0x42	; 66
 548:	03 d1       	rcall	.+518    	; 0x750 <__divsf3>
 54a:	4b 01       	movw	r8, r22
 54c:	5c 01       	movw	r10, r24
 54e:	60 2f       	mov	r22, r16
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	95 d1       	rcall	.+810    	; 0x882 <__floatunsisf>
 558:	9b 01       	movw	r18, r22
 55a:	ac 01       	movw	r20, r24
 55c:	c5 01       	movw	r24, r10
 55e:	b4 01       	movw	r22, r8
		//dec = dec + 1.12;
		float decpart = (dec - (int)dec) * 100;
 560:	93 d0       	rcall	.+294    	; 0x688 <__addsf3>
 562:	2b 01       	movw	r4, r22
 564:	3c 01       	movw	r6, r24
 566:	5c d1       	rcall	.+696    	; 0x820 <__fixsfsi>
		int decVal = (int)decpart;
 568:	4b 01       	movw	r8, r22
 56a:	5c 01       	movw	r10, r24
 56c:	07 2e       	mov	r0, r23
 56e:	00 0c       	add	r0, r0
 570:	88 0b       	sbc	r24, r24
 572:	99 0b       	sbc	r25, r25
 574:	88 d1       	rcall	.+784    	; 0x886 <__floatsisf>
 576:	9b 01       	movw	r18, r22
 578:	ac 01       	movw	r20, r24
 57a:	c3 01       	movw	r24, r6
 57c:	b2 01       	movw	r22, r4
 57e:	83 d0       	rcall	.+262    	; 0x686 <__subsf3>
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	48 ec       	ldi	r20, 0xC8	; 200
 586:	52 e4       	ldi	r21, 0x42	; 66
 588:	0a d2       	rcall	.+1044   	; 0x99e <__mulsf3>
 58a:	4a d1       	rcall	.+660    	; 0x820 <__fixsfsi>
 58c:	69 87       	std	Y+9, r22	; 0x09
 58e:	7a 87       	std	Y+10, r23	; 0x0a
 590:	8b 87       	std	Y+11, r24	; 0x0b
		
		holder2 = place - 1;
		
		unsigned char holder3 = 0;
	
		for(int i = 0; i < place; i++)
 592:	9c 87       	std	Y+12, r25	; 0x0c
 594:	1c 14       	cp	r1, r12
 596:	1d 04       	cpc	r1, r13
 598:	0c f0       	brlt	.+2      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
		{
			holder3 = num1/(pow(10,holder2));
 59a:	36 c0       	rjmp	.+108    	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 59c:	e1 2c       	mov	r14, r1
 59e:	f1 2c       	mov	r15, r1
 5a0:	68 2d       	mov	r22, r8
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	6e d1       	rcall	.+732    	; 0x886 <__floatsisf>
 5aa:	4b 01       	movw	r8, r22
 5ac:	5c 01       	movw	r10, r24
 5ae:	61 2f       	mov	r22, r17
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	65 d1       	rcall	.+714    	; 0x882 <__floatunsisf>
 5b8:	9b 01       	movw	r18, r22
 5ba:	ac 01       	movw	r20, r24
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	80 e2       	ldi	r24, 0x20	; 32
 5c2:	91 e4       	ldi	r25, 0x41	; 65
 5c4:	4f d2       	rcall	.+1182   	; 0xa64 <pow>
 5c6:	2b 01       	movw	r4, r22
 5c8:	3c 01       	movw	r6, r24
 5ca:	9b 01       	movw	r18, r22
 5cc:	ac 01       	movw	r20, r24
			num1 = num1 - (holder3 * pow(10, holder2));
 5ce:	c5 01       	movw	r24, r10
 5d0:	b4 01       	movw	r22, r8
 5d2:	be d0       	rcall	.+380    	; 0x750 <__divsf3>
 5d4:	2a d1       	rcall	.+596    	; 0x82a <__fixunssfsi>
 5d6:	06 2f       	mov	r16, r22
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	53 d1       	rcall	.+678    	; 0x886 <__floatsisf>
 5e0:	a3 01       	movw	r20, r6
 5e2:	92 01       	movw	r18, r4
 5e4:	dc d1       	rcall	.+952    	; 0x99e <__mulsf3>
 5e6:	9b 01       	movw	r18, r22
 5e8:	ac 01       	movw	r20, r24
 5ea:	c5 01       	movw	r24, r10
			LCD_WriteData(changetoChar(holder3));
 5ec:	b4 01       	movw	r22, r8
 5ee:	4b d0       	rcall	.+150    	; 0x686 <__subsf3>
 5f0:	1c d1       	rcall	.+568    	; 0x82a <__fixunssfsi>
			holder2--;
 5f2:	86 2e       	mov	r8, r22
		
		holder2 = place - 1;
		
		unsigned char holder3 = 0;
	
		for(int i = 0; i < place; i++)
 5f4:	80 2f       	mov	r24, r16
 5f6:	cf de       	rcall	.-610    	; 0x396 <changetoChar>
 5f8:	5a de       	rcall	.-844    	; 0x2ae <LCD_WriteData>
			num1 = num1 - (holder3 * pow(10, holder2));
			LCD_WriteData(changetoChar(holder3));
			holder2--;
		}
		holder2 = 1;
		LCD_WriteData('.');
 5fa:	11 50       	subi	r17, 0x01	; 1
 5fc:	ff ef       	ldi	r31, 0xFF	; 255
 5fe:	ef 1a       	sub	r14, r31
		for(int i = 0; i < 2; i++)
		{
			holder3 = num2/(pow(10,holder2));
 600:	ff 0a       	sbc	r15, r31
 602:	ec 14       	cp	r14, r12
 604:	fd 04       	cpc	r15, r13
 606:	61 f6       	brne	.-104    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 608:	8e e2       	ldi	r24, 0x2E	; 46
 60a:	51 de       	rcall	.-862    	; 0x2ae <LCD_WriteData>
 60c:	69 85       	ldd	r22, Y+9	; 0x09
 60e:	7a 85       	ldd	r23, Y+10	; 0x0a
 610:	77 27       	eor	r23, r23
 612:	07 2e       	mov	r0, r23
 614:	00 0c       	add	r0, r0
 616:	88 0b       	sbc	r24, r24
 618:	99 0b       	sbc	r25, r25
 61a:	35 d1       	rcall	.+618    	; 0x886 <__floatsisf>
 61c:	6b 01       	movw	r12, r22
 61e:	7c 01       	movw	r14, r24
 620:	20 e0       	ldi	r18, 0x00	; 0
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	40 e2       	ldi	r20, 0x20	; 32
 626:	51 e4       	ldi	r21, 0x41	; 65
			num2 = num2 - (holder3 * pow(10, holder2));
 628:	93 d0       	rcall	.+294    	; 0x750 <__divsf3>
 62a:	ff d0       	rcall	.+510    	; 0x82a <__fixunssfsi>
 62c:	06 2f       	mov	r16, r22
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	28 d1       	rcall	.+592    	; 0x886 <__floatsisf>
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	40 e2       	ldi	r20, 0x20	; 32
 63c:	51 e4       	ldi	r21, 0x41	; 65
 63e:	af d1       	rcall	.+862    	; 0x99e <__mulsf3>
 640:	9b 01       	movw	r18, r22
 642:	ac 01       	movw	r20, r24
 644:	c7 01       	movw	r24, r14
 646:	b6 01       	movw	r22, r12
 648:	1e d0       	rcall	.+60     	; 0x686 <__subsf3>
 64a:	ef d0       	rcall	.+478    	; 0x82a <__fixunssfsi>
 64c:	16 2f       	mov	r17, r22
 64e:	80 2f       	mov	r24, r16
			LCD_WriteData(changetoChar(holder3));
 650:	a2 de       	rcall	.-700    	; 0x396 <changetoChar>
 652:	2d de       	rcall	.-934    	; 0x2ae <LCD_WriteData>
 654:	81 2f       	mov	r24, r17
 656:	9f de       	rcall	.-706    	; 0x396 <changetoChar>
 658:	2a de       	rcall	.-940    	; 0x2ae <LCD_WriteData>
 65a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
 65e:	88 23       	and	r24, r24
 660:	e1 f3       	breq	.-8      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 662:	20 92 08 01 	sts	0x0108, r2	; 0x800108 <TimerFlag>
			holder2--;
		}
	}
        while(!TimerFlag);
 666:	da ce       	rjmp	.-588    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 668:	18 85       	ldd	r17, Y+8	; 0x08
 66a:	11 50       	subi	r17, 0x01	; 1
        TimerFlag = 0;
 66c:	88 85       	ldd	r24, Y+8	; 0x08
 66e:	c8 2e       	mov	r12, r24
    }
 670:	d1 2c       	mov	r13, r1
			number[count] = key;
			count++;
		}
		unsigned char num1 = 0; 
		unsigned char num2 = 0;
		unsigned char holder2 = place - 1;
 672:	1c 14       	cp	r1, r12
 674:	1d 04       	cpc	r1, r13
		unsigned char holder = 0;
		if (key == '#')
		{
			//LCD_ClearScreen();
			for(int i = 0; i < place; i++)
 676:	0c f0       	brlt	.+2      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 678:	14 cf       	rjmp	.-472    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 67a:	de 01       	movw	r26, r28
 67c:	11 96       	adiw	r26, 0x01	; 1
 67e:	7d 01       	movw	r14, r26
 680:	71 2e       	mov	r7, r17
 682:	02 2d       	mov	r16, r2
 684:	e0 ce       	rjmp	.-576    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>

00000686 <__subsf3>:
 686:	50 58       	subi	r21, 0x80	; 128

00000688 <__addsf3>:
 688:	bb 27       	eor	r27, r27
			number[count] = key;
			count++;
		}
		unsigned char num1 = 0; 
		unsigned char num2 = 0;
		unsigned char holder2 = place - 1;
 68a:	aa 27       	eor	r26, r26
		unsigned char holder = 0;
		if (key == '#')
		{
			//LCD_ClearScreen();
			for(int i = 0; i < place; i++)
 68c:	0e d0       	rcall	.+28     	; 0x6aa <__addsf3x>
 68e:	4d c1       	rjmp	.+666    	; 0x92a <__fp_round>
 690:	3e d1       	rcall	.+636    	; 0x90e <__fp_pscA>
 692:	30 f0       	brcs	.+12     	; 0x6a0 <__addsf3+0x18>
 694:	43 d1       	rcall	.+646    	; 0x91c <__fp_pscB>
 696:	20 f0       	brcs	.+8      	; 0x6a0 <__addsf3+0x18>
 698:	31 f4       	brne	.+12     	; 0x6a6 <__addsf3+0x1e>
 69a:	9f 3f       	cpi	r25, 0xFF	; 255
 69c:	11 f4       	brne	.+4      	; 0x6a2 <__addsf3+0x1a>
 69e:	1e f4       	brtc	.+6      	; 0x6a6 <__addsf3+0x1e>
 6a0:	33 c1       	rjmp	.+614    	; 0x908 <__fp_nan>
 6a2:	0e f4       	brtc	.+2      	; 0x6a6 <__addsf3+0x1e>
 6a4:	e0 95       	com	r30
 6a6:	e7 fb       	bst	r30, 7
 6a8:	29 c1       	rjmp	.+594    	; 0x8fc <__fp_inf>

000006aa <__addsf3x>:
 6aa:	e9 2f       	mov	r30, r25
 6ac:	4f d1       	rcall	.+670    	; 0x94c <__fp_split3>
 6ae:	80 f3       	brcs	.-32     	; 0x690 <__addsf3+0x8>
 6b0:	ba 17       	cp	r27, r26
 6b2:	62 07       	cpc	r22, r18
 6b4:	73 07       	cpc	r23, r19
 6b6:	84 07       	cpc	r24, r20
 6b8:	95 07       	cpc	r25, r21
 6ba:	18 f0       	brcs	.+6      	; 0x6c2 <__addsf3x+0x18>
 6bc:	71 f4       	brne	.+28     	; 0x6da <__addsf3x+0x30>
 6be:	9e f5       	brtc	.+102    	; 0x726 <__addsf3x+0x7c>
 6c0:	67 c1       	rjmp	.+718    	; 0x990 <__fp_zero>
 6c2:	0e f4       	brtc	.+2      	; 0x6c6 <__addsf3x+0x1c>
 6c4:	e0 95       	com	r30
 6c6:	0b 2e       	mov	r0, r27
 6c8:	ba 2f       	mov	r27, r26
 6ca:	a0 2d       	mov	r26, r0
 6cc:	0b 01       	movw	r0, r22
 6ce:	b9 01       	movw	r22, r18
 6d0:	90 01       	movw	r18, r0
 6d2:	0c 01       	movw	r0, r24
 6d4:	ca 01       	movw	r24, r20
 6d6:	a0 01       	movw	r20, r0
 6d8:	11 24       	eor	r1, r1
 6da:	ff 27       	eor	r31, r31
 6dc:	59 1b       	sub	r21, r25
 6de:	99 f0       	breq	.+38     	; 0x706 <__addsf3x+0x5c>
 6e0:	59 3f       	cpi	r21, 0xF9	; 249
 6e2:	50 f4       	brcc	.+20     	; 0x6f8 <__addsf3x+0x4e>
 6e4:	50 3e       	cpi	r21, 0xE0	; 224
 6e6:	68 f1       	brcs	.+90     	; 0x742 <__addsf3x+0x98>
 6e8:	1a 16       	cp	r1, r26
 6ea:	f0 40       	sbci	r31, 0x00	; 0
 6ec:	a2 2f       	mov	r26, r18
 6ee:	23 2f       	mov	r18, r19
 6f0:	34 2f       	mov	r19, r20
 6f2:	44 27       	eor	r20, r20
 6f4:	58 5f       	subi	r21, 0xF8	; 248
 6f6:	f3 cf       	rjmp	.-26     	; 0x6de <__addsf3x+0x34>
 6f8:	46 95       	lsr	r20
 6fa:	37 95       	ror	r19
 6fc:	27 95       	ror	r18
 6fe:	a7 95       	ror	r26
 700:	f0 40       	sbci	r31, 0x00	; 0
 702:	53 95       	inc	r21
 704:	c9 f7       	brne	.-14     	; 0x6f8 <__addsf3x+0x4e>
 706:	7e f4       	brtc	.+30     	; 0x726 <__addsf3x+0x7c>
 708:	1f 16       	cp	r1, r31
 70a:	ba 0b       	sbc	r27, r26
 70c:	62 0b       	sbc	r22, r18
 70e:	73 0b       	sbc	r23, r19
 710:	84 0b       	sbc	r24, r20
 712:	ba f0       	brmi	.+46     	; 0x742 <__addsf3x+0x98>
 714:	91 50       	subi	r25, 0x01	; 1
 716:	a1 f0       	breq	.+40     	; 0x740 <__addsf3x+0x96>
 718:	ff 0f       	add	r31, r31
 71a:	bb 1f       	adc	r27, r27
 71c:	66 1f       	adc	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	c2 f7       	brpl	.-16     	; 0x714 <__addsf3x+0x6a>
 724:	0e c0       	rjmp	.+28     	; 0x742 <__addsf3x+0x98>
 726:	ba 0f       	add	r27, r26
 728:	62 1f       	adc	r22, r18
 72a:	73 1f       	adc	r23, r19
 72c:	84 1f       	adc	r24, r20
 72e:	48 f4       	brcc	.+18     	; 0x742 <__addsf3x+0x98>
 730:	87 95       	ror	r24
 732:	77 95       	ror	r23
 734:	67 95       	ror	r22
 736:	b7 95       	ror	r27
 738:	f7 95       	ror	r31
 73a:	9e 3f       	cpi	r25, 0xFE	; 254
 73c:	08 f0       	brcs	.+2      	; 0x740 <__addsf3x+0x96>
 73e:	b3 cf       	rjmp	.-154    	; 0x6a6 <__addsf3+0x1e>
 740:	93 95       	inc	r25
 742:	88 0f       	add	r24, r24
 744:	08 f0       	brcs	.+2      	; 0x748 <__addsf3x+0x9e>
 746:	99 27       	eor	r25, r25
 748:	ee 0f       	add	r30, r30
 74a:	97 95       	ror	r25
 74c:	87 95       	ror	r24
 74e:	08 95       	ret

00000750 <__divsf3>:
 750:	0c d0       	rcall	.+24     	; 0x76a <__divsf3x>
 752:	eb c0       	rjmp	.+470    	; 0x92a <__fp_round>
 754:	e3 d0       	rcall	.+454    	; 0x91c <__fp_pscB>
 756:	40 f0       	brcs	.+16     	; 0x768 <__divsf3+0x18>
 758:	da d0       	rcall	.+436    	; 0x90e <__fp_pscA>
 75a:	30 f0       	brcs	.+12     	; 0x768 <__divsf3+0x18>
 75c:	21 f4       	brne	.+8      	; 0x766 <__divsf3+0x16>
 75e:	5f 3f       	cpi	r21, 0xFF	; 255
 760:	19 f0       	breq	.+6      	; 0x768 <__divsf3+0x18>
 762:	cc c0       	rjmp	.+408    	; 0x8fc <__fp_inf>
 764:	51 11       	cpse	r21, r1
 766:	15 c1       	rjmp	.+554    	; 0x992 <__fp_szero>
 768:	cf c0       	rjmp	.+414    	; 0x908 <__fp_nan>

0000076a <__divsf3x>:
 76a:	f0 d0       	rcall	.+480    	; 0x94c <__fp_split3>
 76c:	98 f3       	brcs	.-26     	; 0x754 <__divsf3+0x4>

0000076e <__divsf3_pse>:
 76e:	99 23       	and	r25, r25
 770:	c9 f3       	breq	.-14     	; 0x764 <__divsf3+0x14>
 772:	55 23       	and	r21, r21
 774:	b1 f3       	breq	.-20     	; 0x762 <__divsf3+0x12>
 776:	95 1b       	sub	r25, r21
 778:	55 0b       	sbc	r21, r21
 77a:	bb 27       	eor	r27, r27
 77c:	aa 27       	eor	r26, r26
 77e:	62 17       	cp	r22, r18
 780:	73 07       	cpc	r23, r19
 782:	84 07       	cpc	r24, r20
 784:	38 f0       	brcs	.+14     	; 0x794 <__divsf3_pse+0x26>
 786:	9f 5f       	subi	r25, 0xFF	; 255
 788:	5f 4f       	sbci	r21, 0xFF	; 255
 78a:	22 0f       	add	r18, r18
 78c:	33 1f       	adc	r19, r19
 78e:	44 1f       	adc	r20, r20
 790:	aa 1f       	adc	r26, r26
 792:	a9 f3       	breq	.-22     	; 0x77e <__divsf3_pse+0x10>
 794:	33 d0       	rcall	.+102    	; 0x7fc <__divsf3_pse+0x8e>
 796:	0e 2e       	mov	r0, r30
 798:	3a f0       	brmi	.+14     	; 0x7a8 <__divsf3_pse+0x3a>
 79a:	e0 e8       	ldi	r30, 0x80	; 128
 79c:	30 d0       	rcall	.+96     	; 0x7fe <__divsf3_pse+0x90>
 79e:	91 50       	subi	r25, 0x01	; 1
 7a0:	50 40       	sbci	r21, 0x00	; 0
 7a2:	e6 95       	lsr	r30
 7a4:	00 1c       	adc	r0, r0
 7a6:	ca f7       	brpl	.-14     	; 0x79a <__divsf3_pse+0x2c>
 7a8:	29 d0       	rcall	.+82     	; 0x7fc <__divsf3_pse+0x8e>
 7aa:	fe 2f       	mov	r31, r30
 7ac:	27 d0       	rcall	.+78     	; 0x7fc <__divsf3_pse+0x8e>
 7ae:	66 0f       	add	r22, r22
 7b0:	77 1f       	adc	r23, r23
 7b2:	88 1f       	adc	r24, r24
 7b4:	bb 1f       	adc	r27, r27
 7b6:	26 17       	cp	r18, r22
 7b8:	37 07       	cpc	r19, r23
 7ba:	48 07       	cpc	r20, r24
 7bc:	ab 07       	cpc	r26, r27
 7be:	b0 e8       	ldi	r27, 0x80	; 128
 7c0:	09 f0       	breq	.+2      	; 0x7c4 <__divsf3_pse+0x56>
 7c2:	bb 0b       	sbc	r27, r27
 7c4:	80 2d       	mov	r24, r0
 7c6:	bf 01       	movw	r22, r30
 7c8:	ff 27       	eor	r31, r31
 7ca:	93 58       	subi	r25, 0x83	; 131
 7cc:	5f 4f       	sbci	r21, 0xFF	; 255
 7ce:	2a f0       	brmi	.+10     	; 0x7da <__divsf3_pse+0x6c>
 7d0:	9e 3f       	cpi	r25, 0xFE	; 254
 7d2:	51 05       	cpc	r21, r1
 7d4:	68 f0       	brcs	.+26     	; 0x7f0 <__divsf3_pse+0x82>
 7d6:	92 c0       	rjmp	.+292    	; 0x8fc <__fp_inf>
 7d8:	dc c0       	rjmp	.+440    	; 0x992 <__fp_szero>
 7da:	5f 3f       	cpi	r21, 0xFF	; 255
 7dc:	ec f3       	brlt	.-6      	; 0x7d8 <__divsf3_pse+0x6a>
 7de:	98 3e       	cpi	r25, 0xE8	; 232
 7e0:	dc f3       	brlt	.-10     	; 0x7d8 <__divsf3_pse+0x6a>
 7e2:	86 95       	lsr	r24
 7e4:	77 95       	ror	r23
 7e6:	67 95       	ror	r22
 7e8:	b7 95       	ror	r27
 7ea:	f7 95       	ror	r31
 7ec:	9f 5f       	subi	r25, 0xFF	; 255
 7ee:	c9 f7       	brne	.-14     	; 0x7e2 <__divsf3_pse+0x74>
 7f0:	88 0f       	add	r24, r24
 7f2:	91 1d       	adc	r25, r1
 7f4:	96 95       	lsr	r25
 7f6:	87 95       	ror	r24
 7f8:	97 f9       	bld	r25, 7
 7fa:	08 95       	ret
 7fc:	e1 e0       	ldi	r30, 0x01	; 1
 7fe:	66 0f       	add	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	bb 1f       	adc	r27, r27
 806:	62 17       	cp	r22, r18
 808:	73 07       	cpc	r23, r19
 80a:	84 07       	cpc	r24, r20
 80c:	ba 07       	cpc	r27, r26
 80e:	20 f0       	brcs	.+8      	; 0x818 <__divsf3_pse+0xaa>
 810:	62 1b       	sub	r22, r18
 812:	73 0b       	sbc	r23, r19
 814:	84 0b       	sbc	r24, r20
 816:	ba 0b       	sbc	r27, r26
 818:	ee 1f       	adc	r30, r30
 81a:	88 f7       	brcc	.-30     	; 0x7fe <__divsf3_pse+0x90>
 81c:	e0 95       	com	r30
 81e:	08 95       	ret

00000820 <__fixsfsi>:
 820:	04 d0       	rcall	.+8      	; 0x82a <__fixunssfsi>
 822:	68 94       	set
 824:	b1 11       	cpse	r27, r1
 826:	b5 c0       	rjmp	.+362    	; 0x992 <__fp_szero>
 828:	08 95       	ret

0000082a <__fixunssfsi>:
 82a:	98 d0       	rcall	.+304    	; 0x95c <__fp_splitA>
 82c:	88 f0       	brcs	.+34     	; 0x850 <__fixunssfsi+0x26>
 82e:	9f 57       	subi	r25, 0x7F	; 127
 830:	90 f0       	brcs	.+36     	; 0x856 <__fixunssfsi+0x2c>
 832:	b9 2f       	mov	r27, r25
 834:	99 27       	eor	r25, r25
 836:	b7 51       	subi	r27, 0x17	; 23
 838:	a0 f0       	brcs	.+40     	; 0x862 <__fixunssfsi+0x38>
 83a:	d1 f0       	breq	.+52     	; 0x870 <__fixunssfsi+0x46>
 83c:	66 0f       	add	r22, r22
 83e:	77 1f       	adc	r23, r23
 840:	88 1f       	adc	r24, r24
 842:	99 1f       	adc	r25, r25
 844:	1a f0       	brmi	.+6      	; 0x84c <__fixunssfsi+0x22>
 846:	ba 95       	dec	r27
 848:	c9 f7       	brne	.-14     	; 0x83c <__fixunssfsi+0x12>
 84a:	12 c0       	rjmp	.+36     	; 0x870 <__fixunssfsi+0x46>
 84c:	b1 30       	cpi	r27, 0x01	; 1
 84e:	81 f0       	breq	.+32     	; 0x870 <__fixunssfsi+0x46>
 850:	9f d0       	rcall	.+318    	; 0x990 <__fp_zero>
 852:	b1 e0       	ldi	r27, 0x01	; 1
 854:	08 95       	ret
 856:	9c c0       	rjmp	.+312    	; 0x990 <__fp_zero>
 858:	67 2f       	mov	r22, r23
 85a:	78 2f       	mov	r23, r24
 85c:	88 27       	eor	r24, r24
 85e:	b8 5f       	subi	r27, 0xF8	; 248
 860:	39 f0       	breq	.+14     	; 0x870 <__fixunssfsi+0x46>
 862:	b9 3f       	cpi	r27, 0xF9	; 249
 864:	cc f3       	brlt	.-14     	; 0x858 <__fixunssfsi+0x2e>
 866:	86 95       	lsr	r24
 868:	77 95       	ror	r23
 86a:	67 95       	ror	r22
 86c:	b3 95       	inc	r27
 86e:	d9 f7       	brne	.-10     	; 0x866 <__fixunssfsi+0x3c>
 870:	3e f4       	brtc	.+14     	; 0x880 <__fixunssfsi+0x56>
 872:	90 95       	com	r25
 874:	80 95       	com	r24
 876:	70 95       	com	r23
 878:	61 95       	neg	r22
 87a:	7f 4f       	sbci	r23, 0xFF	; 255
 87c:	8f 4f       	sbci	r24, 0xFF	; 255
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	08 95       	ret

00000882 <__floatunsisf>:
 882:	e8 94       	clt
 884:	09 c0       	rjmp	.+18     	; 0x898 <__floatsisf+0x12>

00000886 <__floatsisf>:
 886:	97 fb       	bst	r25, 7
 888:	3e f4       	brtc	.+14     	; 0x898 <__floatsisf+0x12>
 88a:	90 95       	com	r25
 88c:	80 95       	com	r24
 88e:	70 95       	com	r23
 890:	61 95       	neg	r22
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	99 23       	and	r25, r25
 89a:	a9 f0       	breq	.+42     	; 0x8c6 <__floatsisf+0x40>
 89c:	f9 2f       	mov	r31, r25
 89e:	96 e9       	ldi	r25, 0x96	; 150
 8a0:	bb 27       	eor	r27, r27
 8a2:	93 95       	inc	r25
 8a4:	f6 95       	lsr	r31
 8a6:	87 95       	ror	r24
 8a8:	77 95       	ror	r23
 8aa:	67 95       	ror	r22
 8ac:	b7 95       	ror	r27
 8ae:	f1 11       	cpse	r31, r1
 8b0:	f8 cf       	rjmp	.-16     	; 0x8a2 <__floatsisf+0x1c>
 8b2:	fa f4       	brpl	.+62     	; 0x8f2 <__floatsisf+0x6c>
 8b4:	bb 0f       	add	r27, r27
 8b6:	11 f4       	brne	.+4      	; 0x8bc <__floatsisf+0x36>
 8b8:	60 ff       	sbrs	r22, 0
 8ba:	1b c0       	rjmp	.+54     	; 0x8f2 <__floatsisf+0x6c>
 8bc:	6f 5f       	subi	r22, 0xFF	; 255
 8be:	7f 4f       	sbci	r23, 0xFF	; 255
 8c0:	8f 4f       	sbci	r24, 0xFF	; 255
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	16 c0       	rjmp	.+44     	; 0x8f2 <__floatsisf+0x6c>
 8c6:	88 23       	and	r24, r24
 8c8:	11 f0       	breq	.+4      	; 0x8ce <__floatsisf+0x48>
 8ca:	96 e9       	ldi	r25, 0x96	; 150
 8cc:	11 c0       	rjmp	.+34     	; 0x8f0 <__floatsisf+0x6a>
 8ce:	77 23       	and	r23, r23
 8d0:	21 f0       	breq	.+8      	; 0x8da <__floatsisf+0x54>
 8d2:	9e e8       	ldi	r25, 0x8E	; 142
 8d4:	87 2f       	mov	r24, r23
 8d6:	76 2f       	mov	r23, r22
 8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <__floatsisf+0x5e>
 8da:	66 23       	and	r22, r22
 8dc:	71 f0       	breq	.+28     	; 0x8fa <__floatsisf+0x74>
 8de:	96 e8       	ldi	r25, 0x86	; 134
 8e0:	86 2f       	mov	r24, r22
 8e2:	70 e0       	ldi	r23, 0x00	; 0
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	2a f0       	brmi	.+10     	; 0x8f2 <__floatsisf+0x6c>
 8e8:	9a 95       	dec	r25
 8ea:	66 0f       	add	r22, r22
 8ec:	77 1f       	adc	r23, r23
 8ee:	88 1f       	adc	r24, r24
 8f0:	da f7       	brpl	.-10     	; 0x8e8 <__floatsisf+0x62>
 8f2:	88 0f       	add	r24, r24
 8f4:	96 95       	lsr	r25
 8f6:	87 95       	ror	r24
 8f8:	97 f9       	bld	r25, 7
 8fa:	08 95       	ret

000008fc <__fp_inf>:
 8fc:	97 f9       	bld	r25, 7
 8fe:	9f 67       	ori	r25, 0x7F	; 127
 900:	80 e8       	ldi	r24, 0x80	; 128
 902:	70 e0       	ldi	r23, 0x00	; 0
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	08 95       	ret

00000908 <__fp_nan>:
 908:	9f ef       	ldi	r25, 0xFF	; 255
 90a:	80 ec       	ldi	r24, 0xC0	; 192
 90c:	08 95       	ret

0000090e <__fp_pscA>:
 90e:	00 24       	eor	r0, r0
 910:	0a 94       	dec	r0
 912:	16 16       	cp	r1, r22
 914:	17 06       	cpc	r1, r23
 916:	18 06       	cpc	r1, r24
 918:	09 06       	cpc	r0, r25
 91a:	08 95       	ret

0000091c <__fp_pscB>:
 91c:	00 24       	eor	r0, r0
 91e:	0a 94       	dec	r0
 920:	12 16       	cp	r1, r18
 922:	13 06       	cpc	r1, r19
 924:	14 06       	cpc	r1, r20
 926:	05 06       	cpc	r0, r21
 928:	08 95       	ret

0000092a <__fp_round>:
 92a:	09 2e       	mov	r0, r25
 92c:	03 94       	inc	r0
 92e:	00 0c       	add	r0, r0
 930:	11 f4       	brne	.+4      	; 0x936 <__fp_round+0xc>
 932:	88 23       	and	r24, r24
 934:	52 f0       	brmi	.+20     	; 0x94a <__fp_round+0x20>
 936:	bb 0f       	add	r27, r27
 938:	40 f4       	brcc	.+16     	; 0x94a <__fp_round+0x20>
 93a:	bf 2b       	or	r27, r31
 93c:	11 f4       	brne	.+4      	; 0x942 <__fp_round+0x18>
 93e:	60 ff       	sbrs	r22, 0
 940:	04 c0       	rjmp	.+8      	; 0x94a <__fp_round+0x20>
 942:	6f 5f       	subi	r22, 0xFF	; 255
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	8f 4f       	sbci	r24, 0xFF	; 255
 948:	9f 4f       	sbci	r25, 0xFF	; 255
 94a:	08 95       	ret

0000094c <__fp_split3>:
 94c:	57 fd       	sbrc	r21, 7
 94e:	90 58       	subi	r25, 0x80	; 128
 950:	44 0f       	add	r20, r20
 952:	55 1f       	adc	r21, r21
 954:	59 f0       	breq	.+22     	; 0x96c <__fp_splitA+0x10>
 956:	5f 3f       	cpi	r21, 0xFF	; 255
 958:	71 f0       	breq	.+28     	; 0x976 <__fp_splitA+0x1a>
 95a:	47 95       	ror	r20

0000095c <__fp_splitA>:
 95c:	88 0f       	add	r24, r24
 95e:	97 fb       	bst	r25, 7
 960:	99 1f       	adc	r25, r25
 962:	61 f0       	breq	.+24     	; 0x97c <__fp_splitA+0x20>
 964:	9f 3f       	cpi	r25, 0xFF	; 255
 966:	79 f0       	breq	.+30     	; 0x986 <__fp_splitA+0x2a>
 968:	87 95       	ror	r24
 96a:	08 95       	ret
 96c:	12 16       	cp	r1, r18
 96e:	13 06       	cpc	r1, r19
 970:	14 06       	cpc	r1, r20
 972:	55 1f       	adc	r21, r21
 974:	f2 cf       	rjmp	.-28     	; 0x95a <__fp_split3+0xe>
 976:	46 95       	lsr	r20
 978:	f1 df       	rcall	.-30     	; 0x95c <__fp_splitA>
 97a:	08 c0       	rjmp	.+16     	; 0x98c <__fp_splitA+0x30>
 97c:	16 16       	cp	r1, r22
 97e:	17 06       	cpc	r1, r23
 980:	18 06       	cpc	r1, r24
 982:	99 1f       	adc	r25, r25
 984:	f1 cf       	rjmp	.-30     	; 0x968 <__fp_splitA+0xc>
 986:	86 95       	lsr	r24
 988:	71 05       	cpc	r23, r1
 98a:	61 05       	cpc	r22, r1
 98c:	08 94       	sec
 98e:	08 95       	ret

00000990 <__fp_zero>:
 990:	e8 94       	clt

00000992 <__fp_szero>:
 992:	bb 27       	eor	r27, r27
 994:	66 27       	eor	r22, r22
 996:	77 27       	eor	r23, r23
 998:	cb 01       	movw	r24, r22
 99a:	97 f9       	bld	r25, 7
 99c:	08 95       	ret

0000099e <__mulsf3>:
 99e:	0b d0       	rcall	.+22     	; 0x9b6 <__mulsf3x>
 9a0:	c4 cf       	rjmp	.-120    	; 0x92a <__fp_round>
 9a2:	b5 df       	rcall	.-150    	; 0x90e <__fp_pscA>
 9a4:	28 f0       	brcs	.+10     	; 0x9b0 <__mulsf3+0x12>
 9a6:	ba df       	rcall	.-140    	; 0x91c <__fp_pscB>
 9a8:	18 f0       	brcs	.+6      	; 0x9b0 <__mulsf3+0x12>
 9aa:	95 23       	and	r25, r21
 9ac:	09 f0       	breq	.+2      	; 0x9b0 <__mulsf3+0x12>
 9ae:	a6 cf       	rjmp	.-180    	; 0x8fc <__fp_inf>
 9b0:	ab cf       	rjmp	.-170    	; 0x908 <__fp_nan>
 9b2:	11 24       	eor	r1, r1
 9b4:	ee cf       	rjmp	.-36     	; 0x992 <__fp_szero>

000009b6 <__mulsf3x>:
 9b6:	ca df       	rcall	.-108    	; 0x94c <__fp_split3>
 9b8:	a0 f3       	brcs	.-24     	; 0x9a2 <__mulsf3+0x4>

000009ba <__mulsf3_pse>:
 9ba:	95 9f       	mul	r25, r21
 9bc:	d1 f3       	breq	.-12     	; 0x9b2 <__mulsf3+0x14>
 9be:	95 0f       	add	r25, r21
 9c0:	50 e0       	ldi	r21, 0x00	; 0
 9c2:	55 1f       	adc	r21, r21
 9c4:	62 9f       	mul	r22, r18
 9c6:	f0 01       	movw	r30, r0
 9c8:	72 9f       	mul	r23, r18
 9ca:	bb 27       	eor	r27, r27
 9cc:	f0 0d       	add	r31, r0
 9ce:	b1 1d       	adc	r27, r1
 9d0:	63 9f       	mul	r22, r19
 9d2:	aa 27       	eor	r26, r26
 9d4:	f0 0d       	add	r31, r0
 9d6:	b1 1d       	adc	r27, r1
 9d8:	aa 1f       	adc	r26, r26
 9da:	64 9f       	mul	r22, r20
 9dc:	66 27       	eor	r22, r22
 9de:	b0 0d       	add	r27, r0
 9e0:	a1 1d       	adc	r26, r1
 9e2:	66 1f       	adc	r22, r22
 9e4:	82 9f       	mul	r24, r18
 9e6:	22 27       	eor	r18, r18
 9e8:	b0 0d       	add	r27, r0
 9ea:	a1 1d       	adc	r26, r1
 9ec:	62 1f       	adc	r22, r18
 9ee:	73 9f       	mul	r23, r19
 9f0:	b0 0d       	add	r27, r0
 9f2:	a1 1d       	adc	r26, r1
 9f4:	62 1f       	adc	r22, r18
 9f6:	83 9f       	mul	r24, r19
 9f8:	a0 0d       	add	r26, r0
 9fa:	61 1d       	adc	r22, r1
 9fc:	22 1f       	adc	r18, r18
 9fe:	74 9f       	mul	r23, r20
 a00:	33 27       	eor	r19, r19
 a02:	a0 0d       	add	r26, r0
 a04:	61 1d       	adc	r22, r1
 a06:	23 1f       	adc	r18, r19
 a08:	84 9f       	mul	r24, r20
 a0a:	60 0d       	add	r22, r0
 a0c:	21 1d       	adc	r18, r1
 a0e:	82 2f       	mov	r24, r18
 a10:	76 2f       	mov	r23, r22
 a12:	6a 2f       	mov	r22, r26
 a14:	11 24       	eor	r1, r1
 a16:	9f 57       	subi	r25, 0x7F	; 127
 a18:	50 40       	sbci	r21, 0x00	; 0
 a1a:	8a f0       	brmi	.+34     	; 0xa3e <__mulsf3_pse+0x84>
 a1c:	e1 f0       	breq	.+56     	; 0xa56 <__mulsf3_pse+0x9c>
 a1e:	88 23       	and	r24, r24
 a20:	4a f0       	brmi	.+18     	; 0xa34 <__mulsf3_pse+0x7a>
 a22:	ee 0f       	add	r30, r30
 a24:	ff 1f       	adc	r31, r31
 a26:	bb 1f       	adc	r27, r27
 a28:	66 1f       	adc	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	91 50       	subi	r25, 0x01	; 1
 a30:	50 40       	sbci	r21, 0x00	; 0
 a32:	a9 f7       	brne	.-22     	; 0xa1e <__mulsf3_pse+0x64>
 a34:	9e 3f       	cpi	r25, 0xFE	; 254
 a36:	51 05       	cpc	r21, r1
 a38:	70 f0       	brcs	.+28     	; 0xa56 <__mulsf3_pse+0x9c>
 a3a:	60 cf       	rjmp	.-320    	; 0x8fc <__fp_inf>
 a3c:	aa cf       	rjmp	.-172    	; 0x992 <__fp_szero>
 a3e:	5f 3f       	cpi	r21, 0xFF	; 255
 a40:	ec f3       	brlt	.-6      	; 0xa3c <__mulsf3_pse+0x82>
 a42:	98 3e       	cpi	r25, 0xE8	; 232
 a44:	dc f3       	brlt	.-10     	; 0xa3c <__mulsf3_pse+0x82>
 a46:	86 95       	lsr	r24
 a48:	77 95       	ror	r23
 a4a:	67 95       	ror	r22
 a4c:	b7 95       	ror	r27
 a4e:	f7 95       	ror	r31
 a50:	e7 95       	ror	r30
 a52:	9f 5f       	subi	r25, 0xFF	; 255
 a54:	c1 f7       	brne	.-16     	; 0xa46 <__mulsf3_pse+0x8c>
 a56:	fe 2b       	or	r31, r30
 a58:	88 0f       	add	r24, r24
 a5a:	91 1d       	adc	r25, r1
 a5c:	96 95       	lsr	r25
 a5e:	87 95       	ror	r24
 a60:	97 f9       	bld	r25, 7
 a62:	08 95       	ret

00000a64 <pow>:
 a64:	fa 01       	movw	r30, r20
 a66:	ee 0f       	add	r30, r30
 a68:	ff 1f       	adc	r31, r31
 a6a:	30 96       	adiw	r30, 0x00	; 0
 a6c:	21 05       	cpc	r18, r1
 a6e:	31 05       	cpc	r19, r1
 a70:	99 f1       	breq	.+102    	; 0xad8 <pow+0x74>
 a72:	61 15       	cp	r22, r1
 a74:	71 05       	cpc	r23, r1
 a76:	61 f4       	brne	.+24     	; 0xa90 <pow+0x2c>
 a78:	80 38       	cpi	r24, 0x80	; 128
 a7a:	bf e3       	ldi	r27, 0x3F	; 63
 a7c:	9b 07       	cpc	r25, r27
 a7e:	49 f1       	breq	.+82     	; 0xad2 <pow+0x6e>
 a80:	68 94       	set
 a82:	90 38       	cpi	r25, 0x80	; 128
 a84:	81 05       	cpc	r24, r1
 a86:	61 f0       	breq	.+24     	; 0xaa0 <pow+0x3c>
 a88:	80 38       	cpi	r24, 0x80	; 128
 a8a:	bf ef       	ldi	r27, 0xFF	; 255
 a8c:	9b 07       	cpc	r25, r27
 a8e:	41 f0       	breq	.+16     	; 0xaa0 <pow+0x3c>
 a90:	99 23       	and	r25, r25
 a92:	42 f5       	brpl	.+80     	; 0xae4 <pow+0x80>
 a94:	ff 3f       	cpi	r31, 0xFF	; 255
 a96:	e1 05       	cpc	r30, r1
 a98:	31 05       	cpc	r19, r1
 a9a:	21 05       	cpc	r18, r1
 a9c:	11 f1       	breq	.+68     	; 0xae2 <pow+0x7e>
 a9e:	e8 94       	clt
 aa0:	08 94       	sec
 aa2:	e7 95       	ror	r30
 aa4:	d9 01       	movw	r26, r18
 aa6:	aa 23       	and	r26, r26
 aa8:	29 f4       	brne	.+10     	; 0xab4 <pow+0x50>
 aaa:	ab 2f       	mov	r26, r27
 aac:	be 2f       	mov	r27, r30
 aae:	f8 5f       	subi	r31, 0xF8	; 248
 ab0:	d0 f3       	brcs	.-12     	; 0xaa6 <pow+0x42>
 ab2:	10 c0       	rjmp	.+32     	; 0xad4 <pow+0x70>
 ab4:	ff 5f       	subi	r31, 0xFF	; 255
 ab6:	70 f4       	brcc	.+28     	; 0xad4 <pow+0x70>
 ab8:	a6 95       	lsr	r26
 aba:	e0 f7       	brcc	.-8      	; 0xab4 <pow+0x50>
 abc:	f7 39       	cpi	r31, 0x97	; 151
 abe:	50 f0       	brcs	.+20     	; 0xad4 <pow+0x70>
 ac0:	19 f0       	breq	.+6      	; 0xac8 <pow+0x64>
 ac2:	ff 3a       	cpi	r31, 0xAF	; 175
 ac4:	38 f4       	brcc	.+14     	; 0xad4 <pow+0x70>
 ac6:	9f 77       	andi	r25, 0x7F	; 127
 ac8:	9f 93       	push	r25
 aca:	0c d0       	rcall	.+24     	; 0xae4 <pow+0x80>
 acc:	0f 90       	pop	r0
 ace:	07 fc       	sbrc	r0, 7
 ad0:	90 58       	subi	r25, 0x80	; 128
 ad2:	08 95       	ret
 ad4:	3e f0       	brts	.+14     	; 0xae4 <pow+0x80>
 ad6:	18 cf       	rjmp	.-464    	; 0x908 <__fp_nan>
 ad8:	60 e0       	ldi	r22, 0x00	; 0
 ada:	70 e0       	ldi	r23, 0x00	; 0
 adc:	80 e8       	ldi	r24, 0x80	; 128
 ade:	9f e3       	ldi	r25, 0x3F	; 63
 ae0:	08 95       	ret
 ae2:	4f e7       	ldi	r20, 0x7F	; 127
 ae4:	9f 77       	andi	r25, 0x7F	; 127
 ae6:	5f 93       	push	r21
 ae8:	4f 93       	push	r20
 aea:	3f 93       	push	r19
 aec:	2f 93       	push	r18
 aee:	9e d0       	rcall	.+316    	; 0xc2c <log>
 af0:	2f 91       	pop	r18
 af2:	3f 91       	pop	r19
 af4:	4f 91       	pop	r20
 af6:	5f 91       	pop	r21
 af8:	52 df       	rcall	.-348    	; 0x99e <__mulsf3>
 afa:	05 c0       	rjmp	.+10     	; 0xb06 <exp>
 afc:	19 f4       	brne	.+6      	; 0xb04 <pow+0xa0>
 afe:	0e f0       	brts	.+2      	; 0xb02 <pow+0x9e>
 b00:	fd ce       	rjmp	.-518    	; 0x8fc <__fp_inf>
 b02:	46 cf       	rjmp	.-372    	; 0x990 <__fp_zero>
 b04:	01 cf       	rjmp	.-510    	; 0x908 <__fp_nan>

00000b06 <exp>:
 b06:	2a df       	rcall	.-428    	; 0x95c <__fp_splitA>
 b08:	c8 f3       	brcs	.-14     	; 0xafc <pow+0x98>
 b0a:	96 38       	cpi	r25, 0x86	; 134
 b0c:	c0 f7       	brcc	.-16     	; 0xafe <pow+0x9a>
 b0e:	07 f8       	bld	r0, 7
 b10:	0f 92       	push	r0
 b12:	e8 94       	clt
 b14:	2b e3       	ldi	r18, 0x3B	; 59
 b16:	3a ea       	ldi	r19, 0xAA	; 170
 b18:	48 eb       	ldi	r20, 0xB8	; 184
 b1a:	5f e7       	ldi	r21, 0x7F	; 127
 b1c:	4e df       	rcall	.-356    	; 0x9ba <__mulsf3_pse>
 b1e:	0f 92       	push	r0
 b20:	0f 92       	push	r0
 b22:	0f 92       	push	r0
 b24:	4d b7       	in	r20, 0x3d	; 61
 b26:	5e b7       	in	r21, 0x3e	; 62
 b28:	0f 92       	push	r0
 b2a:	c0 d0       	rcall	.+384    	; 0xcac <modf>
 b2c:	e2 eb       	ldi	r30, 0xB2	; 178
 b2e:	f0 e0       	ldi	r31, 0x00	; 0
 b30:	16 d0       	rcall	.+44     	; 0xb5e <__fp_powser>
 b32:	4f 91       	pop	r20
 b34:	5f 91       	pop	r21
 b36:	ef 91       	pop	r30
 b38:	ff 91       	pop	r31
 b3a:	e5 95       	asr	r30
 b3c:	ee 1f       	adc	r30, r30
 b3e:	ff 1f       	adc	r31, r31
 b40:	49 f0       	breq	.+18     	; 0xb54 <exp+0x4e>
 b42:	fe 57       	subi	r31, 0x7E	; 126
 b44:	e0 68       	ori	r30, 0x80	; 128
 b46:	44 27       	eor	r20, r20
 b48:	ee 0f       	add	r30, r30
 b4a:	44 1f       	adc	r20, r20
 b4c:	fa 95       	dec	r31
 b4e:	e1 f7       	brne	.-8      	; 0xb48 <exp+0x42>
 b50:	41 95       	neg	r20
 b52:	55 0b       	sbc	r21, r21
 b54:	32 d0       	rcall	.+100    	; 0xbba <ldexp>
 b56:	0f 90       	pop	r0
 b58:	07 fe       	sbrs	r0, 7
 b5a:	26 c0       	rjmp	.+76     	; 0xba8 <inverse>
 b5c:	08 95       	ret

00000b5e <__fp_powser>:
 b5e:	df 93       	push	r29
 b60:	cf 93       	push	r28
 b62:	1f 93       	push	r17
 b64:	0f 93       	push	r16
 b66:	ff 92       	push	r15
 b68:	ef 92       	push	r14
 b6a:	df 92       	push	r13
 b6c:	7b 01       	movw	r14, r22
 b6e:	8c 01       	movw	r16, r24
 b70:	68 94       	set
 b72:	05 c0       	rjmp	.+10     	; 0xb7e <__fp_powser+0x20>
 b74:	da 2e       	mov	r13, r26
 b76:	ef 01       	movw	r28, r30
 b78:	1e df       	rcall	.-452    	; 0x9b6 <__mulsf3x>
 b7a:	fe 01       	movw	r30, r28
 b7c:	e8 94       	clt
 b7e:	a5 91       	lpm	r26, Z+
 b80:	25 91       	lpm	r18, Z+
 b82:	35 91       	lpm	r19, Z+
 b84:	45 91       	lpm	r20, Z+
 b86:	55 91       	lpm	r21, Z+
 b88:	ae f3       	brts	.-22     	; 0xb74 <__fp_powser+0x16>
 b8a:	ef 01       	movw	r28, r30
 b8c:	8e dd       	rcall	.-1252   	; 0x6aa <__addsf3x>
 b8e:	fe 01       	movw	r30, r28
 b90:	97 01       	movw	r18, r14
 b92:	a8 01       	movw	r20, r16
 b94:	da 94       	dec	r13
 b96:	79 f7       	brne	.-34     	; 0xb76 <__fp_powser+0x18>
 b98:	df 90       	pop	r13
 b9a:	ef 90       	pop	r14
 b9c:	ff 90       	pop	r15
 b9e:	0f 91       	pop	r16
 ba0:	1f 91       	pop	r17
 ba2:	cf 91       	pop	r28
 ba4:	df 91       	pop	r29
 ba6:	08 95       	ret

00000ba8 <inverse>:
 ba8:	9b 01       	movw	r18, r22
 baa:	ac 01       	movw	r20, r24
 bac:	60 e0       	ldi	r22, 0x00	; 0
 bae:	70 e0       	ldi	r23, 0x00	; 0
 bb0:	80 e8       	ldi	r24, 0x80	; 128
 bb2:	9f e3       	ldi	r25, 0x3F	; 63
 bb4:	cd cd       	rjmp	.-1126   	; 0x750 <__divsf3>
 bb6:	a2 ce       	rjmp	.-700    	; 0x8fc <__fp_inf>
 bb8:	ac c0       	rjmp	.+344    	; 0xd12 <__fp_mpack>

00000bba <ldexp>:
 bba:	d0 de       	rcall	.-608    	; 0x95c <__fp_splitA>
 bbc:	e8 f3       	brcs	.-6      	; 0xbb8 <inverse+0x10>
 bbe:	99 23       	and	r25, r25
 bc0:	d9 f3       	breq	.-10     	; 0xbb8 <inverse+0x10>
 bc2:	94 0f       	add	r25, r20
 bc4:	51 1d       	adc	r21, r1
 bc6:	bb f3       	brvs	.-18     	; 0xbb6 <inverse+0xe>
 bc8:	91 50       	subi	r25, 0x01	; 1
 bca:	50 40       	sbci	r21, 0x00	; 0
 bcc:	94 f0       	brlt	.+36     	; 0xbf2 <ldexp+0x38>
 bce:	59 f0       	breq	.+22     	; 0xbe6 <ldexp+0x2c>
 bd0:	88 23       	and	r24, r24
 bd2:	32 f0       	brmi	.+12     	; 0xbe0 <ldexp+0x26>
 bd4:	66 0f       	add	r22, r22
 bd6:	77 1f       	adc	r23, r23
 bd8:	88 1f       	adc	r24, r24
 bda:	91 50       	subi	r25, 0x01	; 1
 bdc:	50 40       	sbci	r21, 0x00	; 0
 bde:	c1 f7       	brne	.-16     	; 0xbd0 <ldexp+0x16>
 be0:	9e 3f       	cpi	r25, 0xFE	; 254
 be2:	51 05       	cpc	r21, r1
 be4:	44 f7       	brge	.-48     	; 0xbb6 <inverse+0xe>
 be6:	88 0f       	add	r24, r24
 be8:	91 1d       	adc	r25, r1
 bea:	96 95       	lsr	r25
 bec:	87 95       	ror	r24
 bee:	97 f9       	bld	r25, 7
 bf0:	08 95       	ret
 bf2:	5f 3f       	cpi	r21, 0xFF	; 255
 bf4:	ac f0       	brlt	.+42     	; 0xc20 <ldexp+0x66>
 bf6:	98 3e       	cpi	r25, 0xE8	; 232
 bf8:	9c f0       	brlt	.+38     	; 0xc20 <ldexp+0x66>
 bfa:	bb 27       	eor	r27, r27
 bfc:	86 95       	lsr	r24
 bfe:	77 95       	ror	r23
 c00:	67 95       	ror	r22
 c02:	b7 95       	ror	r27
 c04:	08 f4       	brcc	.+2      	; 0xc08 <ldexp+0x4e>
 c06:	b1 60       	ori	r27, 0x01	; 1
 c08:	93 95       	inc	r25
 c0a:	c1 f7       	brne	.-16     	; 0xbfc <ldexp+0x42>
 c0c:	bb 0f       	add	r27, r27
 c0e:	58 f7       	brcc	.-42     	; 0xbe6 <ldexp+0x2c>
 c10:	11 f4       	brne	.+4      	; 0xc16 <ldexp+0x5c>
 c12:	60 ff       	sbrs	r22, 0
 c14:	e8 cf       	rjmp	.-48     	; 0xbe6 <ldexp+0x2c>
 c16:	6f 5f       	subi	r22, 0xFF	; 255
 c18:	7f 4f       	sbci	r23, 0xFF	; 255
 c1a:	8f 4f       	sbci	r24, 0xFF	; 255
 c1c:	9f 4f       	sbci	r25, 0xFF	; 255
 c1e:	e3 cf       	rjmp	.-58     	; 0xbe6 <ldexp+0x2c>
 c20:	b8 ce       	rjmp	.-656    	; 0x992 <__fp_szero>
 c22:	0e f0       	brts	.+2      	; 0xc26 <ldexp+0x6c>
 c24:	76 c0       	rjmp	.+236    	; 0xd12 <__fp_mpack>
 c26:	70 ce       	rjmp	.-800    	; 0x908 <__fp_nan>
 c28:	68 94       	set
 c2a:	68 ce       	rjmp	.-816    	; 0x8fc <__fp_inf>

00000c2c <log>:
 c2c:	97 de       	rcall	.-722    	; 0x95c <__fp_splitA>
 c2e:	c8 f3       	brcs	.-14     	; 0xc22 <ldexp+0x68>
 c30:	99 23       	and	r25, r25
 c32:	d1 f3       	breq	.-12     	; 0xc28 <ldexp+0x6e>
 c34:	c6 f3       	brts	.-16     	; 0xc26 <ldexp+0x6c>
 c36:	df 93       	push	r29
 c38:	cf 93       	push	r28
 c3a:	1f 93       	push	r17
 c3c:	0f 93       	push	r16
 c3e:	ff 92       	push	r15
 c40:	c9 2f       	mov	r28, r25
 c42:	dd 27       	eor	r29, r29
 c44:	88 23       	and	r24, r24
 c46:	2a f0       	brmi	.+10     	; 0xc52 <log+0x26>
 c48:	21 97       	sbiw	r28, 0x01	; 1
 c4a:	66 0f       	add	r22, r22
 c4c:	77 1f       	adc	r23, r23
 c4e:	88 1f       	adc	r24, r24
 c50:	da f7       	brpl	.-10     	; 0xc48 <log+0x1c>
 c52:	20 e0       	ldi	r18, 0x00	; 0
 c54:	30 e0       	ldi	r19, 0x00	; 0
 c56:	40 e8       	ldi	r20, 0x80	; 128
 c58:	5f eb       	ldi	r21, 0xBF	; 191
 c5a:	9f e3       	ldi	r25, 0x3F	; 63
 c5c:	88 39       	cpi	r24, 0x98	; 152
 c5e:	20 f0       	brcs	.+8      	; 0xc68 <log+0x3c>
 c60:	80 3e       	cpi	r24, 0xE0	; 224
 c62:	30 f0       	brcs	.+12     	; 0xc70 <log+0x44>
 c64:	21 96       	adiw	r28, 0x01	; 1
 c66:	8f 77       	andi	r24, 0x7F	; 127
 c68:	0f dd       	rcall	.-1506   	; 0x688 <__addsf3>
 c6a:	ea ed       	ldi	r30, 0xDA	; 218
 c6c:	f0 e0       	ldi	r31, 0x00	; 0
 c6e:	03 c0       	rjmp	.+6      	; 0xc76 <log+0x4a>
 c70:	0b dd       	rcall	.-1514   	; 0x688 <__addsf3>
 c72:	e7 e0       	ldi	r30, 0x07	; 7
 c74:	f1 e0       	ldi	r31, 0x01	; 1
 c76:	73 df       	rcall	.-282    	; 0xb5e <__fp_powser>
 c78:	8b 01       	movw	r16, r22
 c7a:	be 01       	movw	r22, r28
 c7c:	ec 01       	movw	r28, r24
 c7e:	fb 2e       	mov	r15, r27
 c80:	6f 57       	subi	r22, 0x7F	; 127
 c82:	71 09       	sbc	r23, r1
 c84:	75 95       	asr	r23
 c86:	77 1f       	adc	r23, r23
 c88:	88 0b       	sbc	r24, r24
 c8a:	99 0b       	sbc	r25, r25
 c8c:	fc dd       	rcall	.-1032   	; 0x886 <__floatsisf>
 c8e:	28 e1       	ldi	r18, 0x18	; 24
 c90:	32 e7       	ldi	r19, 0x72	; 114
 c92:	41 e3       	ldi	r20, 0x31	; 49
 c94:	5f e3       	ldi	r21, 0x3F	; 63
 c96:	8f de       	rcall	.-738    	; 0x9b6 <__mulsf3x>
 c98:	af 2d       	mov	r26, r15
 c9a:	98 01       	movw	r18, r16
 c9c:	ae 01       	movw	r20, r28
 c9e:	ff 90       	pop	r15
 ca0:	0f 91       	pop	r16
 ca2:	1f 91       	pop	r17
 ca4:	cf 91       	pop	r28
 ca6:	df 91       	pop	r29
 ca8:	00 dd       	rcall	.-1536   	; 0x6aa <__addsf3x>
 caa:	3f ce       	rjmp	.-898    	; 0x92a <__fp_round>

00000cac <modf>:
 cac:	fa 01       	movw	r30, r20
 cae:	dc 01       	movw	r26, r24
 cb0:	aa 0f       	add	r26, r26
 cb2:	bb 1f       	adc	r27, r27
 cb4:	9b 01       	movw	r18, r22
 cb6:	ac 01       	movw	r20, r24
 cb8:	bf 57       	subi	r27, 0x7F	; 127
 cba:	28 f4       	brcc	.+10     	; 0xcc6 <modf+0x1a>
 cbc:	22 27       	eor	r18, r18
 cbe:	33 27       	eor	r19, r19
 cc0:	44 27       	eor	r20, r20
 cc2:	50 78       	andi	r21, 0x80	; 128
 cc4:	1f c0       	rjmp	.+62     	; 0xd04 <modf+0x58>
 cc6:	b7 51       	subi	r27, 0x17	; 23
 cc8:	88 f4       	brcc	.+34     	; 0xcec <modf+0x40>
 cca:	ab 2f       	mov	r26, r27
 ccc:	00 24       	eor	r0, r0
 cce:	46 95       	lsr	r20
 cd0:	37 95       	ror	r19
 cd2:	27 95       	ror	r18
 cd4:	01 1c       	adc	r0, r1
 cd6:	a3 95       	inc	r26
 cd8:	d2 f3       	brmi	.-12     	; 0xcce <modf+0x22>
 cda:	00 20       	and	r0, r0
 cdc:	69 f0       	breq	.+26     	; 0xcf8 <modf+0x4c>
 cde:	22 0f       	add	r18, r18
 ce0:	33 1f       	adc	r19, r19
 ce2:	44 1f       	adc	r20, r20
 ce4:	b3 95       	inc	r27
 ce6:	da f3       	brmi	.-10     	; 0xcde <modf+0x32>
 ce8:	0d d0       	rcall	.+26     	; 0xd04 <modf+0x58>
 cea:	cd cc       	rjmp	.-1638   	; 0x686 <__subsf3>
 cec:	61 30       	cpi	r22, 0x01	; 1
 cee:	71 05       	cpc	r23, r1
 cf0:	a0 e8       	ldi	r26, 0x80	; 128
 cf2:	8a 07       	cpc	r24, r26
 cf4:	b9 46       	sbci	r27, 0x69	; 105
 cf6:	30 f4       	brcc	.+12     	; 0xd04 <modf+0x58>
 cf8:	9b 01       	movw	r18, r22
 cfa:	ac 01       	movw	r20, r24
 cfc:	66 27       	eor	r22, r22
 cfe:	77 27       	eor	r23, r23
 d00:	88 27       	eor	r24, r24
 d02:	90 78       	andi	r25, 0x80	; 128
 d04:	30 96       	adiw	r30, 0x00	; 0
 d06:	21 f0       	breq	.+8      	; 0xd10 <modf+0x64>
 d08:	20 83       	st	Z, r18
 d0a:	31 83       	std	Z+1, r19	; 0x01
 d0c:	42 83       	std	Z+2, r20	; 0x02
 d0e:	53 83       	std	Z+3, r21	; 0x03
 d10:	08 95       	ret

00000d12 <__fp_mpack>:
 d12:	9f 3f       	cpi	r25, 0xFF	; 255
 d14:	31 f0       	breq	.+12     	; 0xd22 <__fp_mpack_finite+0xc>

00000d16 <__fp_mpack_finite>:
 d16:	91 50       	subi	r25, 0x01	; 1
 d18:	20 f4       	brcc	.+8      	; 0xd22 <__fp_mpack_finite+0xc>
 d1a:	87 95       	ror	r24
 d1c:	77 95       	ror	r23
 d1e:	67 95       	ror	r22
 d20:	b7 95       	ror	r27
 d22:	88 0f       	add	r24, r24
 d24:	91 1d       	adc	r25, r1
 d26:	96 95       	lsr	r25
 d28:	87 95       	ror	r24
 d2a:	97 f9       	bld	r25, 7
 d2c:	08 95       	ret

00000d2e <__tablejump2__>:
 d2e:	ee 0f       	add	r30, r30
 d30:	ff 1f       	adc	r31, r31
 d32:	00 24       	eor	r0, r0
 d34:	00 1c       	adc	r0, r0
 d36:	0b be       	out	0x3b, r0	; 59
 d38:	07 90       	elpm	r0, Z+
 d3a:	f6 91       	elpm	r31, Z
 d3c:	e0 2d       	mov	r30, r0
 d3e:	09 94       	ijmp

00000d40 <_exit>:
 d40:	f8 94       	cli

00000d42 <__stop_program>:
 d42:	ff cf       	rjmp	.-2      	; 0xd42 <__stop_program>
