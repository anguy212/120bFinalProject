
practicelab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000d70  00000e04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  00000e08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f61  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000976  00000000  00000000  00001e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000818  00000000  00000000  000027ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00003018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000583  00000000  00000000  000031a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008de  00000000  00000000  00003723  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004001  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
   6:	00 00       	nop
   8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
   a:	00 00       	nop
   c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
   e:	00 00       	nop
  10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
  12:	00 00       	nop
  14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
  16:	00 00       	nop
  18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
  1e:	00 00       	nop
  20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
  22:	00 00       	nop
  24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
  26:	00 00       	nop
  28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a0 c0       	rjmp	.+320    	; 0x16e <__bad_interrupt>
  2e:	00 00       	nop
  30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
  32:	00 00       	nop
  34:	d2 c0       	rjmp	.+420    	; 0x1da <__vector_13>
  36:	00 00       	nop
  38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
  3e:	00 00       	nop
  40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
  42:	00 00       	nop
  44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
  46:	00 00       	nop
  48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
  4e:	00 00       	nop
  50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
  52:	00 00       	nop
  54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
  56:	00 00       	nop
  58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	88 c0       	rjmp	.+272    	; 0x16e <__bad_interrupt>
  5e:	00 00       	nop
  60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
  62:	00 00       	nop
  64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
  66:	00 00       	nop
  68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
  6e:	00 00       	nop
  70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
  72:	00 00       	nop
  74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
  76:	00 00       	nop
  78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
  7e:	00 00       	nop
  80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
  82:	00 00       	nop
  84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
  86:	00 00       	nop
  88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b7 01       	movw	r22, r14
  8e:	b9 01       	movw	r22, r18
  90:	bb 01       	movw	r22, r22
  92:	bd 01       	movw	r22, r26
  94:	bf 01       	movw	r22, r30
  96:	c1 01       	movw	r24, r2
  98:	c3 01       	movw	r24, r6
  9a:	c5 01       	movw	r24, r10
  9c:	c7 01       	movw	r24, r14
  9e:	e7 01       	movw	r28, r14
  a0:	d3 01       	movw	r26, r6
  a2:	d5 01       	movw	r26, r10
  a4:	d7 01       	movw	r26, r14
  a6:	d9 01       	movw	r26, r18
  a8:	db 01       	movw	r26, r22
  aa:	dd 01       	movw	r26, r26
  ac:	df 01       	movw	r26, r30
  ae:	e1 01       	movw	r28, r2
  b0:	e3 01       	movw	r28, r6
  b2:	07 63       	ori	r16, 0x37	; 55
  b4:	42 36       	cpi	r20, 0x62	; 98
  b6:	b7 9b       	sbis	0x16, 7	; 22
  b8:	d8 a7       	std	Y+40, r29	; 0x28
  ba:	1a 39       	cpi	r17, 0x9A	; 154
  bc:	68 56       	subi	r22, 0x68	; 104
  be:	18 ae       	std	Y+56, r1	; 0x38
  c0:	ba ab       	std	Y+50, r27	; 0x32
  c2:	55 8c       	ldd	r5, Z+29	; 0x1d
  c4:	1d 3c       	cpi	r17, 0xCD	; 205
  c6:	b7 cc       	rjmp	.-1682   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
  c8:	57 63       	ori	r21, 0x37	; 55
  ca:	bd 6d       	ori	r27, 0xDD	; 221
  cc:	ed fd       	.word	0xfded	; ????
  ce:	75 3e       	cpi	r23, 0xE5	; 229
  d0:	f6 17       	cp	r31, r22
  d2:	72 31       	cpi	r23, 0x12	; 18
  d4:	bf 00       	.word	0x00bf	; ????
  d6:	00 00       	nop
  d8:	80 3f       	cpi	r24, 0xF0	; 240
  da:	08 00       	.word	0x0008	; ????
  dc:	00 00       	nop
  de:	be 92       	st	-X, r11
  e0:	24 49       	sbci	r18, 0x94	; 148
  e2:	12 3e       	cpi	r17, 0xE2	; 226
  e4:	ab aa       	std	Y+51, r10	; 0x33
  e6:	aa 2a       	or	r10, r26
  e8:	be cd       	rjmp	.-1156   	; 0xfffffc66 <__eeprom_end+0xff7efc66>
  ea:	cc cc       	rjmp	.-1640   	; 0xfffffa84 <__eeprom_end+0xff7efa84>
  ec:	4c 3e       	cpi	r20, 0xEC	; 236
  ee:	00 00       	nop
  f0:	00 80       	ld	r0, Z
  f2:	be ab       	std	Y+54, r27	; 0x36
  f4:	aa aa       	std	Y+50, r10	; 0x32
  f6:	aa 3e       	cpi	r26, 0xEA	; 234
  f8:	00 00       	nop
  fa:	00 00       	nop
  fc:	bf 00       	.word	0x00bf	; ????
  fe:	00 00       	nop
 100:	80 3f       	cpi	r24, 0xF0	; 240
 102:	00 00       	nop
 104:	00 00       	nop
 106:	00 08       	sbc	r0, r0
 108:	41 78       	andi	r20, 0x81	; 129
 10a:	d3 bb       	out	0x13, r29	; 19
 10c:	43 87       	std	Z+11, r20	; 0x0b
 10e:	d1 13       	cpse	r29, r17
 110:	3d 19       	sub	r19, r13
 112:	0e 3c       	cpi	r16, 0xCE	; 206
 114:	c3 bd       	out	0x23, r28	; 35
 116:	42 82       	std	Z+2, r4	; 0x02
 118:	ad 2b       	or	r26, r29
 11a:	3e 68       	ori	r19, 0x8E	; 142
 11c:	ec 82       	std	Y+4, r14	; 0x04
 11e:	76 be       	out	0x36, r7	; 54
 120:	d9 8f       	std	Y+25, r29	; 0x19
 122:	e1 a9       	ldd	r30, Z+49	; 0x31
 124:	3e 4c       	sbci	r19, 0xCE	; 206
 126:	80 ef       	ldi	r24, 0xF0	; 240
 128:	ff be       	out	0x3f, r15	; 63
 12a:	01 c4       	rjmp	.+2050   	; 0x92e <__fp_inf+0x6>
 12c:	ff 7f       	andi	r31, 0xFF	; 255
 12e:	3f 00       	.word	0x003f	; ????
 130:	00 00       	nop
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d0 e4       	ldi	r29, 0x40	; 64
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61

00000140 <__do_copy_data>:
 140:	11 e0       	ldi	r17, 0x01	; 1
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	b1 e0       	ldi	r27, 0x01	; 1
 146:	e0 e7       	ldi	r30, 0x70	; 112
 148:	fd e0       	ldi	r31, 0x0D	; 13
 14a:	00 e0       	ldi	r16, 0x00	; 0
 14c:	0b bf       	out	0x3b, r16	; 59
 14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x14>
 150:	07 90       	elpm	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	a4 30       	cpi	r26, 0x04	; 4
 156:	b1 07       	cpc	r27, r17
 158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0x10>

0000015a <__do_clear_bss>:
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	a4 e0       	ldi	r26, 0x04	; 4
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
 162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
 164:	a9 30       	cpi	r26, 0x09	; 9
 166:	b2 07       	cpc	r27, r18
 168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
 16a:	41 d1       	rcall	.+642    	; 0x3ee <main>
 16c:	ff c5       	rjmp	.+3070   	; 0xd6c <_exit>

0000016e <__bad_interrupt>:
 16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <TimerSet>:
    unsigned char c = column;
    while(*string) {
        LCD_Cursor(c++);
        LCD_WriteData(*string++);
    }
}
 170:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 174:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 178:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 17c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 180:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 184:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 188:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 18c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 190:	08 95       	ret

00000192 <TimerOn>:
 192:	8b e0       	ldi	r24, 0x0B	; 11
 194:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 198:	8d e7       	ldi	r24, 0x7D	; 125
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1aa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1ae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ba:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1be:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1c6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1ca:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1ce:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 1d2:	8f b7       	in	r24, 0x3f	; 63
 1d4:	80 68       	ori	r24, 0x80	; 128
 1d6:	8f bf       	out	0x3f, r24	; 63
 1d8:	08 95       	ret

000001da <__vector_13>:
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1f0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1f4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 1f8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	a1 09       	sbc	r26, r1
 200:	b1 09       	sbc	r27, r1
 202:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 206:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 20a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 20e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 212:	89 2b       	or	r24, r25
 214:	8a 2b       	or	r24, r26
 216:	8b 2b       	or	r24, r27
 218:	99 f4       	brne	.+38     	; 0x240 <__vector_13+0x66>
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
 220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 224:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 228:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 22c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 230:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 234:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 238:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 23c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <delay_ms>:
 252:	18 16       	cp	r1, r24
 254:	19 06       	cpc	r1, r25
 256:	5c f0       	brlt	.+22     	; 0x26e <delay_ms+0x1c>
 258:	08 95       	ret
 25a:	00 00       	nop
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	31 09       	sbc	r19, r1
 260:	e1 f7       	brne	.-8      	; 0x25a <delay_ms+0x8>
 262:	4f 5f       	subi	r20, 0xFF	; 255
 264:	5f 4f       	sbci	r21, 0xFF	; 255
 266:	84 17       	cp	r24, r20
 268:	95 07       	cpc	r25, r21
 26a:	19 f4       	brne	.+6      	; 0x272 <delay_ms+0x20>
 26c:	08 95       	ret
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	27 e0       	ldi	r18, 0x07	; 7
 274:	33 e0       	ldi	r19, 0x03	; 3
 276:	f1 cf       	rjmp	.-30     	; 0x25a <delay_ms+0x8>

00000278 <LCD_WriteCommand>:
 278:	10 98       	cbi	0x02, 0	; 2
 27a:	8b b9       	out	0x0b, r24	; 11
 27c:	11 9a       	sbi	0x02, 1	; 2
 27e:	00 00       	nop
 280:	11 98       	cbi	0x02, 1	; 2
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	e5 cf       	rjmp	.-54     	; 0x252 <delay_ms>
 288:	08 95       	ret

0000028a <LCD_ClearScreen>:
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	f5 cf       	rjmp	.-22     	; 0x278 <LCD_WriteCommand>
 28e:	08 95       	ret

00000290 <LCD_init>:
 290:	84 e6       	ldi	r24, 0x64	; 100
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	de df       	rcall	.-68     	; 0x252 <delay_ms>
 296:	88 e3       	ldi	r24, 0x38	; 56
 298:	ef df       	rcall	.-34     	; 0x278 <LCD_WriteCommand>
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	ed df       	rcall	.-38     	; 0x278 <LCD_WriteCommand>
 29e:	8f e0       	ldi	r24, 0x0F	; 15
 2a0:	eb df       	rcall	.-42     	; 0x278 <LCD_WriteCommand>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	e9 df       	rcall	.-46     	; 0x278 <LCD_WriteCommand>
 2a6:	8a e0       	ldi	r24, 0x0A	; 10
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	d3 cf       	rjmp	.-90     	; 0x252 <delay_ms>
 2ac:	08 95       	ret

000002ae <LCD_WriteData>:
 2ae:	10 9a       	sbi	0x02, 0	; 2
 2b0:	8b b9       	out	0x0b, r24	; 11
 2b2:	11 9a       	sbi	0x02, 1	; 2
 2b4:	00 00       	nop
 2b6:	11 98       	cbi	0x02, 1	; 2
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	ca cf       	rjmp	.-108    	; 0x252 <delay_ms>
 2be:	08 95       	ret

000002c0 <GetKeypadKey>:
//--------End find GCD function ----------------------------------------------

// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
 2c0:	8f ee       	ldi	r24, 0xEF	; 239
 2c2:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
 2c4:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('1'); }
 2c6:	30 9b       	sbis	0x06, 0	; 6
 2c8:	29 c0       	rjmp	.+82     	; 0x31c <GetKeypadKey+0x5c>
    if (GetBit(PINC,1)==0) { return('4'); }
 2ca:	31 9b       	sbis	0x06, 1	; 6
 2cc:	29 c0       	rjmp	.+82     	; 0x320 <GetKeypadKey+0x60>
    if (GetBit(PINC,2)==0) { return('7'); }
 2ce:	32 9b       	sbis	0x06, 2	; 6
 2d0:	29 c0       	rjmp	.+82     	; 0x324 <GetKeypadKey+0x64>
    if (GetBit(PINC,3)==0) { return('*'); }
 2d2:	33 9b       	sbis	0x06, 3	; 6
 2d4:	29 c0       	rjmp	.+82     	; 0x328 <GetKeypadKey+0x68>
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
 2d6:	8f ed       	ldi	r24, 0xDF	; 223
 2d8:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
 2da:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('2'); }
 2dc:	30 9b       	sbis	0x06, 0	; 6
 2de:	26 c0       	rjmp	.+76     	; 0x32c <GetKeypadKey+0x6c>
    if (GetBit(PINC,1)==0) { return('5'); }
 2e0:	31 9b       	sbis	0x06, 1	; 6
 2e2:	26 c0       	rjmp	.+76     	; 0x330 <GetKeypadKey+0x70>
    if (GetBit(PINC,2)==0) { return('8'); }
 2e4:	32 9b       	sbis	0x06, 2	; 6
 2e6:	26 c0       	rjmp	.+76     	; 0x334 <GetKeypadKey+0x74>
    if (GetBit(PINC,3)==0) { return('0'); }
 2e8:	33 9b       	sbis	0x06, 3	; 6
 2ea:	26 c0       	rjmp	.+76     	; 0x338 <GetKeypadKey+0x78>
    // ... *****FINISH*****
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
 2ec:	8f eb       	ldi	r24, 0xBF	; 191
 2ee:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
 2f0:	00 00       	nop
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
 2f2:	30 9b       	sbis	0x06, 0	; 6
 2f4:	23 c0       	rjmp	.+70     	; 0x33c <GetKeypadKey+0x7c>
    if (GetBit(PINC,1)==0) { return('6'); }
 2f6:	31 9b       	sbis	0x06, 1	; 6
 2f8:	23 c0       	rjmp	.+70     	; 0x340 <GetKeypadKey+0x80>
    if (GetBit(PINC,2)==0) { return('9'); }
 2fa:	32 9b       	sbis	0x06, 2	; 6
 2fc:	23 c0       	rjmp	.+70     	; 0x344 <GetKeypadKey+0x84>
    if (GetBit(PINC,3)==0) { return('#'); }
 2fe:	33 9b       	sbis	0x06, 3	; 6
 300:	23 c0       	rjmp	.+70     	; 0x348 <GetKeypadKey+0x88>
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
 302:	8f e7       	ldi	r24, 0x7F	; 127
 304:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
 306:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('A'); }
 308:	30 9b       	sbis	0x06, 0	; 6
 30a:	20 c0       	rjmp	.+64     	; 0x34c <GetKeypadKey+0x8c>
    if (GetBit(PINC,1)==0) { return('B'); }
 30c:	31 9b       	sbis	0x06, 1	; 6
 30e:	20 c0       	rjmp	.+64     	; 0x350 <GetKeypadKey+0x90>
    if (GetBit(PINC,2)==0) { return('C'); }
 310:	32 9b       	sbis	0x06, 2	; 6
 312:	20 c0       	rjmp	.+64     	; 0x354 <GetKeypadKey+0x94>
    if (GetBit(PINC,3)==0) { return('D'); }
 314:	33 9b       	sbis	0x06, 3	; 6
 316:	20 c0       	rjmp	.+64     	; 0x358 <GetKeypadKey+0x98>
    
    return('\0'); // default value
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	08 95       	ret
// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('1'); }
 31c:	81 e3       	ldi	r24, 0x31	; 49
 31e:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('4'); }
 320:	84 e3       	ldi	r24, 0x34	; 52
 322:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('7'); }
 324:	87 e3       	ldi	r24, 0x37	; 55
 326:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('*'); }
 328:	8a e2       	ldi	r24, 0x2A	; 42
 32a:	08 95       	ret
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('2'); }
 32c:	82 e3       	ldi	r24, 0x32	; 50
 32e:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('5'); }
 330:	85 e3       	ldi	r24, 0x35	; 53
 332:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('8'); }
 334:	88 e3       	ldi	r24, 0x38	; 56
 336:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('0'); }
 338:	80 e3       	ldi	r24, 0x30	; 48
 33a:	08 95       	ret
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
 33c:	83 e3       	ldi	r24, 0x33	; 51
 33e:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('6'); }
 340:	86 e3       	ldi	r24, 0x36	; 54
 342:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('9'); }
 344:	89 e3       	ldi	r24, 0x39	; 57
 346:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('#'); }
 348:	83 e2       	ldi	r24, 0x23	; 35
 34a:	08 95       	ret
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('A'); }
 34c:	81 e4       	ldi	r24, 0x41	; 65
 34e:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('B'); }
 350:	82 e4       	ldi	r24, 0x42	; 66
 352:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('C'); }
 354:	83 e4       	ldi	r24, 0x43	; 67
 356:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('D'); }
 358:	84 e4       	ldi	r24, 0x44	; 68
    
    return('\0'); // default value
    
}
 35a:	08 95       	ret

0000035c <changetoInteger>:
unsigned char changetoInteger(unsigned char var)
{
	switch(var)
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	fc 01       	movw	r30, r24
 360:	f1 97       	sbiw	r30, 0x31	; 49
 362:	e9 30       	cpi	r30, 0x09	; 9
 364:	f1 05       	cpc	r31, r1
 366:	a8 f4       	brcc	.+42     	; 0x392 <changetoInteger+0x36>
 368:	ea 5b       	subi	r30, 0xBA	; 186
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	f6 c4       	rjmp	.+2540   	; 0xd5a <__tablejump2__>
	{
		case '0': return 0;
		case '1': return 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	08 95       	ret
		case '2': return 2;
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	08 95       	ret
		case '3': return 3;
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	08 95       	ret
		case '4': return 4;
 37a:	84 e0       	ldi	r24, 0x04	; 4
 37c:	08 95       	ret
		case '5': return 5;
 37e:	85 e0       	ldi	r24, 0x05	; 5
 380:	08 95       	ret
		case '6': return 6;
 382:	86 e0       	ldi	r24, 0x06	; 6
 384:	08 95       	ret
		case '7': return 7;
 386:	87 e0       	ldi	r24, 0x07	; 7
 388:	08 95       	ret
		case '8': return 8;
 38a:	88 e0       	ldi	r24, 0x08	; 8
 38c:	08 95       	ret
		case '9': return 9;
 38e:	89 e0       	ldi	r24, 0x09	; 9
 390:	08 95       	ret
}
unsigned char changetoInteger(unsigned char var)
{
	switch(var)
	{
		case '0': return 0;
 392:	80 e0       	ldi	r24, 0x00	; 0
		case '7': return 7;
		case '8': return 8;
		case '9': return 9;
		default: return 0;
	}
}
 394:	08 95       	ret

00000396 <changetoChar>:
char changetoChar(unsigned char num)
{
	switch(num)
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	8a 30       	cpi	r24, 0x0A	; 10
 39a:	91 05       	cpc	r25, r1
 39c:	b0 f4       	brcc	.+44     	; 0x3ca <changetoChar+0x34>
 39e:	fc 01       	movw	r30, r24
 3a0:	e1 5b       	subi	r30, 0xB1	; 177
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	da c4       	rjmp	.+2484   	; 0xd5a <__tablejump2__>
	{
		case 0: return '0';
		case 1: return '1';
 3a6:	81 e3       	ldi	r24, 0x31	; 49
 3a8:	08 95       	ret
		case 2: return '2';
 3aa:	82 e3       	ldi	r24, 0x32	; 50
 3ac:	08 95       	ret
		case 3: return '3';
 3ae:	83 e3       	ldi	r24, 0x33	; 51
 3b0:	08 95       	ret
		case 4: return '4';
 3b2:	84 e3       	ldi	r24, 0x34	; 52
 3b4:	08 95       	ret
		case 5: return '5';
 3b6:	85 e3       	ldi	r24, 0x35	; 53
 3b8:	08 95       	ret
		case 6: return '6';
 3ba:	86 e3       	ldi	r24, 0x36	; 54
 3bc:	08 95       	ret
		case 7: return '7';
 3be:	87 e3       	ldi	r24, 0x37	; 55
 3c0:	08 95       	ret
		case 8: return '8';
 3c2:	88 e3       	ldi	r24, 0x38	; 56
 3c4:	08 95       	ret
		case 9: return '9';
 3c6:	89 e3       	ldi	r24, 0x39	; 57
 3c8:	08 95       	ret
		default: return '\0';
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret
}
char changetoChar(unsigned char num)
{
	switch(num)
	{
		case 0: return '0';
 3ce:	80 e3       	ldi	r24, 0x30	; 48
		case 8: return '8';
		case 9: return '9';
		default: return '\0';

	}
}
 3d0:	08 95       	ret

000003d2 <findHowManyB4Dec>:
unsigned char findHowManyB4Dec(unsigned char num)
{
	if(num >= 100)
 3d2:	84 36       	cpi	r24, 0x64	; 100
 3d4:	38 f4       	brcc	.+14     	; 0x3e4 <findHowManyB4Dec+0x12>
	{
		return 3;
	}
	else if(num >= 10)
 3d6:	8a 30       	cpi	r24, 0x0A	; 10
 3d8:	38 f4       	brcc	.+14     	; 0x3e8 <findHowManyB4Dec+0x16>
}
unsigned char findHowManyB4Dec(unsigned char num)
{
	if(num >= 100)
	{
		return 3;
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	81 11       	cpse	r24, r1
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <findHowManyB4Dec+0x18>
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	03 c0       	rjmp	.+6      	; 0x3ea <findHowManyB4Dec+0x18>
 3e4:	93 e0       	ldi	r25, 0x03	; 3
 3e6:	01 c0       	rjmp	.+2      	; 0x3ea <findHowManyB4Dec+0x18>
	}
	else if(num >= 10)
	{
		return 2;
 3e8:	92 e0       	ldi	r25, 0x02	; 2
	else
	{
		return 0;
	}
	
}
 3ea:	89 2f       	mov	r24, r25
 3ec:	08 95       	ret

000003ee <main>:
    int (*TickFct)(int); //Task tick function
} task;

// Implement scheduler code from PES.
int main()
{
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	2b 97       	sbiw	r28, 0x0b	; 11
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
    // Set Data Direction Registers
    // Buttons PORTA[0-7], set AVR PORTA to pull down logic
    DDRA = 0xFF; PORTA = 0x00;
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	81 b9       	out	0x01, r24	; 1
 406:	12 b8       	out	0x02, r1	; 2
    DDRD = 0xFF; PORTD = 0x00;
 408:	8a b9       	out	0x0a, r24	; 10
 40a:	1b b8       	out	0x0b, r1	; 11
    DDRC = 0xF0; PORTC = 0x0F;
 40c:	80 ef       	ldi	r24, 0xF0	; 240
 40e:	87 b9       	out	0x07, r24	; 7
 410:	8f e0       	ldi	r24, 0x0F	; 15
 412:	88 b9       	out	0x08, r24	; 8
	unsigned char key; 
	unsigned char number[7] = {0, 0, 0, 0 , 0 , 0 , 0};
 414:	fe 01       	movw	r30, r28
 416:	31 96       	adiw	r30, 0x01	; 1
 418:	87 e0       	ldi	r24, 0x07	; 7
 41a:	df 01       	movw	r26, r30
 41c:	1d 92       	st	X+, r1
 41e:	8a 95       	dec	r24
 420:	e9 f7       	brne	.-6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	unsigned char count = 0;
	unsigned char place = 0;
	LCD_init();
 422:	36 df       	rcall	.-404    	; 0x290 <LCD_init>
	LCD_ClearScreen();	
 424:	32 df       	rcall	.-412    	; 0x28a <LCD_ClearScreen>
 426:	68 ec       	ldi	r22, 0xC8	; 200
	    
	TimerSet(200);
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	a0 de       	rcall	.-704    	; 0x170 <TimerSet>
	TimerOn();
 430:	b0 de       	rcall	.-672    	; 0x192 <TimerOn>
    DDRD = 0xFF; PORTD = 0x00;
    DDRC = 0xF0; PORTC = 0x0F;
	unsigned char key; 
	unsigned char number[7] = {0, 0, 0, 0 , 0 , 0 , 0};
	unsigned char count = 0;
	unsigned char place = 0;
 432:	31 2c       	mov	r3, r1
    DDRA = 0xFF; PORTA = 0x00;
    DDRD = 0xFF; PORTD = 0x00;
    DDRC = 0xF0; PORTC = 0x0F;
	unsigned char key; 
	unsigned char number[7] = {0, 0, 0, 0 , 0 , 0 , 0};
	unsigned char count = 0;
 434:	21 2c       	mov	r2, r1
	
    while(1) {
		//unsigned char num = 9;
		//LCD_WriteData(9*pow(10, 1) + 7);
        // Scheduler code
       key = GetKeypadKey();
 436:	44 df       	rcall	.-376    	; 0x2c0 <GetKeypadKey>
 438:	18 2f       	mov	r17, r24
 43a:	88 23       	and	r24, r24
		if(key !=  '\0' && key != '#')
 43c:	09 f4       	brne	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	25 c1       	rjmp	.+586    	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 440:	83 32       	cpi	r24, 0x23	; 35
 442:	09 f4       	brne	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 444:	29 c1       	rjmp	.+594    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
		{
			LCD_WriteData(key);
 446:	33 df       	rcall	.-410    	; 0x2ae <LCD_WriteData>
 448:	1a 32       	cpi	r17, 0x2A	; 42
			if (key == '*')
 44a:	09 f4       	brne	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44c:	32 2c       	mov	r3, r2
			{
				place = count;
 44e:	e1 e0       	ldi	r30, 0x01	; 1
			}
			number[count] = key;
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	ec 0f       	add	r30, r28
 454:	fd 1f       	adc	r31, r29
 456:	e2 0d       	add	r30, r2
 458:	f1 1d       	adc	r31, r1
 45a:	10 83       	st	Z, r17
			count++;
 45c:	23 94       	inc	r2
 45e:	15 c1       	rjmp	.+554    	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
		{
			//LCD_ClearScreen();
			for(int i = 0; i < place; i++)
			{
				//LCD_WriteData(number[i]);
				holder = changetoInteger(number[i]);
 460:	f7 01       	movw	r30, r14
 462:	81 91       	ld	r24, Z+
 464:	7f 01       	movw	r14, r30
 466:	7a df       	rcall	.-268    	; 0x35c <changetoInteger>
 468:	78 2e       	mov	r7, r24
				num1 = holder*pow(10, holder2) + num1;
 46a:	60 2f       	mov	r22, r16
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	1d d2       	rcall	.+1082   	; 0x8ae <__floatunsisf>
 474:	9b 01       	movw	r18, r22
 476:	ac 01       	movw	r20, r24
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	80 e2       	ldi	r24, 0x20	; 32
 47e:	91 e4       	ldi	r25, 0x41	; 65
 480:	07 d3       	rcall	.+1550   	; 0xa90 <pow>
 482:	4b 01       	movw	r8, r22
 484:	5c 01       	movw	r10, r24
 486:	67 2d       	mov	r22, r7
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	11 d2       	rcall	.+1058   	; 0x8b2 <__floatsisf>
 490:	a5 01       	movw	r20, r10
 492:	94 01       	movw	r18, r8
 494:	9a d2       	rcall	.+1332   	; 0x9ca <__mulsf3>
 496:	4b 01       	movw	r8, r22
 498:	5c 01       	movw	r10, r24
 49a:	61 2f       	mov	r22, r17
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	07 d2       	rcall	.+1038   	; 0x8b2 <__floatsisf>
 4a4:	9b 01       	movw	r18, r22
 4a6:	ac 01       	movw	r20, r24
 4a8:	c5 01       	movw	r24, r10
 4aa:	b4 01       	movw	r22, r8
 4ac:	03 d1       	rcall	.+518    	; 0x6b4 <__addsf3>
 4ae:	d3 d1       	rcall	.+934    	; 0x856 <__fixunssfsi>
 4b0:	16 2f       	mov	r17, r22
 4b2:	01 50       	subi	r16, 0x01	; 1
				holder2--;	
 4b4:	a8 f6       	brcc	.-86     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b8:	10 e0       	ldi	r17, 0x00	; 0
		unsigned char holder2 = place - 1;
		unsigned char holder = 0;
		if (key == '#')
		{
			//LCD_ClearScreen();
			for(int i = 0; i < place; i++)
 4ba:	ff ef       	ldi	r31, 0xFF	; 255
				num1 = holder*pow(10, holder2) + num1;
				holder2--;	
			}
			//LCD_WriteData('.');
			holder2 = 1;
			for(int j = place+1; j < count; j++)
 4bc:	cf 1a       	sub	r12, r31
 4be:	df 0a       	sbc	r13, r31
 4c0:	82 2d       	mov	r24, r2
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	c8 16       	cp	r12, r24
 4c6:	d9 06       	cpc	r13, r25
 4c8:	0c f0       	brlt	.+2      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4ca:	3e c0       	rjmp	.+124    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 4cc:	e3 2c       	mov	r14, r3
 4ce:	f1 2c       	mov	r15, r1
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	e8 1a       	sub	r14, r24
 4d4:	f8 0a       	sbc	r15, r24
 4d6:	a1 e0       	ldi	r26, 0x01	; 1
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	ac 0f       	add	r26, r28
 4dc:	bd 1f       	adc	r27, r29
 4de:	ea 0e       	add	r14, r26
 4e0:	fb 1e       	adc	r15, r27
 4e2:	33 94       	inc	r3
 4e4:	33 94       	inc	r3
 4e6:	32 18       	sub	r3, r2
 4e8:	dd 24       	eor	r13, r13
 4ea:	d3 94       	inc	r13
			{
				//LCD_WriteData(number[j]);
				holder = changetoInteger(number[j]);
 4ec:	00 e0       	ldi	r16, 0x00	; 0
 4ee:	f7 01       	movw	r30, r14
 4f0:	81 91       	ld	r24, Z+
 4f2:	7f 01       	movw	r14, r30
 4f4:	33 df       	rcall	.-410    	; 0x35c <changetoInteger>
				num2 = holder*pow(10, holder2) + num2;
 4f6:	c8 2e       	mov	r12, r24
 4f8:	6d 2d       	mov	r22, r13
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	d6 d1       	rcall	.+940    	; 0x8ae <__floatunsisf>
 502:	9b 01       	movw	r18, r22
 504:	ac 01       	movw	r20, r24
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	80 e2       	ldi	r24, 0x20	; 32
 50c:	91 e4       	ldi	r25, 0x41	; 65
 50e:	c0 d2       	rcall	.+1408   	; 0xa90 <pow>
 510:	4b 01       	movw	r8, r22
 512:	5c 01       	movw	r10, r24
 514:	6c 2d       	mov	r22, r12
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	ca d1       	rcall	.+916    	; 0x8b2 <__floatsisf>
 51e:	a5 01       	movw	r20, r10
 520:	94 01       	movw	r18, r8
 522:	53 d2       	rcall	.+1190   	; 0x9ca <__mulsf3>
 524:	4b 01       	movw	r8, r22
 526:	5c 01       	movw	r10, r24
 528:	60 2f       	mov	r22, r16
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	c0 d1       	rcall	.+896    	; 0x8b2 <__floatsisf>
 532:	9b 01       	movw	r18, r22
 534:	ac 01       	movw	r20, r24
 536:	c5 01       	movw	r24, r10
 538:	b4 01       	movw	r22, r8
 53a:	bc d0       	rcall	.+376    	; 0x6b4 <__addsf3>
 53c:	8c d1       	rcall	.+792    	; 0x856 <__fixunssfsi>
				holder2--;
 53e:	06 2f       	mov	r16, r22
				num1 = holder*pow(10, holder2) + num1;
				holder2--;	
			}
			//LCD_WriteData('.');
			holder2 = 1;
			for(int j = place+1; j < count; j++)
 540:	da 94       	dec	r13
 542:	d3 10       	cpse	r13, r3
 544:	d4 cf       	rjmp	.-88     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
				holder2--;
			}
		
		double n1 = (double) num1;
		double n2 = (double) num2;
		double dec = n1 + (n2/100);		
 546:	01 c0       	rjmp	.+2      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 548:	00 e0       	ldi	r16, 0x00	; 0
 54a:	60 2f       	mov	r22, r16
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	ad d1       	rcall	.+858    	; 0x8ae <__floatunsisf>
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	48 ec       	ldi	r20, 0xC8	; 200
 55a:	52 e4       	ldi	r21, 0x42	; 66
 55c:	0f d1       	rcall	.+542    	; 0x77c <__divsf3>
 55e:	6b 01       	movw	r12, r22
 560:	7c 01       	movw	r14, r24
 562:	61 2f       	mov	r22, r17
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	a1 d1       	rcall	.+834    	; 0x8ae <__floatunsisf>
 56c:	9b 01       	movw	r18, r22
 56e:	ac 01       	movw	r20, r24
 570:	c7 01       	movw	r24, r14
 572:	b6 01       	movw	r22, r12
		//dec = dec + 1.12;
		double decpart = (dec - (int)dec) * 100;
 574:	9f d0       	rcall	.+318    	; 0x6b4 <__addsf3>
 576:	4b 01       	movw	r8, r22
 578:	5c 01       	movw	r10, r24
 57a:	68 d1       	rcall	.+720    	; 0x84c <__fixsfsi>
		int decVal = (int)decpart;
 57c:	6b 01       	movw	r12, r22
 57e:	7c 01       	movw	r14, r24
 580:	07 2e       	mov	r0, r23
 582:	00 0c       	add	r0, r0
 584:	88 0b       	sbc	r24, r24
 586:	99 0b       	sbc	r25, r25
 588:	94 d1       	rcall	.+808    	; 0x8b2 <__floatsisf>
 58a:	9b 01       	movw	r18, r22
 58c:	ac 01       	movw	r20, r24
 58e:	c5 01       	movw	r24, r10
 590:	b4 01       	movw	r22, r8
 592:	8f d0       	rcall	.+286    	; 0x6b2 <__subsf3>
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	48 ec       	ldi	r20, 0xC8	; 200
 59a:	52 e4       	ldi	r21, 0x42	; 66
 59c:	16 d2       	rcall	.+1068   	; 0x9ca <__mulsf3>
 59e:	56 d1       	rcall	.+684    	; 0x84c <__fixsfsi>
 5a0:	68 87       	std	Y+8, r22	; 0x08
 5a2:	79 87       	std	Y+9, r23	; 0x09
 5a4:	8a 87       	std	Y+10, r24	; 0x0a
 5a6:	9b 87       	std	Y+11, r25	; 0x0b
		int intVal = (int)dec;
		
		num1 = (unsigned char)intVal;
		num2 = (unsigned char)decVal;
				
		if(num1 >= 99)
 5a8:	bc 2c       	mov	r11, r12
 5aa:	f2 e6       	ldi	r31, 0x62	; 98
 5ac:	fc 15       	cp	r31, r12
		{
			num1++;
 5ae:	18 f4       	brcc	.+6      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5b0:	bb 24       	eor	r11, r11
 5b2:	b3 94       	inc	r11
		}		
		place = findHowManyB4Dec(num1);
 5b4:	bc 0c       	add	r11, r12
 5b6:	8b 2d       	mov	r24, r11
 5b8:	0c df       	rcall	.-488    	; 0x3d2 <findHowManyB4Dec>
		
		holder2 = place - 1;
 5ba:	38 2e       	mov	r3, r24
 5bc:	1f ef       	ldi	r17, 0xFF	; 255
		
		unsigned char holder3 = 0;
	
		for(int i = 0; i < place; i++)
 5be:	18 0f       	add	r17, r24
 5c0:	c8 2e       	mov	r12, r24
 5c2:	d1 2c       	mov	r13, r1
 5c4:	1c 14       	cp	r1, r12
 5c6:	1d 04       	cpc	r1, r13
 5c8:	0c f0       	brlt	.+2      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
		{
			holder3 = num1/(pow(10,holder2));
 5ca:	36 c0       	rjmp	.+108    	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 5cc:	e1 2c       	mov	r14, r1
 5ce:	f1 2c       	mov	r15, r1
 5d0:	6b 2d       	mov	r22, r11
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	6c d1       	rcall	.+728    	; 0x8b2 <__floatsisf>
 5da:	4b 01       	movw	r8, r22
 5dc:	5c 01       	movw	r10, r24
 5de:	61 2f       	mov	r22, r17
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	63 d1       	rcall	.+710    	; 0x8ae <__floatunsisf>
 5e8:	9b 01       	movw	r18, r22
 5ea:	ac 01       	movw	r20, r24
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	80 e2       	ldi	r24, 0x20	; 32
 5f2:	91 e4       	ldi	r25, 0x41	; 65
 5f4:	4d d2       	rcall	.+1178   	; 0xa90 <pow>
 5f6:	2b 01       	movw	r4, r22
 5f8:	3c 01       	movw	r6, r24
 5fa:	9b 01       	movw	r18, r22
 5fc:	ac 01       	movw	r20, r24
 5fe:	c5 01       	movw	r24, r10
			num1 = num1 - (holder3 * pow(10, holder2));
 600:	b4 01       	movw	r22, r8
 602:	bc d0       	rcall	.+376    	; 0x77c <__divsf3>
 604:	28 d1       	rcall	.+592    	; 0x856 <__fixunssfsi>
 606:	06 2f       	mov	r16, r22
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	51 d1       	rcall	.+674    	; 0x8b2 <__floatsisf>
 610:	a3 01       	movw	r20, r6
 612:	92 01       	movw	r18, r4
 614:	da d1       	rcall	.+948    	; 0x9ca <__mulsf3>
 616:	9b 01       	movw	r18, r22
 618:	ac 01       	movw	r20, r24
 61a:	c5 01       	movw	r24, r10
			LCD_WriteData(changetoChar(holder3));
 61c:	b4 01       	movw	r22, r8
 61e:	49 d0       	rcall	.+146    	; 0x6b2 <__subsf3>
 620:	1a d1       	rcall	.+564    	; 0x856 <__fixunssfsi>
		
		holder2 = place - 1;
		
		unsigned char holder3 = 0;
	
		for(int i = 0; i < place; i++)
 622:	b6 2e       	mov	r11, r22
 624:	80 2f       	mov	r24, r16
 626:	b7 de       	rcall	.-658    	; 0x396 <changetoChar>
			num1 = num1 - (holder3 * pow(10, holder2));
			LCD_WriteData(changetoChar(holder3));
			holder2--;
		}
		holder2 = 1;
		LCD_WriteData('.');
 628:	42 de       	rcall	.-892    	; 0x2ae <LCD_WriteData>
 62a:	11 50       	subi	r17, 0x01	; 1
 62c:	8f ef       	ldi	r24, 0xFF	; 255
		for(int i = 0; i < 2; i++)
		{
			holder3 = num2/(pow(10,holder2));
 62e:	e8 1a       	sub	r14, r24
 630:	f8 0a       	sbc	r15, r24
 632:	ec 14       	cp	r14, r12
 634:	fd 04       	cpc	r15, r13
 636:	61 f6       	brne	.-104    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 638:	8e e2       	ldi	r24, 0x2E	; 46
 63a:	39 de       	rcall	.-910    	; 0x2ae <LCD_WriteData>
 63c:	68 85       	ldd	r22, Y+8	; 0x08
 63e:	79 85       	ldd	r23, Y+9	; 0x09
 640:	77 27       	eor	r23, r23
 642:	07 2e       	mov	r0, r23
 644:	00 0c       	add	r0, r0
 646:	88 0b       	sbc	r24, r24
 648:	99 0b       	sbc	r25, r25
 64a:	33 d1       	rcall	.+614    	; 0x8b2 <__floatsisf>
 64c:	6b 01       	movw	r12, r22
 64e:	7c 01       	movw	r14, r24
 650:	20 e0       	ldi	r18, 0x00	; 0
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	40 e2       	ldi	r20, 0x20	; 32
			num2 = num2 - (holder3 * pow(10, holder2));
 656:	51 e4       	ldi	r21, 0x41	; 65
 658:	91 d0       	rcall	.+290    	; 0x77c <__divsf3>
 65a:	fd d0       	rcall	.+506    	; 0x856 <__fixunssfsi>
 65c:	06 2f       	mov	r16, r22
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	26 d1       	rcall	.+588    	; 0x8b2 <__floatsisf>
 666:	20 e0       	ldi	r18, 0x00	; 0
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	40 e2       	ldi	r20, 0x20	; 32
 66c:	51 e4       	ldi	r21, 0x41	; 65
 66e:	ad d1       	rcall	.+858    	; 0x9ca <__mulsf3>
 670:	9b 01       	movw	r18, r22
 672:	ac 01       	movw	r20, r24
 674:	c7 01       	movw	r24, r14
 676:	b6 01       	movw	r22, r12
 678:	1c d0       	rcall	.+56     	; 0x6b2 <__subsf3>
 67a:	ed d0       	rcall	.+474    	; 0x856 <__fixunssfsi>
 67c:	16 2f       	mov	r17, r22
			LCD_WriteData(changetoChar(holder3));
 67e:	80 2f       	mov	r24, r16
 680:	8a de       	rcall	.-748    	; 0x396 <changetoChar>
 682:	15 de       	rcall	.-982    	; 0x2ae <LCD_WriteData>
 684:	81 2f       	mov	r24, r17
 686:	87 de       	rcall	.-754    	; 0x396 <changetoChar>
 688:	12 de       	rcall	.-988    	; 0x2ae <LCD_WriteData>
 68a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
 68e:	88 23       	and	r24, r24
 690:	e1 f3       	breq	.-8      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
			holder2--;
		}
	}
        while(!TimerFlag);
 692:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
 696:	cf ce       	rjmp	.-610    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 698:	0f ef       	ldi	r16, 0xFF	; 255
        TimerFlag = 0;
 69a:	03 0d       	add	r16, r3
 69c:	c3 2c       	mov	r12, r3
    }
 69e:	d1 2c       	mov	r13, r1
			number[count] = key;
			count++;
		}
		unsigned char num1 = 0; 
		unsigned char num2 = 0;
		unsigned char holder2 = place - 1;
 6a0:	1c 14       	cp	r1, r12
 6a2:	1d 04       	cpc	r1, r13
		unsigned char holder = 0;
		if (key == '#')
		{
			//LCD_ClearScreen();
			for(int i = 0; i < place; i++)
 6a4:	0c f0       	brlt	.+2      	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 6a6:	08 cf       	rjmp	.-496    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 6a8:	de 01       	movw	r26, r28
 6aa:	11 96       	adiw	r26, 0x01	; 1
 6ac:	7d 01       	movw	r14, r26
 6ae:	10 e0       	ldi	r17, 0x00	; 0
 6b0:	d7 ce       	rjmp	.-594    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

000006b2 <__subsf3>:
 6b2:	50 58       	subi	r21, 0x80	; 128

000006b4 <__addsf3>:
 6b4:	bb 27       	eor	r27, r27
 6b6:	aa 27       	eor	r26, r26
 6b8:	0e d0       	rcall	.+28     	; 0x6d6 <__addsf3x>
 6ba:	4d c1       	rjmp	.+666    	; 0x956 <__fp_round>
 6bc:	3e d1       	rcall	.+636    	; 0x93a <__fp_pscA>
 6be:	30 f0       	brcs	.+12     	; 0x6cc <__addsf3+0x18>
 6c0:	43 d1       	rcall	.+646    	; 0x948 <__fp_pscB>
 6c2:	20 f0       	brcs	.+8      	; 0x6cc <__addsf3+0x18>
 6c4:	31 f4       	brne	.+12     	; 0x6d2 <__addsf3+0x1e>
 6c6:	9f 3f       	cpi	r25, 0xFF	; 255
 6c8:	11 f4       	brne	.+4      	; 0x6ce <__addsf3+0x1a>
 6ca:	1e f4       	brtc	.+6      	; 0x6d2 <__addsf3+0x1e>
 6cc:	33 c1       	rjmp	.+614    	; 0x934 <__fp_nan>
 6ce:	0e f4       	brtc	.+2      	; 0x6d2 <__addsf3+0x1e>
 6d0:	e0 95       	com	r30
 6d2:	e7 fb       	bst	r30, 7
 6d4:	29 c1       	rjmp	.+594    	; 0x928 <__fp_inf>

000006d6 <__addsf3x>:
 6d6:	e9 2f       	mov	r30, r25
 6d8:	4f d1       	rcall	.+670    	; 0x978 <__fp_split3>
 6da:	80 f3       	brcs	.-32     	; 0x6bc <__addsf3+0x8>
 6dc:	ba 17       	cp	r27, r26
 6de:	62 07       	cpc	r22, r18
 6e0:	73 07       	cpc	r23, r19
 6e2:	84 07       	cpc	r24, r20
 6e4:	95 07       	cpc	r25, r21
 6e6:	18 f0       	brcs	.+6      	; 0x6ee <__addsf3x+0x18>
 6e8:	71 f4       	brne	.+28     	; 0x706 <__addsf3x+0x30>
 6ea:	9e f5       	brtc	.+102    	; 0x752 <__addsf3x+0x7c>
 6ec:	67 c1       	rjmp	.+718    	; 0x9bc <__fp_zero>
 6ee:	0e f4       	brtc	.+2      	; 0x6f2 <__addsf3x+0x1c>
 6f0:	e0 95       	com	r30
 6f2:	0b 2e       	mov	r0, r27
 6f4:	ba 2f       	mov	r27, r26
 6f6:	a0 2d       	mov	r26, r0
 6f8:	0b 01       	movw	r0, r22
 6fa:	b9 01       	movw	r22, r18
 6fc:	90 01       	movw	r18, r0
 6fe:	0c 01       	movw	r0, r24
 700:	ca 01       	movw	r24, r20
 702:	a0 01       	movw	r20, r0
 704:	11 24       	eor	r1, r1
 706:	ff 27       	eor	r31, r31
 708:	59 1b       	sub	r21, r25
 70a:	99 f0       	breq	.+38     	; 0x732 <__addsf3x+0x5c>
 70c:	59 3f       	cpi	r21, 0xF9	; 249
 70e:	50 f4       	brcc	.+20     	; 0x724 <__addsf3x+0x4e>
 710:	50 3e       	cpi	r21, 0xE0	; 224
 712:	68 f1       	brcs	.+90     	; 0x76e <__addsf3x+0x98>
 714:	1a 16       	cp	r1, r26
 716:	f0 40       	sbci	r31, 0x00	; 0
 718:	a2 2f       	mov	r26, r18
 71a:	23 2f       	mov	r18, r19
 71c:	34 2f       	mov	r19, r20
 71e:	44 27       	eor	r20, r20
 720:	58 5f       	subi	r21, 0xF8	; 248
 722:	f3 cf       	rjmp	.-26     	; 0x70a <__addsf3x+0x34>
 724:	46 95       	lsr	r20
 726:	37 95       	ror	r19
 728:	27 95       	ror	r18
 72a:	a7 95       	ror	r26
 72c:	f0 40       	sbci	r31, 0x00	; 0
 72e:	53 95       	inc	r21
 730:	c9 f7       	brne	.-14     	; 0x724 <__addsf3x+0x4e>
 732:	7e f4       	brtc	.+30     	; 0x752 <__addsf3x+0x7c>
 734:	1f 16       	cp	r1, r31
 736:	ba 0b       	sbc	r27, r26
 738:	62 0b       	sbc	r22, r18
 73a:	73 0b       	sbc	r23, r19
 73c:	84 0b       	sbc	r24, r20
 73e:	ba f0       	brmi	.+46     	; 0x76e <__addsf3x+0x98>
 740:	91 50       	subi	r25, 0x01	; 1
 742:	a1 f0       	breq	.+40     	; 0x76c <__addsf3x+0x96>
 744:	ff 0f       	add	r31, r31
 746:	bb 1f       	adc	r27, r27
 748:	66 1f       	adc	r22, r22
 74a:	77 1f       	adc	r23, r23
 74c:	88 1f       	adc	r24, r24
 74e:	c2 f7       	brpl	.-16     	; 0x740 <__addsf3x+0x6a>
 750:	0e c0       	rjmp	.+28     	; 0x76e <__addsf3x+0x98>
 752:	ba 0f       	add	r27, r26
 754:	62 1f       	adc	r22, r18
 756:	73 1f       	adc	r23, r19
 758:	84 1f       	adc	r24, r20
 75a:	48 f4       	brcc	.+18     	; 0x76e <__addsf3x+0x98>
 75c:	87 95       	ror	r24
 75e:	77 95       	ror	r23
 760:	67 95       	ror	r22
 762:	b7 95       	ror	r27
 764:	f7 95       	ror	r31
 766:	9e 3f       	cpi	r25, 0xFE	; 254
 768:	08 f0       	brcs	.+2      	; 0x76c <__addsf3x+0x96>
 76a:	b3 cf       	rjmp	.-154    	; 0x6d2 <__addsf3+0x1e>
 76c:	93 95       	inc	r25
 76e:	88 0f       	add	r24, r24
 770:	08 f0       	brcs	.+2      	; 0x774 <__addsf3x+0x9e>
 772:	99 27       	eor	r25, r25
 774:	ee 0f       	add	r30, r30
 776:	97 95       	ror	r25
 778:	87 95       	ror	r24
 77a:	08 95       	ret

0000077c <__divsf3>:
 77c:	0c d0       	rcall	.+24     	; 0x796 <__divsf3x>
 77e:	eb c0       	rjmp	.+470    	; 0x956 <__fp_round>
 780:	e3 d0       	rcall	.+454    	; 0x948 <__fp_pscB>
 782:	40 f0       	brcs	.+16     	; 0x794 <__divsf3+0x18>
 784:	da d0       	rcall	.+436    	; 0x93a <__fp_pscA>
 786:	30 f0       	brcs	.+12     	; 0x794 <__divsf3+0x18>
 788:	21 f4       	brne	.+8      	; 0x792 <__divsf3+0x16>
 78a:	5f 3f       	cpi	r21, 0xFF	; 255
 78c:	19 f0       	breq	.+6      	; 0x794 <__divsf3+0x18>
 78e:	cc c0       	rjmp	.+408    	; 0x928 <__fp_inf>
 790:	51 11       	cpse	r21, r1
 792:	15 c1       	rjmp	.+554    	; 0x9be <__fp_szero>
 794:	cf c0       	rjmp	.+414    	; 0x934 <__fp_nan>

00000796 <__divsf3x>:
 796:	f0 d0       	rcall	.+480    	; 0x978 <__fp_split3>
 798:	98 f3       	brcs	.-26     	; 0x780 <__divsf3+0x4>

0000079a <__divsf3_pse>:
 79a:	99 23       	and	r25, r25
 79c:	c9 f3       	breq	.-14     	; 0x790 <__divsf3+0x14>
 79e:	55 23       	and	r21, r21
 7a0:	b1 f3       	breq	.-20     	; 0x78e <__divsf3+0x12>
 7a2:	95 1b       	sub	r25, r21
 7a4:	55 0b       	sbc	r21, r21
 7a6:	bb 27       	eor	r27, r27
 7a8:	aa 27       	eor	r26, r26
 7aa:	62 17       	cp	r22, r18
 7ac:	73 07       	cpc	r23, r19
 7ae:	84 07       	cpc	r24, r20
 7b0:	38 f0       	brcs	.+14     	; 0x7c0 <__divsf3_pse+0x26>
 7b2:	9f 5f       	subi	r25, 0xFF	; 255
 7b4:	5f 4f       	sbci	r21, 0xFF	; 255
 7b6:	22 0f       	add	r18, r18
 7b8:	33 1f       	adc	r19, r19
 7ba:	44 1f       	adc	r20, r20
 7bc:	aa 1f       	adc	r26, r26
 7be:	a9 f3       	breq	.-22     	; 0x7aa <__divsf3_pse+0x10>
 7c0:	33 d0       	rcall	.+102    	; 0x828 <__divsf3_pse+0x8e>
 7c2:	0e 2e       	mov	r0, r30
 7c4:	3a f0       	brmi	.+14     	; 0x7d4 <__divsf3_pse+0x3a>
 7c6:	e0 e8       	ldi	r30, 0x80	; 128
 7c8:	30 d0       	rcall	.+96     	; 0x82a <__divsf3_pse+0x90>
 7ca:	91 50       	subi	r25, 0x01	; 1
 7cc:	50 40       	sbci	r21, 0x00	; 0
 7ce:	e6 95       	lsr	r30
 7d0:	00 1c       	adc	r0, r0
 7d2:	ca f7       	brpl	.-14     	; 0x7c6 <__divsf3_pse+0x2c>
 7d4:	29 d0       	rcall	.+82     	; 0x828 <__divsf3_pse+0x8e>
 7d6:	fe 2f       	mov	r31, r30
 7d8:	27 d0       	rcall	.+78     	; 0x828 <__divsf3_pse+0x8e>
 7da:	66 0f       	add	r22, r22
 7dc:	77 1f       	adc	r23, r23
 7de:	88 1f       	adc	r24, r24
 7e0:	bb 1f       	adc	r27, r27
 7e2:	26 17       	cp	r18, r22
 7e4:	37 07       	cpc	r19, r23
 7e6:	48 07       	cpc	r20, r24
 7e8:	ab 07       	cpc	r26, r27
 7ea:	b0 e8       	ldi	r27, 0x80	; 128
 7ec:	09 f0       	breq	.+2      	; 0x7f0 <__divsf3_pse+0x56>
 7ee:	bb 0b       	sbc	r27, r27
 7f0:	80 2d       	mov	r24, r0
 7f2:	bf 01       	movw	r22, r30
 7f4:	ff 27       	eor	r31, r31
 7f6:	93 58       	subi	r25, 0x83	; 131
 7f8:	5f 4f       	sbci	r21, 0xFF	; 255
 7fa:	2a f0       	brmi	.+10     	; 0x806 <__divsf3_pse+0x6c>
 7fc:	9e 3f       	cpi	r25, 0xFE	; 254
 7fe:	51 05       	cpc	r21, r1
 800:	68 f0       	brcs	.+26     	; 0x81c <__divsf3_pse+0x82>
 802:	92 c0       	rjmp	.+292    	; 0x928 <__fp_inf>
 804:	dc c0       	rjmp	.+440    	; 0x9be <__fp_szero>
 806:	5f 3f       	cpi	r21, 0xFF	; 255
 808:	ec f3       	brlt	.-6      	; 0x804 <__divsf3_pse+0x6a>
 80a:	98 3e       	cpi	r25, 0xE8	; 232
 80c:	dc f3       	brlt	.-10     	; 0x804 <__divsf3_pse+0x6a>
 80e:	86 95       	lsr	r24
 810:	77 95       	ror	r23
 812:	67 95       	ror	r22
 814:	b7 95       	ror	r27
 816:	f7 95       	ror	r31
 818:	9f 5f       	subi	r25, 0xFF	; 255
 81a:	c9 f7       	brne	.-14     	; 0x80e <__divsf3_pse+0x74>
 81c:	88 0f       	add	r24, r24
 81e:	91 1d       	adc	r25, r1
 820:	96 95       	lsr	r25
 822:	87 95       	ror	r24
 824:	97 f9       	bld	r25, 7
 826:	08 95       	ret
 828:	e1 e0       	ldi	r30, 0x01	; 1
 82a:	66 0f       	add	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	88 1f       	adc	r24, r24
 830:	bb 1f       	adc	r27, r27
 832:	62 17       	cp	r22, r18
 834:	73 07       	cpc	r23, r19
 836:	84 07       	cpc	r24, r20
 838:	ba 07       	cpc	r27, r26
 83a:	20 f0       	brcs	.+8      	; 0x844 <__divsf3_pse+0xaa>
 83c:	62 1b       	sub	r22, r18
 83e:	73 0b       	sbc	r23, r19
 840:	84 0b       	sbc	r24, r20
 842:	ba 0b       	sbc	r27, r26
 844:	ee 1f       	adc	r30, r30
 846:	88 f7       	brcc	.-30     	; 0x82a <__divsf3_pse+0x90>
 848:	e0 95       	com	r30
 84a:	08 95       	ret

0000084c <__fixsfsi>:
 84c:	04 d0       	rcall	.+8      	; 0x856 <__fixunssfsi>
 84e:	68 94       	set
 850:	b1 11       	cpse	r27, r1
 852:	b5 c0       	rjmp	.+362    	; 0x9be <__fp_szero>
 854:	08 95       	ret

00000856 <__fixunssfsi>:
 856:	98 d0       	rcall	.+304    	; 0x988 <__fp_splitA>
 858:	88 f0       	brcs	.+34     	; 0x87c <__fixunssfsi+0x26>
 85a:	9f 57       	subi	r25, 0x7F	; 127
 85c:	90 f0       	brcs	.+36     	; 0x882 <__fixunssfsi+0x2c>
 85e:	b9 2f       	mov	r27, r25
 860:	99 27       	eor	r25, r25
 862:	b7 51       	subi	r27, 0x17	; 23
 864:	a0 f0       	brcs	.+40     	; 0x88e <__fixunssfsi+0x38>
 866:	d1 f0       	breq	.+52     	; 0x89c <__fixunssfsi+0x46>
 868:	66 0f       	add	r22, r22
 86a:	77 1f       	adc	r23, r23
 86c:	88 1f       	adc	r24, r24
 86e:	99 1f       	adc	r25, r25
 870:	1a f0       	brmi	.+6      	; 0x878 <__fixunssfsi+0x22>
 872:	ba 95       	dec	r27
 874:	c9 f7       	brne	.-14     	; 0x868 <__fixunssfsi+0x12>
 876:	12 c0       	rjmp	.+36     	; 0x89c <__fixunssfsi+0x46>
 878:	b1 30       	cpi	r27, 0x01	; 1
 87a:	81 f0       	breq	.+32     	; 0x89c <__fixunssfsi+0x46>
 87c:	9f d0       	rcall	.+318    	; 0x9bc <__fp_zero>
 87e:	b1 e0       	ldi	r27, 0x01	; 1
 880:	08 95       	ret
 882:	9c c0       	rjmp	.+312    	; 0x9bc <__fp_zero>
 884:	67 2f       	mov	r22, r23
 886:	78 2f       	mov	r23, r24
 888:	88 27       	eor	r24, r24
 88a:	b8 5f       	subi	r27, 0xF8	; 248
 88c:	39 f0       	breq	.+14     	; 0x89c <__fixunssfsi+0x46>
 88e:	b9 3f       	cpi	r27, 0xF9	; 249
 890:	cc f3       	brlt	.-14     	; 0x884 <__fixunssfsi+0x2e>
 892:	86 95       	lsr	r24
 894:	77 95       	ror	r23
 896:	67 95       	ror	r22
 898:	b3 95       	inc	r27
 89a:	d9 f7       	brne	.-10     	; 0x892 <__fixunssfsi+0x3c>
 89c:	3e f4       	brtc	.+14     	; 0x8ac <__fixunssfsi+0x56>
 89e:	90 95       	com	r25
 8a0:	80 95       	com	r24
 8a2:	70 95       	com	r23
 8a4:	61 95       	neg	r22
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	08 95       	ret

000008ae <__floatunsisf>:
 8ae:	e8 94       	clt
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__floatsisf+0x12>

000008b2 <__floatsisf>:
 8b2:	97 fb       	bst	r25, 7
 8b4:	3e f4       	brtc	.+14     	; 0x8c4 <__floatsisf+0x12>
 8b6:	90 95       	com	r25
 8b8:	80 95       	com	r24
 8ba:	70 95       	com	r23
 8bc:	61 95       	neg	r22
 8be:	7f 4f       	sbci	r23, 0xFF	; 255
 8c0:	8f 4f       	sbci	r24, 0xFF	; 255
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	99 23       	and	r25, r25
 8c6:	a9 f0       	breq	.+42     	; 0x8f2 <__floatsisf+0x40>
 8c8:	f9 2f       	mov	r31, r25
 8ca:	96 e9       	ldi	r25, 0x96	; 150
 8cc:	bb 27       	eor	r27, r27
 8ce:	93 95       	inc	r25
 8d0:	f6 95       	lsr	r31
 8d2:	87 95       	ror	r24
 8d4:	77 95       	ror	r23
 8d6:	67 95       	ror	r22
 8d8:	b7 95       	ror	r27
 8da:	f1 11       	cpse	r31, r1
 8dc:	f8 cf       	rjmp	.-16     	; 0x8ce <__floatsisf+0x1c>
 8de:	fa f4       	brpl	.+62     	; 0x91e <__floatsisf+0x6c>
 8e0:	bb 0f       	add	r27, r27
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__floatsisf+0x36>
 8e4:	60 ff       	sbrs	r22, 0
 8e6:	1b c0       	rjmp	.+54     	; 0x91e <__floatsisf+0x6c>
 8e8:	6f 5f       	subi	r22, 0xFF	; 255
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	16 c0       	rjmp	.+44     	; 0x91e <__floatsisf+0x6c>
 8f2:	88 23       	and	r24, r24
 8f4:	11 f0       	breq	.+4      	; 0x8fa <__floatsisf+0x48>
 8f6:	96 e9       	ldi	r25, 0x96	; 150
 8f8:	11 c0       	rjmp	.+34     	; 0x91c <__floatsisf+0x6a>
 8fa:	77 23       	and	r23, r23
 8fc:	21 f0       	breq	.+8      	; 0x906 <__floatsisf+0x54>
 8fe:	9e e8       	ldi	r25, 0x8E	; 142
 900:	87 2f       	mov	r24, r23
 902:	76 2f       	mov	r23, r22
 904:	05 c0       	rjmp	.+10     	; 0x910 <__floatsisf+0x5e>
 906:	66 23       	and	r22, r22
 908:	71 f0       	breq	.+28     	; 0x926 <__floatsisf+0x74>
 90a:	96 e8       	ldi	r25, 0x86	; 134
 90c:	86 2f       	mov	r24, r22
 90e:	70 e0       	ldi	r23, 0x00	; 0
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	2a f0       	brmi	.+10     	; 0x91e <__floatsisf+0x6c>
 914:	9a 95       	dec	r25
 916:	66 0f       	add	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	da f7       	brpl	.-10     	; 0x914 <__floatsisf+0x62>
 91e:	88 0f       	add	r24, r24
 920:	96 95       	lsr	r25
 922:	87 95       	ror	r24
 924:	97 f9       	bld	r25, 7
 926:	08 95       	ret

00000928 <__fp_inf>:
 928:	97 f9       	bld	r25, 7
 92a:	9f 67       	ori	r25, 0x7F	; 127
 92c:	80 e8       	ldi	r24, 0x80	; 128
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	08 95       	ret

00000934 <__fp_nan>:
 934:	9f ef       	ldi	r25, 0xFF	; 255
 936:	80 ec       	ldi	r24, 0xC0	; 192
 938:	08 95       	ret

0000093a <__fp_pscA>:
 93a:	00 24       	eor	r0, r0
 93c:	0a 94       	dec	r0
 93e:	16 16       	cp	r1, r22
 940:	17 06       	cpc	r1, r23
 942:	18 06       	cpc	r1, r24
 944:	09 06       	cpc	r0, r25
 946:	08 95       	ret

00000948 <__fp_pscB>:
 948:	00 24       	eor	r0, r0
 94a:	0a 94       	dec	r0
 94c:	12 16       	cp	r1, r18
 94e:	13 06       	cpc	r1, r19
 950:	14 06       	cpc	r1, r20
 952:	05 06       	cpc	r0, r21
 954:	08 95       	ret

00000956 <__fp_round>:
 956:	09 2e       	mov	r0, r25
 958:	03 94       	inc	r0
 95a:	00 0c       	add	r0, r0
 95c:	11 f4       	brne	.+4      	; 0x962 <__fp_round+0xc>
 95e:	88 23       	and	r24, r24
 960:	52 f0       	brmi	.+20     	; 0x976 <__fp_round+0x20>
 962:	bb 0f       	add	r27, r27
 964:	40 f4       	brcc	.+16     	; 0x976 <__fp_round+0x20>
 966:	bf 2b       	or	r27, r31
 968:	11 f4       	brne	.+4      	; 0x96e <__fp_round+0x18>
 96a:	60 ff       	sbrs	r22, 0
 96c:	04 c0       	rjmp	.+8      	; 0x976 <__fp_round+0x20>
 96e:	6f 5f       	subi	r22, 0xFF	; 255
 970:	7f 4f       	sbci	r23, 0xFF	; 255
 972:	8f 4f       	sbci	r24, 0xFF	; 255
 974:	9f 4f       	sbci	r25, 0xFF	; 255
 976:	08 95       	ret

00000978 <__fp_split3>:
 978:	57 fd       	sbrc	r21, 7
 97a:	90 58       	subi	r25, 0x80	; 128
 97c:	44 0f       	add	r20, r20
 97e:	55 1f       	adc	r21, r21
 980:	59 f0       	breq	.+22     	; 0x998 <__fp_splitA+0x10>
 982:	5f 3f       	cpi	r21, 0xFF	; 255
 984:	71 f0       	breq	.+28     	; 0x9a2 <__fp_splitA+0x1a>
 986:	47 95       	ror	r20

00000988 <__fp_splitA>:
 988:	88 0f       	add	r24, r24
 98a:	97 fb       	bst	r25, 7
 98c:	99 1f       	adc	r25, r25
 98e:	61 f0       	breq	.+24     	; 0x9a8 <__fp_splitA+0x20>
 990:	9f 3f       	cpi	r25, 0xFF	; 255
 992:	79 f0       	breq	.+30     	; 0x9b2 <__fp_splitA+0x2a>
 994:	87 95       	ror	r24
 996:	08 95       	ret
 998:	12 16       	cp	r1, r18
 99a:	13 06       	cpc	r1, r19
 99c:	14 06       	cpc	r1, r20
 99e:	55 1f       	adc	r21, r21
 9a0:	f2 cf       	rjmp	.-28     	; 0x986 <__fp_split3+0xe>
 9a2:	46 95       	lsr	r20
 9a4:	f1 df       	rcall	.-30     	; 0x988 <__fp_splitA>
 9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <__fp_splitA+0x30>
 9a8:	16 16       	cp	r1, r22
 9aa:	17 06       	cpc	r1, r23
 9ac:	18 06       	cpc	r1, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	f1 cf       	rjmp	.-30     	; 0x994 <__fp_splitA+0xc>
 9b2:	86 95       	lsr	r24
 9b4:	71 05       	cpc	r23, r1
 9b6:	61 05       	cpc	r22, r1
 9b8:	08 94       	sec
 9ba:	08 95       	ret

000009bc <__fp_zero>:
 9bc:	e8 94       	clt

000009be <__fp_szero>:
 9be:	bb 27       	eor	r27, r27
 9c0:	66 27       	eor	r22, r22
 9c2:	77 27       	eor	r23, r23
 9c4:	cb 01       	movw	r24, r22
 9c6:	97 f9       	bld	r25, 7
 9c8:	08 95       	ret

000009ca <__mulsf3>:
 9ca:	0b d0       	rcall	.+22     	; 0x9e2 <__mulsf3x>
 9cc:	c4 cf       	rjmp	.-120    	; 0x956 <__fp_round>
 9ce:	b5 df       	rcall	.-150    	; 0x93a <__fp_pscA>
 9d0:	28 f0       	brcs	.+10     	; 0x9dc <__mulsf3+0x12>
 9d2:	ba df       	rcall	.-140    	; 0x948 <__fp_pscB>
 9d4:	18 f0       	brcs	.+6      	; 0x9dc <__mulsf3+0x12>
 9d6:	95 23       	and	r25, r21
 9d8:	09 f0       	breq	.+2      	; 0x9dc <__mulsf3+0x12>
 9da:	a6 cf       	rjmp	.-180    	; 0x928 <__fp_inf>
 9dc:	ab cf       	rjmp	.-170    	; 0x934 <__fp_nan>
 9de:	11 24       	eor	r1, r1
 9e0:	ee cf       	rjmp	.-36     	; 0x9be <__fp_szero>

000009e2 <__mulsf3x>:
 9e2:	ca df       	rcall	.-108    	; 0x978 <__fp_split3>
 9e4:	a0 f3       	brcs	.-24     	; 0x9ce <__mulsf3+0x4>

000009e6 <__mulsf3_pse>:
 9e6:	95 9f       	mul	r25, r21
 9e8:	d1 f3       	breq	.-12     	; 0x9de <__mulsf3+0x14>
 9ea:	95 0f       	add	r25, r21
 9ec:	50 e0       	ldi	r21, 0x00	; 0
 9ee:	55 1f       	adc	r21, r21
 9f0:	62 9f       	mul	r22, r18
 9f2:	f0 01       	movw	r30, r0
 9f4:	72 9f       	mul	r23, r18
 9f6:	bb 27       	eor	r27, r27
 9f8:	f0 0d       	add	r31, r0
 9fa:	b1 1d       	adc	r27, r1
 9fc:	63 9f       	mul	r22, r19
 9fe:	aa 27       	eor	r26, r26
 a00:	f0 0d       	add	r31, r0
 a02:	b1 1d       	adc	r27, r1
 a04:	aa 1f       	adc	r26, r26
 a06:	64 9f       	mul	r22, r20
 a08:	66 27       	eor	r22, r22
 a0a:	b0 0d       	add	r27, r0
 a0c:	a1 1d       	adc	r26, r1
 a0e:	66 1f       	adc	r22, r22
 a10:	82 9f       	mul	r24, r18
 a12:	22 27       	eor	r18, r18
 a14:	b0 0d       	add	r27, r0
 a16:	a1 1d       	adc	r26, r1
 a18:	62 1f       	adc	r22, r18
 a1a:	73 9f       	mul	r23, r19
 a1c:	b0 0d       	add	r27, r0
 a1e:	a1 1d       	adc	r26, r1
 a20:	62 1f       	adc	r22, r18
 a22:	83 9f       	mul	r24, r19
 a24:	a0 0d       	add	r26, r0
 a26:	61 1d       	adc	r22, r1
 a28:	22 1f       	adc	r18, r18
 a2a:	74 9f       	mul	r23, r20
 a2c:	33 27       	eor	r19, r19
 a2e:	a0 0d       	add	r26, r0
 a30:	61 1d       	adc	r22, r1
 a32:	23 1f       	adc	r18, r19
 a34:	84 9f       	mul	r24, r20
 a36:	60 0d       	add	r22, r0
 a38:	21 1d       	adc	r18, r1
 a3a:	82 2f       	mov	r24, r18
 a3c:	76 2f       	mov	r23, r22
 a3e:	6a 2f       	mov	r22, r26
 a40:	11 24       	eor	r1, r1
 a42:	9f 57       	subi	r25, 0x7F	; 127
 a44:	50 40       	sbci	r21, 0x00	; 0
 a46:	8a f0       	brmi	.+34     	; 0xa6a <__mulsf3_pse+0x84>
 a48:	e1 f0       	breq	.+56     	; 0xa82 <__mulsf3_pse+0x9c>
 a4a:	88 23       	and	r24, r24
 a4c:	4a f0       	brmi	.+18     	; 0xa60 <__mulsf3_pse+0x7a>
 a4e:	ee 0f       	add	r30, r30
 a50:	ff 1f       	adc	r31, r31
 a52:	bb 1f       	adc	r27, r27
 a54:	66 1f       	adc	r22, r22
 a56:	77 1f       	adc	r23, r23
 a58:	88 1f       	adc	r24, r24
 a5a:	91 50       	subi	r25, 0x01	; 1
 a5c:	50 40       	sbci	r21, 0x00	; 0
 a5e:	a9 f7       	brne	.-22     	; 0xa4a <__mulsf3_pse+0x64>
 a60:	9e 3f       	cpi	r25, 0xFE	; 254
 a62:	51 05       	cpc	r21, r1
 a64:	70 f0       	brcs	.+28     	; 0xa82 <__mulsf3_pse+0x9c>
 a66:	60 cf       	rjmp	.-320    	; 0x928 <__fp_inf>
 a68:	aa cf       	rjmp	.-172    	; 0x9be <__fp_szero>
 a6a:	5f 3f       	cpi	r21, 0xFF	; 255
 a6c:	ec f3       	brlt	.-6      	; 0xa68 <__mulsf3_pse+0x82>
 a6e:	98 3e       	cpi	r25, 0xE8	; 232
 a70:	dc f3       	brlt	.-10     	; 0xa68 <__mulsf3_pse+0x82>
 a72:	86 95       	lsr	r24
 a74:	77 95       	ror	r23
 a76:	67 95       	ror	r22
 a78:	b7 95       	ror	r27
 a7a:	f7 95       	ror	r31
 a7c:	e7 95       	ror	r30
 a7e:	9f 5f       	subi	r25, 0xFF	; 255
 a80:	c1 f7       	brne	.-16     	; 0xa72 <__mulsf3_pse+0x8c>
 a82:	fe 2b       	or	r31, r30
 a84:	88 0f       	add	r24, r24
 a86:	91 1d       	adc	r25, r1
 a88:	96 95       	lsr	r25
 a8a:	87 95       	ror	r24
 a8c:	97 f9       	bld	r25, 7
 a8e:	08 95       	ret

00000a90 <pow>:
 a90:	fa 01       	movw	r30, r20
 a92:	ee 0f       	add	r30, r30
 a94:	ff 1f       	adc	r31, r31
 a96:	30 96       	adiw	r30, 0x00	; 0
 a98:	21 05       	cpc	r18, r1
 a9a:	31 05       	cpc	r19, r1
 a9c:	99 f1       	breq	.+102    	; 0xb04 <pow+0x74>
 a9e:	61 15       	cp	r22, r1
 aa0:	71 05       	cpc	r23, r1
 aa2:	61 f4       	brne	.+24     	; 0xabc <pow+0x2c>
 aa4:	80 38       	cpi	r24, 0x80	; 128
 aa6:	bf e3       	ldi	r27, 0x3F	; 63
 aa8:	9b 07       	cpc	r25, r27
 aaa:	49 f1       	breq	.+82     	; 0xafe <pow+0x6e>
 aac:	68 94       	set
 aae:	90 38       	cpi	r25, 0x80	; 128
 ab0:	81 05       	cpc	r24, r1
 ab2:	61 f0       	breq	.+24     	; 0xacc <pow+0x3c>
 ab4:	80 38       	cpi	r24, 0x80	; 128
 ab6:	bf ef       	ldi	r27, 0xFF	; 255
 ab8:	9b 07       	cpc	r25, r27
 aba:	41 f0       	breq	.+16     	; 0xacc <pow+0x3c>
 abc:	99 23       	and	r25, r25
 abe:	42 f5       	brpl	.+80     	; 0xb10 <pow+0x80>
 ac0:	ff 3f       	cpi	r31, 0xFF	; 255
 ac2:	e1 05       	cpc	r30, r1
 ac4:	31 05       	cpc	r19, r1
 ac6:	21 05       	cpc	r18, r1
 ac8:	11 f1       	breq	.+68     	; 0xb0e <pow+0x7e>
 aca:	e8 94       	clt
 acc:	08 94       	sec
 ace:	e7 95       	ror	r30
 ad0:	d9 01       	movw	r26, r18
 ad2:	aa 23       	and	r26, r26
 ad4:	29 f4       	brne	.+10     	; 0xae0 <pow+0x50>
 ad6:	ab 2f       	mov	r26, r27
 ad8:	be 2f       	mov	r27, r30
 ada:	f8 5f       	subi	r31, 0xF8	; 248
 adc:	d0 f3       	brcs	.-12     	; 0xad2 <pow+0x42>
 ade:	10 c0       	rjmp	.+32     	; 0xb00 <pow+0x70>
 ae0:	ff 5f       	subi	r31, 0xFF	; 255
 ae2:	70 f4       	brcc	.+28     	; 0xb00 <pow+0x70>
 ae4:	a6 95       	lsr	r26
 ae6:	e0 f7       	brcc	.-8      	; 0xae0 <pow+0x50>
 ae8:	f7 39       	cpi	r31, 0x97	; 151
 aea:	50 f0       	brcs	.+20     	; 0xb00 <pow+0x70>
 aec:	19 f0       	breq	.+6      	; 0xaf4 <pow+0x64>
 aee:	ff 3a       	cpi	r31, 0xAF	; 175
 af0:	38 f4       	brcc	.+14     	; 0xb00 <pow+0x70>
 af2:	9f 77       	andi	r25, 0x7F	; 127
 af4:	9f 93       	push	r25
 af6:	0c d0       	rcall	.+24     	; 0xb10 <pow+0x80>
 af8:	0f 90       	pop	r0
 afa:	07 fc       	sbrc	r0, 7
 afc:	90 58       	subi	r25, 0x80	; 128
 afe:	08 95       	ret
 b00:	3e f0       	brts	.+14     	; 0xb10 <pow+0x80>
 b02:	18 cf       	rjmp	.-464    	; 0x934 <__fp_nan>
 b04:	60 e0       	ldi	r22, 0x00	; 0
 b06:	70 e0       	ldi	r23, 0x00	; 0
 b08:	80 e8       	ldi	r24, 0x80	; 128
 b0a:	9f e3       	ldi	r25, 0x3F	; 63
 b0c:	08 95       	ret
 b0e:	4f e7       	ldi	r20, 0x7F	; 127
 b10:	9f 77       	andi	r25, 0x7F	; 127
 b12:	5f 93       	push	r21
 b14:	4f 93       	push	r20
 b16:	3f 93       	push	r19
 b18:	2f 93       	push	r18
 b1a:	9e d0       	rcall	.+316    	; 0xc58 <log>
 b1c:	2f 91       	pop	r18
 b1e:	3f 91       	pop	r19
 b20:	4f 91       	pop	r20
 b22:	5f 91       	pop	r21
 b24:	52 df       	rcall	.-348    	; 0x9ca <__mulsf3>
 b26:	05 c0       	rjmp	.+10     	; 0xb32 <exp>
 b28:	19 f4       	brne	.+6      	; 0xb30 <pow+0xa0>
 b2a:	0e f0       	brts	.+2      	; 0xb2e <pow+0x9e>
 b2c:	fd ce       	rjmp	.-518    	; 0x928 <__fp_inf>
 b2e:	46 cf       	rjmp	.-372    	; 0x9bc <__fp_zero>
 b30:	01 cf       	rjmp	.-510    	; 0x934 <__fp_nan>

00000b32 <exp>:
 b32:	2a df       	rcall	.-428    	; 0x988 <__fp_splitA>
 b34:	c8 f3       	brcs	.-14     	; 0xb28 <pow+0x98>
 b36:	96 38       	cpi	r25, 0x86	; 134
 b38:	c0 f7       	brcc	.-16     	; 0xb2a <pow+0x9a>
 b3a:	07 f8       	bld	r0, 7
 b3c:	0f 92       	push	r0
 b3e:	e8 94       	clt
 b40:	2b e3       	ldi	r18, 0x3B	; 59
 b42:	3a ea       	ldi	r19, 0xAA	; 170
 b44:	48 eb       	ldi	r20, 0xB8	; 184
 b46:	5f e7       	ldi	r21, 0x7F	; 127
 b48:	4e df       	rcall	.-356    	; 0x9e6 <__mulsf3_pse>
 b4a:	0f 92       	push	r0
 b4c:	0f 92       	push	r0
 b4e:	0f 92       	push	r0
 b50:	4d b7       	in	r20, 0x3d	; 61
 b52:	5e b7       	in	r21, 0x3e	; 62
 b54:	0f 92       	push	r0
 b56:	c0 d0       	rcall	.+384    	; 0xcd8 <modf>
 b58:	e2 eb       	ldi	r30, 0xB2	; 178
 b5a:	f0 e0       	ldi	r31, 0x00	; 0
 b5c:	16 d0       	rcall	.+44     	; 0xb8a <__fp_powser>
 b5e:	4f 91       	pop	r20
 b60:	5f 91       	pop	r21
 b62:	ef 91       	pop	r30
 b64:	ff 91       	pop	r31
 b66:	e5 95       	asr	r30
 b68:	ee 1f       	adc	r30, r30
 b6a:	ff 1f       	adc	r31, r31
 b6c:	49 f0       	breq	.+18     	; 0xb80 <exp+0x4e>
 b6e:	fe 57       	subi	r31, 0x7E	; 126
 b70:	e0 68       	ori	r30, 0x80	; 128
 b72:	44 27       	eor	r20, r20
 b74:	ee 0f       	add	r30, r30
 b76:	44 1f       	adc	r20, r20
 b78:	fa 95       	dec	r31
 b7a:	e1 f7       	brne	.-8      	; 0xb74 <exp+0x42>
 b7c:	41 95       	neg	r20
 b7e:	55 0b       	sbc	r21, r21
 b80:	32 d0       	rcall	.+100    	; 0xbe6 <ldexp>
 b82:	0f 90       	pop	r0
 b84:	07 fe       	sbrs	r0, 7
 b86:	26 c0       	rjmp	.+76     	; 0xbd4 <inverse>
 b88:	08 95       	ret

00000b8a <__fp_powser>:
 b8a:	df 93       	push	r29
 b8c:	cf 93       	push	r28
 b8e:	1f 93       	push	r17
 b90:	0f 93       	push	r16
 b92:	ff 92       	push	r15
 b94:	ef 92       	push	r14
 b96:	df 92       	push	r13
 b98:	7b 01       	movw	r14, r22
 b9a:	8c 01       	movw	r16, r24
 b9c:	68 94       	set
 b9e:	05 c0       	rjmp	.+10     	; 0xbaa <__fp_powser+0x20>
 ba0:	da 2e       	mov	r13, r26
 ba2:	ef 01       	movw	r28, r30
 ba4:	1e df       	rcall	.-452    	; 0x9e2 <__mulsf3x>
 ba6:	fe 01       	movw	r30, r28
 ba8:	e8 94       	clt
 baa:	a5 91       	lpm	r26, Z+
 bac:	25 91       	lpm	r18, Z+
 bae:	35 91       	lpm	r19, Z+
 bb0:	45 91       	lpm	r20, Z+
 bb2:	55 91       	lpm	r21, Z+
 bb4:	ae f3       	brts	.-22     	; 0xba0 <__fp_powser+0x16>
 bb6:	ef 01       	movw	r28, r30
 bb8:	8e dd       	rcall	.-1252   	; 0x6d6 <__addsf3x>
 bba:	fe 01       	movw	r30, r28
 bbc:	97 01       	movw	r18, r14
 bbe:	a8 01       	movw	r20, r16
 bc0:	da 94       	dec	r13
 bc2:	79 f7       	brne	.-34     	; 0xba2 <__fp_powser+0x18>
 bc4:	df 90       	pop	r13
 bc6:	ef 90       	pop	r14
 bc8:	ff 90       	pop	r15
 bca:	0f 91       	pop	r16
 bcc:	1f 91       	pop	r17
 bce:	cf 91       	pop	r28
 bd0:	df 91       	pop	r29
 bd2:	08 95       	ret

00000bd4 <inverse>:
 bd4:	9b 01       	movw	r18, r22
 bd6:	ac 01       	movw	r20, r24
 bd8:	60 e0       	ldi	r22, 0x00	; 0
 bda:	70 e0       	ldi	r23, 0x00	; 0
 bdc:	80 e8       	ldi	r24, 0x80	; 128
 bde:	9f e3       	ldi	r25, 0x3F	; 63
 be0:	cd cd       	rjmp	.-1126   	; 0x77c <__divsf3>
 be2:	a2 ce       	rjmp	.-700    	; 0x928 <__fp_inf>
 be4:	ac c0       	rjmp	.+344    	; 0xd3e <__fp_mpack>

00000be6 <ldexp>:
 be6:	d0 de       	rcall	.-608    	; 0x988 <__fp_splitA>
 be8:	e8 f3       	brcs	.-6      	; 0xbe4 <inverse+0x10>
 bea:	99 23       	and	r25, r25
 bec:	d9 f3       	breq	.-10     	; 0xbe4 <inverse+0x10>
 bee:	94 0f       	add	r25, r20
 bf0:	51 1d       	adc	r21, r1
 bf2:	bb f3       	brvs	.-18     	; 0xbe2 <inverse+0xe>
 bf4:	91 50       	subi	r25, 0x01	; 1
 bf6:	50 40       	sbci	r21, 0x00	; 0
 bf8:	94 f0       	brlt	.+36     	; 0xc1e <ldexp+0x38>
 bfa:	59 f0       	breq	.+22     	; 0xc12 <ldexp+0x2c>
 bfc:	88 23       	and	r24, r24
 bfe:	32 f0       	brmi	.+12     	; 0xc0c <ldexp+0x26>
 c00:	66 0f       	add	r22, r22
 c02:	77 1f       	adc	r23, r23
 c04:	88 1f       	adc	r24, r24
 c06:	91 50       	subi	r25, 0x01	; 1
 c08:	50 40       	sbci	r21, 0x00	; 0
 c0a:	c1 f7       	brne	.-16     	; 0xbfc <ldexp+0x16>
 c0c:	9e 3f       	cpi	r25, 0xFE	; 254
 c0e:	51 05       	cpc	r21, r1
 c10:	44 f7       	brge	.-48     	; 0xbe2 <inverse+0xe>
 c12:	88 0f       	add	r24, r24
 c14:	91 1d       	adc	r25, r1
 c16:	96 95       	lsr	r25
 c18:	87 95       	ror	r24
 c1a:	97 f9       	bld	r25, 7
 c1c:	08 95       	ret
 c1e:	5f 3f       	cpi	r21, 0xFF	; 255
 c20:	ac f0       	brlt	.+42     	; 0xc4c <ldexp+0x66>
 c22:	98 3e       	cpi	r25, 0xE8	; 232
 c24:	9c f0       	brlt	.+38     	; 0xc4c <ldexp+0x66>
 c26:	bb 27       	eor	r27, r27
 c28:	86 95       	lsr	r24
 c2a:	77 95       	ror	r23
 c2c:	67 95       	ror	r22
 c2e:	b7 95       	ror	r27
 c30:	08 f4       	brcc	.+2      	; 0xc34 <ldexp+0x4e>
 c32:	b1 60       	ori	r27, 0x01	; 1
 c34:	93 95       	inc	r25
 c36:	c1 f7       	brne	.-16     	; 0xc28 <ldexp+0x42>
 c38:	bb 0f       	add	r27, r27
 c3a:	58 f7       	brcc	.-42     	; 0xc12 <ldexp+0x2c>
 c3c:	11 f4       	brne	.+4      	; 0xc42 <ldexp+0x5c>
 c3e:	60 ff       	sbrs	r22, 0
 c40:	e8 cf       	rjmp	.-48     	; 0xc12 <ldexp+0x2c>
 c42:	6f 5f       	subi	r22, 0xFF	; 255
 c44:	7f 4f       	sbci	r23, 0xFF	; 255
 c46:	8f 4f       	sbci	r24, 0xFF	; 255
 c48:	9f 4f       	sbci	r25, 0xFF	; 255
 c4a:	e3 cf       	rjmp	.-58     	; 0xc12 <ldexp+0x2c>
 c4c:	b8 ce       	rjmp	.-656    	; 0x9be <__fp_szero>
 c4e:	0e f0       	brts	.+2      	; 0xc52 <ldexp+0x6c>
 c50:	76 c0       	rjmp	.+236    	; 0xd3e <__fp_mpack>
 c52:	70 ce       	rjmp	.-800    	; 0x934 <__fp_nan>
 c54:	68 94       	set
 c56:	68 ce       	rjmp	.-816    	; 0x928 <__fp_inf>

00000c58 <log>:
 c58:	97 de       	rcall	.-722    	; 0x988 <__fp_splitA>
 c5a:	c8 f3       	brcs	.-14     	; 0xc4e <ldexp+0x68>
 c5c:	99 23       	and	r25, r25
 c5e:	d1 f3       	breq	.-12     	; 0xc54 <ldexp+0x6e>
 c60:	c6 f3       	brts	.-16     	; 0xc52 <ldexp+0x6c>
 c62:	df 93       	push	r29
 c64:	cf 93       	push	r28
 c66:	1f 93       	push	r17
 c68:	0f 93       	push	r16
 c6a:	ff 92       	push	r15
 c6c:	c9 2f       	mov	r28, r25
 c6e:	dd 27       	eor	r29, r29
 c70:	88 23       	and	r24, r24
 c72:	2a f0       	brmi	.+10     	; 0xc7e <log+0x26>
 c74:	21 97       	sbiw	r28, 0x01	; 1
 c76:	66 0f       	add	r22, r22
 c78:	77 1f       	adc	r23, r23
 c7a:	88 1f       	adc	r24, r24
 c7c:	da f7       	brpl	.-10     	; 0xc74 <log+0x1c>
 c7e:	20 e0       	ldi	r18, 0x00	; 0
 c80:	30 e0       	ldi	r19, 0x00	; 0
 c82:	40 e8       	ldi	r20, 0x80	; 128
 c84:	5f eb       	ldi	r21, 0xBF	; 191
 c86:	9f e3       	ldi	r25, 0x3F	; 63
 c88:	88 39       	cpi	r24, 0x98	; 152
 c8a:	20 f0       	brcs	.+8      	; 0xc94 <log+0x3c>
 c8c:	80 3e       	cpi	r24, 0xE0	; 224
 c8e:	30 f0       	brcs	.+12     	; 0xc9c <log+0x44>
 c90:	21 96       	adiw	r28, 0x01	; 1
 c92:	8f 77       	andi	r24, 0x7F	; 127
 c94:	0f dd       	rcall	.-1506   	; 0x6b4 <__addsf3>
 c96:	ea ed       	ldi	r30, 0xDA	; 218
 c98:	f0 e0       	ldi	r31, 0x00	; 0
 c9a:	03 c0       	rjmp	.+6      	; 0xca2 <log+0x4a>
 c9c:	0b dd       	rcall	.-1514   	; 0x6b4 <__addsf3>
 c9e:	e7 e0       	ldi	r30, 0x07	; 7
 ca0:	f1 e0       	ldi	r31, 0x01	; 1
 ca2:	73 df       	rcall	.-282    	; 0xb8a <__fp_powser>
 ca4:	8b 01       	movw	r16, r22
 ca6:	be 01       	movw	r22, r28
 ca8:	ec 01       	movw	r28, r24
 caa:	fb 2e       	mov	r15, r27
 cac:	6f 57       	subi	r22, 0x7F	; 127
 cae:	71 09       	sbc	r23, r1
 cb0:	75 95       	asr	r23
 cb2:	77 1f       	adc	r23, r23
 cb4:	88 0b       	sbc	r24, r24
 cb6:	99 0b       	sbc	r25, r25
 cb8:	fc dd       	rcall	.-1032   	; 0x8b2 <__floatsisf>
 cba:	28 e1       	ldi	r18, 0x18	; 24
 cbc:	32 e7       	ldi	r19, 0x72	; 114
 cbe:	41 e3       	ldi	r20, 0x31	; 49
 cc0:	5f e3       	ldi	r21, 0x3F	; 63
 cc2:	8f de       	rcall	.-738    	; 0x9e2 <__mulsf3x>
 cc4:	af 2d       	mov	r26, r15
 cc6:	98 01       	movw	r18, r16
 cc8:	ae 01       	movw	r20, r28
 cca:	ff 90       	pop	r15
 ccc:	0f 91       	pop	r16
 cce:	1f 91       	pop	r17
 cd0:	cf 91       	pop	r28
 cd2:	df 91       	pop	r29
 cd4:	00 dd       	rcall	.-1536   	; 0x6d6 <__addsf3x>
 cd6:	3f ce       	rjmp	.-898    	; 0x956 <__fp_round>

00000cd8 <modf>:
 cd8:	fa 01       	movw	r30, r20
 cda:	dc 01       	movw	r26, r24
 cdc:	aa 0f       	add	r26, r26
 cde:	bb 1f       	adc	r27, r27
 ce0:	9b 01       	movw	r18, r22
 ce2:	ac 01       	movw	r20, r24
 ce4:	bf 57       	subi	r27, 0x7F	; 127
 ce6:	28 f4       	brcc	.+10     	; 0xcf2 <modf+0x1a>
 ce8:	22 27       	eor	r18, r18
 cea:	33 27       	eor	r19, r19
 cec:	44 27       	eor	r20, r20
 cee:	50 78       	andi	r21, 0x80	; 128
 cf0:	1f c0       	rjmp	.+62     	; 0xd30 <modf+0x58>
 cf2:	b7 51       	subi	r27, 0x17	; 23
 cf4:	88 f4       	brcc	.+34     	; 0xd18 <modf+0x40>
 cf6:	ab 2f       	mov	r26, r27
 cf8:	00 24       	eor	r0, r0
 cfa:	46 95       	lsr	r20
 cfc:	37 95       	ror	r19
 cfe:	27 95       	ror	r18
 d00:	01 1c       	adc	r0, r1
 d02:	a3 95       	inc	r26
 d04:	d2 f3       	brmi	.-12     	; 0xcfa <modf+0x22>
 d06:	00 20       	and	r0, r0
 d08:	69 f0       	breq	.+26     	; 0xd24 <modf+0x4c>
 d0a:	22 0f       	add	r18, r18
 d0c:	33 1f       	adc	r19, r19
 d0e:	44 1f       	adc	r20, r20
 d10:	b3 95       	inc	r27
 d12:	da f3       	brmi	.-10     	; 0xd0a <modf+0x32>
 d14:	0d d0       	rcall	.+26     	; 0xd30 <modf+0x58>
 d16:	cd cc       	rjmp	.-1638   	; 0x6b2 <__subsf3>
 d18:	61 30       	cpi	r22, 0x01	; 1
 d1a:	71 05       	cpc	r23, r1
 d1c:	a0 e8       	ldi	r26, 0x80	; 128
 d1e:	8a 07       	cpc	r24, r26
 d20:	b9 46       	sbci	r27, 0x69	; 105
 d22:	30 f4       	brcc	.+12     	; 0xd30 <modf+0x58>
 d24:	9b 01       	movw	r18, r22
 d26:	ac 01       	movw	r20, r24
 d28:	66 27       	eor	r22, r22
 d2a:	77 27       	eor	r23, r23
 d2c:	88 27       	eor	r24, r24
 d2e:	90 78       	andi	r25, 0x80	; 128
 d30:	30 96       	adiw	r30, 0x00	; 0
 d32:	21 f0       	breq	.+8      	; 0xd3c <modf+0x64>
 d34:	20 83       	st	Z, r18
 d36:	31 83       	std	Z+1, r19	; 0x01
 d38:	42 83       	std	Z+2, r20	; 0x02
 d3a:	53 83       	std	Z+3, r21	; 0x03
 d3c:	08 95       	ret

00000d3e <__fp_mpack>:
 d3e:	9f 3f       	cpi	r25, 0xFF	; 255
 d40:	31 f0       	breq	.+12     	; 0xd4e <__fp_mpack_finite+0xc>

00000d42 <__fp_mpack_finite>:
 d42:	91 50       	subi	r25, 0x01	; 1
 d44:	20 f4       	brcc	.+8      	; 0xd4e <__fp_mpack_finite+0xc>
 d46:	87 95       	ror	r24
 d48:	77 95       	ror	r23
 d4a:	67 95       	ror	r22
 d4c:	b7 95       	ror	r27
 d4e:	88 0f       	add	r24, r24
 d50:	91 1d       	adc	r25, r1
 d52:	96 95       	lsr	r25
 d54:	87 95       	ror	r24
 d56:	97 f9       	bld	r25, 7
 d58:	08 95       	ret

00000d5a <__tablejump2__>:
 d5a:	ee 0f       	add	r30, r30
 d5c:	ff 1f       	adc	r31, r31
 d5e:	00 24       	eor	r0, r0
 d60:	00 1c       	adc	r0, r0
 d62:	0b be       	out	0x3b, r0	; 59
 d64:	07 90       	elpm	r0, Z+
 d66:	f6 91       	elpm	r31, Z
 d68:	e0 2d       	mov	r30, r0
 d6a:	09 94       	ijmp

00000d6c <_exit>:
 d6c:	f8 94       	cli

00000d6e <__stop_program>:
 d6e:	ff cf       	rjmp	.-2      	; 0xd6e <__stop_program>
