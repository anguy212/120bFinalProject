
lab10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800100  00001fdc  00002070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007a  00800228  00800228  00002198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00002208  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002560  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bba  00000000  00000000  00004928  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001640  00000000  00000000  000054e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00006b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c0  00000000  00000000  00006e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000147f  00000000  00000000  000076e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00008b5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ac c0       	rjmp	.+344    	; 0x15a <__ctors_end>
       2:	00 00       	nop
       4:	c9 c0       	rjmp	.+402    	; 0x198 <__bad_interrupt>
       6:	00 00       	nop
       8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
       a:	00 00       	nop
       c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
       e:	00 00       	nop
      10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
      12:	00 00       	nop
      14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
      16:	00 00       	nop
      18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
      26:	00 00       	nop
      28:	b7 c0       	rjmp	.+366    	; 0x198 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b5 c0       	rjmp	.+362    	; 0x198 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
      32:	00 00       	nop
      34:	18 c1       	rjmp	.+560    	; 0x266 <__vector_13>
      36:	00 00       	nop
      38:	af c0       	rjmp	.+350    	; 0x198 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
      42:	00 00       	nop
      44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
      46:	00 00       	nop
      48:	a7 c0       	rjmp	.+334    	; 0x198 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a5 c0       	rjmp	.+330    	; 0x198 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
      52:	00 00       	nop
      54:	a1 c0       	rjmp	.+322    	; 0x198 <__bad_interrupt>
      56:	00 00       	nop
      58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
      62:	00 00       	nop
      64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
      66:	00 00       	nop
      68:	97 c0       	rjmp	.+302    	; 0x198 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	95 c0       	rjmp	.+298    	; 0x198 <__bad_interrupt>
      6e:	00 00       	nop
      70:	93 c0       	rjmp	.+294    	; 0x198 <__bad_interrupt>
      72:	00 00       	nop
      74:	91 c0       	rjmp	.+290    	; 0x198 <__bad_interrupt>
      76:	00 00       	nop
      78:	8f c0       	rjmp	.+286    	; 0x198 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8d c0       	rjmp	.+282    	; 0x198 <__bad_interrupt>
      7e:	00 00       	nop
      80:	8b c0       	rjmp	.+278    	; 0x198 <__bad_interrupt>
      82:	00 00       	nop
      84:	89 c0       	rjmp	.+274    	; 0x198 <__bad_interrupt>
      86:	00 00       	nop
      88:	87 c0       	rjmp	.+270    	; 0x198 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	46 02       	muls	r20, r22
      8e:	48 02       	muls	r20, r24
      90:	4a 02       	muls	r20, r26
      92:	4c 02       	muls	r20, r28
      94:	4e 02       	muls	r20, r30
      96:	50 02       	muls	r21, r16
      98:	52 02       	muls	r21, r18
      9a:	54 02       	muls	r21, r20
      9c:	56 02       	muls	r21, r22
      9e:	77 02       	muls	r23, r23
      a0:	63 02       	muls	r22, r19
      a2:	65 02       	muls	r22, r21
      a4:	67 02       	muls	r22, r23
      a6:	69 02       	muls	r22, r25
      a8:	6b 02       	muls	r22, r27
      aa:	6d 02       	muls	r22, r29
      ac:	6f 02       	muls	r22, r31
      ae:	71 02       	muls	r23, r17
      b0:	73 02       	muls	r23, r19
      b2:	56 07       	cpc	r21, r22
      b4:	be 03       	fmulsu	r19, r22
      b6:	dc 03       	fmulsu	r21, r20
      b8:	69 05       	cpc	r22, r9
      ba:	59 07       	cpc	r21, r25
      bc:	a1 05       	cpc	r26, r1
      be:	de 05       	cpc	r29, r14
      c0:	ac 05       	cpc	r26, r12
      c2:	c5 05       	cpc	r28, r5
      c4:	c5 05       	cpc	r28, r5
      c6:	b7 0a       	sbc	r11, r23
      c8:	8f 07       	cpc	r24, r31
      ca:	ab 07       	cpc	r26, r27
      cc:	28 09       	sbc	r18, r8
      ce:	3e 09       	sbc	r19, r14
      d0:	4c 09       	sbc	r20, r12
      d2:	63 09       	sbc	r22, r3
      d4:	69 09       	sbc	r22, r9
      d6:	77 09       	sbc	r23, r7
      d8:	07 63       	ori	r16, 0x37	; 55
      da:	42 36       	cpi	r20, 0x62	; 98
      dc:	b7 9b       	sbis	0x16, 7	; 22
      de:	d8 a7       	std	Y+40, r29	; 0x28
      e0:	1a 39       	cpi	r17, 0x9A	; 154
      e2:	68 56       	subi	r22, 0x68	; 104
      e4:	18 ae       	std	Y+56, r1	; 0x38
      e6:	ba ab       	std	Y+50, r27	; 0x32
      e8:	55 8c       	ldd	r5, Z+29	; 0x1d
      ea:	1d 3c       	cpi	r17, 0xCD	; 205
      ec:	b7 cc       	rjmp	.-1682   	; 0xfffffa5c <__eeprom_end+0xff7efa5c>
      ee:	57 63       	ori	r21, 0x37	; 55
      f0:	bd 6d       	ori	r27, 0xDD	; 221
      f2:	ed fd       	.word	0xfded	; ????
      f4:	75 3e       	cpi	r23, 0xE5	; 229
      f6:	f6 17       	cp	r31, r22
      f8:	72 31       	cpi	r23, 0x12	; 18
      fa:	bf 00       	.word	0x00bf	; ????
      fc:	00 00       	nop
      fe:	80 3f       	cpi	r24, 0xF0	; 240
     100:	08 00       	.word	0x0008	; ????
     102:	00 00       	nop
     104:	be 92       	st	-X, r11
     106:	24 49       	sbci	r18, 0x94	; 148
     108:	12 3e       	cpi	r17, 0xE2	; 226
     10a:	ab aa       	std	Y+51, r10	; 0x33
     10c:	aa 2a       	or	r10, r26
     10e:	be cd       	rjmp	.-1156   	; 0xfffffc8c <__eeprom_end+0xff7efc8c>
     110:	cc cc       	rjmp	.-1640   	; 0xfffffaaa <__eeprom_end+0xff7efaaa>
     112:	4c 3e       	cpi	r20, 0xEC	; 236
     114:	00 00       	nop
     116:	00 80       	ld	r0, Z
     118:	be ab       	std	Y+54, r27	; 0x36
     11a:	aa aa       	std	Y+50, r10	; 0x32
     11c:	aa 3e       	cpi	r26, 0xEA	; 234
     11e:	00 00       	nop
     120:	00 00       	nop
     122:	bf 00       	.word	0x00bf	; ????
     124:	00 00       	nop
     126:	80 3f       	cpi	r24, 0xF0	; 240
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	00 08       	sbc	r0, r0
     12e:	41 78       	andi	r20, 0x81	; 129
     130:	d3 bb       	out	0x13, r29	; 19
     132:	43 87       	std	Z+11, r20	; 0x0b
     134:	d1 13       	cpse	r29, r17
     136:	3d 19       	sub	r19, r13
     138:	0e 3c       	cpi	r16, 0xCE	; 206
     13a:	c3 bd       	out	0x23, r28	; 35
     13c:	42 82       	std	Z+2, r4	; 0x02
     13e:	ad 2b       	or	r26, r29
     140:	3e 68       	ori	r19, 0x8E	; 142
     142:	ec 82       	std	Y+4, r14	; 0x04
     144:	76 be       	out	0x36, r7	; 54
     146:	d9 8f       	std	Y+25, r29	; 0x19
     148:	e1 a9       	ldd	r30, Z+49	; 0x31
     14a:	3e 4c       	sbci	r19, 0xCE	; 206
     14c:	80 ef       	ldi	r24, 0xF0	; 240
     14e:	ff be       	out	0x3f, r15	; 63
     150:	01 c4       	rjmp	.+2050   	; 0x954 <trans+0x20c>
     152:	ff 7f       	andi	r31, 0xFF	; 255
     154:	3f 00       	.word	0x003f	; ????
     156:	00 00       	nop
	...

0000015a <__ctors_end>:
     15a:	11 24       	eor	r1, r1
     15c:	1f be       	out	0x3f, r1	; 63
     15e:	cf ef       	ldi	r28, 0xFF	; 255
     160:	d0 e4       	ldi	r29, 0x40	; 64
     162:	de bf       	out	0x3e, r29	; 62
     164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_copy_data>:
     166:	12 e0       	ldi	r17, 0x02	; 2
     168:	a0 e0       	ldi	r26, 0x00	; 0
     16a:	b1 e0       	ldi	r27, 0x01	; 1
     16c:	ec ed       	ldi	r30, 0xDC	; 220
     16e:	ff e1       	ldi	r31, 0x1F	; 31
     170:	00 e0       	ldi	r16, 0x00	; 0
     172:	0b bf       	out	0x3b, r16	; 59
     174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x14>
     176:	07 90       	elpm	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	a8 32       	cpi	r26, 0x28	; 40
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0x10>

00000180 <__do_clear_bss>:
     180:	22 e0       	ldi	r18, 0x02	; 2
     182:	a8 e2       	ldi	r26, 0x28	; 40
     184:	b2 e0       	ldi	r27, 0x02	; 2
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	a2 3a       	cpi	r26, 0xA2	; 162
     18c:	b2 07       	cpc	r27, r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 57 0b 	call	0x16ae	; 0x16ae <main>
     194:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <_exit>

00000198 <__bad_interrupt>:
     198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <JoyTick>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
     19a:	21 e0       	ldi	r18, 0x01	; 1
     19c:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     1a0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     1a4:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1a8:	30 93 6b 02 	sts	0x026B, r19	; 0x80026b <stickInput.2346+0x1>
     1ac:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <stickInput.2346>
     1b0:	e7 e8       	ldi	r30, 0x87	; 135
     1b2:	f3 e1       	ldi	r31, 0x13	; 19
     1b4:	31 97       	sbiw	r30, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <JoyTick+0x1a>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <JoyTick+0x20>
     1ba:	00 00       	nop
     1bc:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <stickInput.2346>
     1c0:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <stickInput.2346+0x1>
     1c4:	a9 01       	movw	r20, r18
     1c6:	41 50       	subi	r20, 0x01	; 1
     1c8:	51 09       	sbc	r21, r1
     1ca:	43 36       	cpi	r20, 0x63	; 99
     1cc:	51 05       	cpc	r21, r1
     1ce:	40 f4       	brcc	.+16     	; 0x1e0 <JoyTick+0x46>
     1d0:	40 91 7c 00 	lds	r20, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     1d4:	41 30       	cpi	r20, 0x01	; 1
     1d6:	21 f4       	brne	.+8      	; 0x1e0 <JoyTick+0x46>
     1d8:	21 e0       	ldi	r18, 0x01	; 1
     1da:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <joy>
     1de:	08 95       	ret
     1e0:	25 38       	cpi	r18, 0x85	; 133
     1e2:	33 40       	sbci	r19, 0x03	; 3
     1e4:	40 f0       	brcs	.+16     	; 0x1f6 <JoyTick+0x5c>
     1e6:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     1ea:	21 30       	cpi	r18, 0x01	; 1
     1ec:	21 f4       	brne	.+8      	; 0x1f6 <JoyTick+0x5c>
     1ee:	22 e0       	ldi	r18, 0x02	; 2
     1f0:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <joy>
     1f4:	08 95       	ret
     1f6:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <joy>
     1fa:	08 95       	ret

000001fc <TimerSet>:
     1fc:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     200:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     204:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     208:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     20c:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <_avr_timer_cntcurr>
     210:	70 93 97 02 	sts	0x0297, r23	; 0x800297 <_avr_timer_cntcurr+0x1>
     214:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <_avr_timer_cntcurr+0x2>
     218:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <_avr_timer_cntcurr+0x3>
     21c:	08 95       	ret

0000021e <TimerOn>:
     21e:	8b e0       	ldi	r24, 0x0B	; 11
     220:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     224:	8d e7       	ldi	r24, 0x7D	; 125
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     22c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     236:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     23a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     23e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     242:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     246:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     24a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     24e:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <_avr_timer_cntcurr>
     252:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <_avr_timer_cntcurr+0x1>
     256:	a0 93 98 02 	sts	0x0298, r26	; 0x800298 <_avr_timer_cntcurr+0x2>
     25a:	b0 93 99 02 	sts	0x0299, r27	; 0x800299 <_avr_timer_cntcurr+0x3>
     25e:	8f b7       	in	r24, 0x3f	; 63
     260:	80 68       	ori	r24, 0x80	; 128
     262:	8f bf       	out	0x3f, r24	; 63
     264:	08 95       	ret

00000266 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     266:	1f 92       	push	r1
     268:	0f 92       	push	r0
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	0f 92       	push	r0
     26e:	11 24       	eor	r1, r1
     270:	8f 93       	push	r24
     272:	9f 93       	push	r25
     274:	af 93       	push	r26
     276:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     278:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_avr_timer_cntcurr>
     27c:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <_avr_timer_cntcurr+0x1>
     280:	a0 91 98 02 	lds	r26, 0x0298	; 0x800298 <_avr_timer_cntcurr+0x2>
     284:	b0 91 99 02 	lds	r27, 0x0299	; 0x800299 <_avr_timer_cntcurr+0x3>
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	a1 09       	sbc	r26, r1
     28c:	b1 09       	sbc	r27, r1
     28e:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <_avr_timer_cntcurr>
     292:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <_avr_timer_cntcurr+0x1>
     296:	a0 93 98 02 	sts	0x0298, r26	; 0x800298 <_avr_timer_cntcurr+0x2>
     29a:	b0 93 99 02 	sts	0x0299, r27	; 0x800299 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     29e:	89 2b       	or	r24, r25
     2a0:	8a 2b       	or	r24, r26
     2a2:	8b 2b       	or	r24, r27
     2a4:	99 f4       	brne	.+38     	; 0x2cc <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
     2ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     2b4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     2b8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     2bc:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <_avr_timer_cntcurr>
     2c0:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <_avr_timer_cntcurr+0x1>
     2c4:	a0 93 98 02 	sts	0x0298, r26	; 0x800298 <_avr_timer_cntcurr+0x2>
     2c8:	b0 93 99 02 	sts	0x0299, r27	; 0x800299 <_avr_timer_cntcurr+0x3>
	}
}
     2cc:	bf 91       	pop	r27
     2ce:	af 91       	pop	r26
     2d0:	9f 91       	pop	r25
     2d2:	8f 91       	pop	r24
     2d4:	0f 90       	pop	r0
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	0f 90       	pop	r0
     2da:	1f 90       	pop	r1
     2dc:	18 95       	reti

000002de <delay_ms>:
}

void delay_ms(int miliSec) //for 8 Mhz crystal
{
	int i,j;
	for(i=0;i<miliSec;i++)
     2de:	18 16       	cp	r1, r24
     2e0:	19 06       	cpc	r1, r25
     2e2:	5c f0       	brlt	.+22     	; 0x2fa <delay_ms+0x1c>
     2e4:	08 95       	ret
	for(j=0;j<775;j++)
	{
		asm("nop");
     2e6:	00 00       	nop
     2e8:	21 50       	subi	r18, 0x01	; 1
     2ea:	31 09       	sbc	r19, r1

void delay_ms(int miliSec) //for 8 Mhz crystal
{
	int i,j;
	for(i=0;i<miliSec;i++)
	for(j=0;j<775;j++)
     2ec:	e1 f7       	brne	.-8      	; 0x2e6 <delay_ms+0x8>
}

void delay_ms(int miliSec) //for 8 Mhz crystal
{
	int i,j;
	for(i=0;i<miliSec;i++)
     2ee:	4f 5f       	subi	r20, 0xFF	; 255
     2f0:	5f 4f       	sbci	r21, 0xFF	; 255
     2f2:	84 17       	cp	r24, r20
     2f4:	95 07       	cpc	r25, r21
     2f6:	19 f4       	brne	.+6      	; 0x2fe <delay_ms+0x20>
     2f8:	08 95       	ret
     2fa:	40 e0       	ldi	r20, 0x00	; 0
     2fc:	50 e0       	ldi	r21, 0x00	; 0
		// 16x2 LCD: column - 9
	}
}

void delay_ms(int miliSec) //for 8 Mhz crystal
{
     2fe:	27 e0       	ldi	r18, 0x07	; 7
     300:	33 e0       	ldi	r19, 0x03	; 3
     302:	f1 cf       	rjmp	.-30     	; 0x2e6 <delay_ms+0x8>

00000304 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);
}

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
     304:	58 98       	cbi	0x0b, 0	; 11
	DATA_BUS = Command;
     306:	85 b9       	out	0x05, r24	; 5
	SET_BIT(CONTROL_BUS,E);
     308:	59 9a       	sbi	0x0b, 1	; 11
	asm("nop");
     30a:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
     30c:	59 98       	cbi	0x0b, 1	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
     30e:	82 e0       	ldi	r24, 0x02	; 2
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	e5 cf       	rjmp	.-54     	; 0x2de <delay_ms>
     314:	08 95       	ret

00000316 <LCD_ClearScreen>:
#define E 1		// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	f5 cf       	rjmp	.-22     	; 0x304 <LCD_WriteCommand>
     31a:	08 95       	ret

0000031c <LCD_Cursor>:
	}
	LCD_WriteCommand(0x80); //shift back to DDRAM location 0
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x1 LCD: column < 9
     31c:	81 31       	cpi	r24, 0x11	; 17
     31e:	18 f4       	brcc	.+6      	; 0x326 <LCD_Cursor+0xa>
		// 16x2 LCD: column < 17
		LCD_WriteCommand(0x80 + column - 1);
     320:	81 58       	subi	r24, 0x81	; 129
     322:	f0 cf       	rjmp	.-32     	; 0x304 <LCD_WriteCommand>
     324:	08 95       	ret
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
     326:	81 55       	subi	r24, 0x51	; 81
     328:	ed cf       	rjmp	.-38     	; 0x304 <LCD_WriteCommand>
     32a:	08 95       	ret

0000032c <LCD_init>:
}

void LCD_init(void) {

	//wait for 100 ms.
	delay_ms(100);
     32c:	84 e6       	ldi	r24, 0x64	; 100
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	d6 df       	rcall	.-84     	; 0x2de <delay_ms>
	LCD_WriteCommand(0x38);
     332:	88 e3       	ldi	r24, 0x38	; 56
     334:	e7 df       	rcall	.-50     	; 0x304 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
     336:	86 e0       	ldi	r24, 0x06	; 6
     338:	e5 df       	rcall	.-54     	; 0x304 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
     33a:	8f e0       	ldi	r24, 0x0F	; 15
     33c:	e3 df       	rcall	.-58     	; 0x304 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	e1 df       	rcall	.-62     	; 0x304 <LCD_WriteCommand>
	delay_ms(10);
     342:	8a e0       	ldi	r24, 0x0A	; 10
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	cb cf       	rjmp	.-106    	; 0x2de <delay_ms>
     348:	08 95       	ret

0000034a <LCD_WriteData>:
     34a:	58 9a       	sbi	0x0b, 0	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
     34c:	85 b9       	out	0x05, r24	; 5
	SET_BIT(CONTROL_BUS,E);
     34e:	59 9a       	sbi	0x0b, 1	; 11
	asm("nop");
     350:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
     352:	59 98       	cbi	0x0b, 1	; 11
	delay_ms(1);
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	c2 cf       	rjmp	.-124    	; 0x2de <delay_ms>
     35a:	08 95       	ret

0000035c <LCDcustomChar>:
}

void LCDcustomChar(unsigned char column, unsigned char *p)
{
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	8b 01       	movw	r16, r22
	unsigned char i;
	if(column<8) //If valid address
     366:	88 30       	cpi	r24, 0x08	; 8
     368:	68 f4       	brcc	.+26     	; 0x384 <LCDcustomChar+0x28>
	{
		LCD_WriteCommand(0x40+(column*8)); //Write to CGRAM
     36a:	88 0f       	add	r24, r24
     36c:	88 0f       	add	r24, r24
     36e:	88 0f       	add	r24, r24
     370:	80 5c       	subi	r24, 0xC0	; 192
     372:	c8 df       	rcall	.-112    	; 0x304 <LCD_WriteCommand>
     374:	e8 01       	movw	r28, r16
     376:	08 5f       	subi	r16, 0xF8	; 248
     378:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
     37a:	89 91       	ld	r24, Y+
     37c:	e6 df       	rcall	.-52     	; 0x34a <LCD_WriteData>
{
	unsigned char i;
	if(column<8) //If valid address
	{
		LCD_WriteCommand(0x40+(column*8)); //Write to CGRAM
		for(i=0;i<8;i++)
     37e:	c0 17       	cp	r28, r16
     380:	d1 07       	cpc	r29, r17
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
	}
	LCD_WriteCommand(0x80); //shift back to DDRAM location 0
     382:	d9 f7       	brne	.-10     	; 0x37a <LCDcustomChar+0x1e>
     384:	80 e8       	ldi	r24, 0x80	; 128
     386:	be df       	rcall	.-132    	; 0x304 <LCD_WriteCommand>
}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	08 95       	ret

00000392 <LCD_DisplayString>:
	{
		asm("nop");
	}
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	18 2f       	mov	r17, r24
     39c:	eb 01       	movw	r28, r22
	LCD_ClearScreen();
     39e:	bb df       	rcall	.-138    	; 0x316 <LCD_ClearScreen>
	unsigned char c = column;
	while(*string) {
     3a0:	88 81       	ld	r24, Y
     3a2:	88 23       	and	r24, r24
     3a4:	51 f0       	breq	.+20     	; 0x3ba <LCD_DisplayString+0x28>
		LCD_Cursor(c++);
     3a6:	01 e0       	ldi	r16, 0x01	; 1
     3a8:	01 0f       	add	r16, r17
     3aa:	81 2f       	mov	r24, r17
     3ac:	b7 df       	rcall	.-146    	; 0x31c <LCD_Cursor>
		LCD_WriteData(*string++);
     3ae:	89 91       	ld	r24, Y+
     3b0:	cc df       	rcall	.-104    	; 0x34a <LCD_WriteData>
     3b2:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
     3b4:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
     3b6:	81 11       	cpse	r24, r1
     3b8:	f6 cf       	rjmp	.-20     	; 0x3a6 <LCD_DisplayString+0x14>
     3ba:	df 91       	pop	r29
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	08 95       	ret

000003c4 <Menu>:
     3c4:	81 30       	cpi	r24, 0x01	; 1
	return state;
}

int Menu(int state)
{
	switch(state)
     3c6:	91 05       	cpc	r25, r1
     3c8:	59 f0       	breq	.+22     	; 0x3e0 <Menu+0x1c>
     3ca:	24 f4       	brge	.+8      	; 0x3d4 <Menu+0x10>
     3cc:	89 2b       	or	r24, r25
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <Menu+0xe>
     3d0:	44 c0       	rjmp	.+136    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     3d2:	4c c0       	rjmp	.+152    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     3d4:	82 30       	cpi	r24, 0x02	; 2
     3d6:	91 05       	cpc	r25, r1
     3d8:	49 f0       	breq	.+18     	; 0x3ec <Menu+0x28>
     3da:	03 97       	sbiw	r24, 0x03	; 3
     3dc:	71 f0       	breq	.+28     	; 0x3fa <Menu+0x36>
     3de:	46 c0       	rjmp	.+140    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			state = pauseM;
			break;
		}
		case pauseM:
		{
			if(pos == 1)
     3e0:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <pos>
     3e4:	21 30       	cpi	r18, 0x01	; 1
     3e6:	09 f0       	breq	.+2      	; 0x3ea <Menu+0x26>
     3e8:	46 c0       	rjmp	.+140    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     3ea:	0b c0       	rjmp	.+22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			}
			break;
		}
		case transaction:
		{
			if(pos == 1)
     3ec:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <pos>
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	e9 f0       	breq	.+58     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			{
				state = settings;
			}
			else
			{
				state = pauseM;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	08 95       	ret
			}
			break;
		}
		case settings:
		{
			if(pos == 1)
     3fa:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <pos>
     3fe:	81 30       	cpi	r24, 0x01	; 1
     400:	c1 f5       	brne	.+112    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		{
			break;
		}
		case transaction:
		{
			LCD_DisplayString(1, "A. Transactions");
     402:	60 e2       	ldi	r22, 0x20	; 32
     404:	71 e0       	ldi	r23, 0x01	; 1
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	c4 df       	rcall	.-120    	; 0x392 <LCD_DisplayString>
			if(key2 == 'A')
     40a:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <key2>
     40e:	81 34       	cpi	r24, 0x41	; 65
     410:	31 f4       	brne	.+12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			{
				pos = 2;
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <pos>
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	08 95       	ret
			}
			else if(key2 == 'B')
     41e:	82 34       	cpi	r24, 0x42	; 66
     420:	f9 f4       	brne	.+62     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
			{
				pos = 4;
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <pos>
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	08 95       	ret
			}
			break;
		}
		case settings:
		{
			LCD_DisplayString(1, "B. Settings");
     42e:	60 e3       	ldi	r22, 0x30	; 48
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	ae df       	rcall	.-164    	; 0x392 <LCD_DisplayString>
			if(key2 == 'A')
     436:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <key2>
     43a:	81 34       	cpi	r24, 0x41	; 65
     43c:	31 f4       	brne	.+12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			{
				pos = 2;
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <pos>
     444:	83 e0       	ldi	r24, 0x03	; 3
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	08 95       	ret
			}
			else if(key2 == 'B')
     44a:	82 34       	cpi	r24, 0x42	; 66
     44c:	61 f4       	brne	.+24     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
			{
				pos = 4;
     44e:	84 e0       	ldi	r24, 0x04	; 4
     450:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <pos>
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	08 95       	ret
	switch(state)
	{
		case startM:
		{
			//pos = 3;
			state = pauseM;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	08 95       	ret
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	08 95       	ret
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	08 95       	ret
			}
			break;
		}
		default:
		{
			state = startM;
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	08 95       	ret
			{
				state = transaction;
			}
			else
			{
				state = pauseM;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
		{
			break;
		}
	}
	return state;
}
     476:	08 95       	ret

00000478 <changetoInteger>:
#include "io.c"
#include "io.h"

unsigned char changetoInteger(unsigned char var)
{
	switch(var)
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	fc 01       	movw	r30, r24
     47c:	f1 97       	sbiw	r30, 0x31	; 49
     47e:	e9 30       	cpi	r30, 0x09	; 9
     480:	f1 05       	cpc	r31, r1
     482:	b0 f4       	brcc	.+44     	; 0x4b0 <changetoInteger+0x38>
     484:	ea 5b       	subi	r30, 0xBA	; 186
     486:	ff 4f       	sbci	r31, 0xFF	; 255
     488:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__tablejump2__>
	{
		case '0': return 0;
		case '1': return 1;
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	08 95       	ret
		case '2': return 2;
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	08 95       	ret
		case '3': return 3;
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	08 95       	ret
		case '4': return 4;
     498:	84 e0       	ldi	r24, 0x04	; 4
     49a:	08 95       	ret
		case '5': return 5;
     49c:	85 e0       	ldi	r24, 0x05	; 5
     49e:	08 95       	ret
		case '6': return 6;
     4a0:	86 e0       	ldi	r24, 0x06	; 6
     4a2:	08 95       	ret
		case '7': return 7;
     4a4:	87 e0       	ldi	r24, 0x07	; 7
     4a6:	08 95       	ret
		case '8': return 8;
     4a8:	88 e0       	ldi	r24, 0x08	; 8
     4aa:	08 95       	ret
		case '9': return 9;
     4ac:	89 e0       	ldi	r24, 0x09	; 9
     4ae:	08 95       	ret

unsigned char changetoInteger(unsigned char var)
{
	switch(var)
	{
		case '0': return 0;
     4b0:	80 e0       	ldi	r24, 0x00	; 0
		case '7': return 7;
		case '8': return 8;
		case '9': return 9;
		default: return 0;
	}
}
     4b2:	08 95       	ret

000004b4 <changetoChar>:
char changetoChar(unsigned char num)
{
	switch(num)
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	8a 30       	cpi	r24, 0x0A	; 10
     4b8:	91 05       	cpc	r25, r1
     4ba:	b8 f4       	brcc	.+46     	; 0x4ea <changetoChar+0x36>
     4bc:	fc 01       	movw	r30, r24
     4be:	e1 5b       	subi	r30, 0xB1	; 177
     4c0:	ff 4f       	sbci	r31, 0xFF	; 255
     4c2:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__tablejump2__>
	{
		case 0: return '0';
		case 1: return '1';
     4c6:	81 e3       	ldi	r24, 0x31	; 49
     4c8:	08 95       	ret
		case 2: return '2';
     4ca:	82 e3       	ldi	r24, 0x32	; 50
     4cc:	08 95       	ret
		case 3: return '3';
     4ce:	83 e3       	ldi	r24, 0x33	; 51
     4d0:	08 95       	ret
		case 4: return '4';
     4d2:	84 e3       	ldi	r24, 0x34	; 52
     4d4:	08 95       	ret
		case 5: return '5';
     4d6:	85 e3       	ldi	r24, 0x35	; 53
     4d8:	08 95       	ret
		case 6: return '6';
     4da:	86 e3       	ldi	r24, 0x36	; 54
     4dc:	08 95       	ret
		case 7: return '7';
     4de:	87 e3       	ldi	r24, 0x37	; 55
     4e0:	08 95       	ret
		case 8: return '8';
     4e2:	88 e3       	ldi	r24, 0x38	; 56
     4e4:	08 95       	ret
		case 9: return '9';
     4e6:	89 e3       	ldi	r24, 0x39	; 57
     4e8:	08 95       	ret
		default: return '\0';
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	08 95       	ret
}
char changetoChar(unsigned char num)
{
	switch(num)
	{
		case 0: return '0';
     4ee:	80 e3       	ldi	r24, 0x30	; 48
		case 8: return '8';
		case 9: return '9';
		default: return '\0';

	}
}
     4f0:	08 95       	ret

000004f2 <findHowManyB4Dec>:
unsigned char findHowManyB4Dec(unsigned char num)
{
	if(num >= 100)
     4f2:	84 36       	cpi	r24, 0x64	; 100
     4f4:	38 f4       	brcc	.+14     	; 0x504 <findHowManyB4Dec+0x12>
	{
		return 3;
	}
	else if(num >= 10)
     4f6:	8a 30       	cpi	r24, 0x0A	; 10
     4f8:	38 f4       	brcc	.+14     	; 0x508 <findHowManyB4Dec+0x16>
}
unsigned char findHowManyB4Dec(unsigned char num)
{
	if(num >= 100)
	{
		return 3;
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	81 11       	cpse	r24, r1
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <findHowManyB4Dec+0x18>
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	03 c0       	rjmp	.+6      	; 0x50a <findHowManyB4Dec+0x18>
     504:	93 e0       	ldi	r25, 0x03	; 3
     506:	01 c0       	rjmp	.+2      	; 0x50a <findHowManyB4Dec+0x18>
	}
	else if(num >= 10)
	{
		return 2;
     508:	92 e0       	ldi	r25, 0x02	; 2
	else
	{
		return 0;
	}
	
}
     50a:	89 2f       	mov	r24, r25
     50c:	08 95       	ret

0000050e <clearArray>:

void clearArray(unsigned char *a, unsigned char size)
{
	for(int i = 0; i < size; i++)
     50e:	66 23       	and	r22, r22
     510:	39 f0       	breq	.+14     	; 0x520 <clearArray+0x12>
     512:	fc 01       	movw	r30, r24
     514:	86 0f       	add	r24, r22
     516:	91 1d       	adc	r25, r1
	{
		a[i] = 0;
     518:	11 92       	st	Z+, r1
	
}

void clearArray(unsigned char *a, unsigned char size)
{
	for(int i = 0; i < size; i++)
     51a:	e8 17       	cp	r30, r24
     51c:	f9 07       	cpc	r31, r25
     51e:	e1 f7       	brne	.-8      	; 0x518 <clearArray+0xa>
     520:	08 95       	ret

00000522 <GetKeypadKey>:
}

// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
     522:	8f ee       	ldi	r24, 0xEF	; 239
     524:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
     526:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('1'); }
     528:	30 9b       	sbis	0x06, 0	; 6
     52a:	29 c0       	rjmp	.+82     	; 0x57e <GetKeypadKey+0x5c>
    if (GetBit(PINC,1)==0) { return('4'); }
     52c:	31 9b       	sbis	0x06, 1	; 6
     52e:	29 c0       	rjmp	.+82     	; 0x582 <GetKeypadKey+0x60>
    if (GetBit(PINC,2)==0) { return('7'); }
     530:	32 9b       	sbis	0x06, 2	; 6
     532:	29 c0       	rjmp	.+82     	; 0x586 <GetKeypadKey+0x64>
    if (GetBit(PINC,3)==0) { return('.'); }
     534:	33 9b       	sbis	0x06, 3	; 6
     536:	29 c0       	rjmp	.+82     	; 0x58a <GetKeypadKey+0x68>
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
     538:	8f ed       	ldi	r24, 0xDF	; 223
     53a:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
     53c:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('2'); }
     53e:	30 9b       	sbis	0x06, 0	; 6
     540:	26 c0       	rjmp	.+76     	; 0x58e <GetKeypadKey+0x6c>
    if (GetBit(PINC,1)==0) { return('5'); }
     542:	31 9b       	sbis	0x06, 1	; 6
     544:	26 c0       	rjmp	.+76     	; 0x592 <GetKeypadKey+0x70>
    if (GetBit(PINC,2)==0) { return('8'); }
     546:	32 9b       	sbis	0x06, 2	; 6
     548:	26 c0       	rjmp	.+76     	; 0x596 <GetKeypadKey+0x74>
    if (GetBit(PINC,3)==0) { return('0'); }
     54a:	33 9b       	sbis	0x06, 3	; 6
     54c:	26 c0       	rjmp	.+76     	; 0x59a <GetKeypadKey+0x78>
    // ... *****FINISH*****
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
     54e:	8f eb       	ldi	r24, 0xBF	; 191
     550:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
     552:	00 00       	nop
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
     554:	30 9b       	sbis	0x06, 0	; 6
     556:	23 c0       	rjmp	.+70     	; 0x59e <GetKeypadKey+0x7c>
    if (GetBit(PINC,1)==0) { return('6'); }
     558:	31 9b       	sbis	0x06, 1	; 6
     55a:	23 c0       	rjmp	.+70     	; 0x5a2 <GetKeypadKey+0x80>
    if (GetBit(PINC,2)==0) { return('9'); }
     55c:	32 9b       	sbis	0x06, 2	; 6
     55e:	23 c0       	rjmp	.+70     	; 0x5a6 <GetKeypadKey+0x84>
    if (GetBit(PINC,3)==0) { return('#'); }
     560:	33 9b       	sbis	0x06, 3	; 6
     562:	23 c0       	rjmp	.+70     	; 0x5aa <GetKeypadKey+0x88>
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
     564:	8f e7       	ldi	r24, 0x7F	; 127
     566:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
     568:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('A'); }
     56a:	30 9b       	sbis	0x06, 0	; 6
     56c:	20 c0       	rjmp	.+64     	; 0x5ae <GetKeypadKey+0x8c>
    if (GetBit(PINC,1)==0) { return('B'); }
     56e:	31 9b       	sbis	0x06, 1	; 6
     570:	20 c0       	rjmp	.+64     	; 0x5b2 <GetKeypadKey+0x90>
    if (GetBit(PINC,2)==0) { return('C'); }
     572:	32 9b       	sbis	0x06, 2	; 6
     574:	20 c0       	rjmp	.+64     	; 0x5b6 <GetKeypadKey+0x94>
    if (GetBit(PINC,3)==0) { return('D'); }
     576:	33 9b       	sbis	0x06, 3	; 6
     578:	20 c0       	rjmp	.+64     	; 0x5ba <GetKeypadKey+0x98>
    
    return('\0'); // default value
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	08 95       	ret
// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('1'); }
     57e:	81 e3       	ldi	r24, 0x31	; 49
     580:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('4'); }
     582:	84 e3       	ldi	r24, 0x34	; 52
     584:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('7'); }
     586:	87 e3       	ldi	r24, 0x37	; 55
     588:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('.'); }
     58a:	8e e2       	ldi	r24, 0x2E	; 46
     58c:	08 95       	ret
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('2'); }
     58e:	82 e3       	ldi	r24, 0x32	; 50
     590:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('5'); }
     592:	85 e3       	ldi	r24, 0x35	; 53
     594:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('8'); }
     596:	88 e3       	ldi	r24, 0x38	; 56
     598:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('0'); }
     59a:	80 e3       	ldi	r24, 0x30	; 48
     59c:	08 95       	ret
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
     59e:	83 e3       	ldi	r24, 0x33	; 51
     5a0:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('6'); }
     5a2:	86 e3       	ldi	r24, 0x36	; 54
     5a4:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('9'); }
     5a6:	89 e3       	ldi	r24, 0x39	; 57
     5a8:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('#'); }
     5aa:	83 e2       	ldi	r24, 0x23	; 35
     5ac:	08 95       	ret
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('A'); }
     5ae:	81 e4       	ldi	r24, 0x41	; 65
     5b0:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('B'); }
     5b2:	82 e4       	ldi	r24, 0x42	; 66
     5b4:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('C'); }
     5b6:	83 e4       	ldi	r24, 0x43	; 67
     5b8:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('D'); }
     5ba:	84 e4       	ldi	r24, 0x44	; 68
    
    return('\0'); // default value
    
}
     5bc:	08 95       	ret

000005be <Lock>:
enum Keypad500states{startK, wait, press, unpress};
enum LockStates{startL, pauseL, enterPin, checkPin};
enum JoyStates{sample};

int Lock(int state)
{
     5be:	cf 92       	push	r12
     5c0:	df 92       	push	r13
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	ec 01       	movw	r28, r24
	static unsigned char count;
	static unsigned char numbers[7] = {0};
	static int address;
	static unsigned char holder;
	
	switch(state)
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	91 05       	cpc	r25, r1
     5d4:	69 f1       	breq	.+90     	; 0x630 <Lock+0x72>
     5d6:	1c f4       	brge	.+6      	; 0x5de <Lock+0x20>
     5d8:	89 2b       	or	r24, r25
     5da:	49 f0       	breq	.+18     	; 0x5ee <Lock+0x30>
     5dc:	9e c0       	rjmp	.+316    	; 0x71a <Lock+0x15c>
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	91 05       	cpc	r25, r1
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <Lock+0x28>
     5e4:	3d c0       	rjmp	.+122    	; 0x660 <Lock+0xa2>
     5e6:	03 97       	sbiw	r24, 0x03	; 3
     5e8:	09 f4       	brne	.+2      	; 0x5ec <Lock+0x2e>
     5ea:	91 c0       	rjmp	.+290    	; 0x70e <Lock+0x150>
     5ec:	96 c0       	rjmp	.+300    	; 0x71a <Lock+0x15c>
	{
		case startL:
		{
			pos = 3;
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <pos>
			if(eeprom_read_byte((uint8_t *) 26) != '1')
     5f4:	8a e1       	ldi	r24, 0x1A	; 26
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <eeprom_read_byte>
     5fc:	81 33       	cpi	r24, 0x31	; 49
     5fe:	09 f4       	brne	.+2      	; 0x602 <Lock+0x44>
     600:	8f c0       	rjmp	.+286    	; 0x720 <Lock+0x162>
			{
				eeprom_write_byte((uint8_t *) 20, '0');
     602:	60 e3       	ldi	r22, 0x30	; 48
     604:	84 e1       	ldi	r24, 0x14	; 20
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <eeprom_write_byte>
				eeprom_write_byte((uint8_t *) 21, '0');
     60c:	60 e3       	ldi	r22, 0x30	; 48
     60e:	85 e1       	ldi	r24, 0x15	; 21
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <eeprom_write_byte>
				eeprom_write_byte((uint8_t *) 22, '0');
     616:	60 e3       	ldi	r22, 0x30	; 48
     618:	86 e1       	ldi	r24, 0x16	; 22
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <eeprom_write_byte>
				eeprom_write_byte((uint8_t *) 23, '0');
     620:	60 e3       	ldi	r22, 0x30	; 48
     622:	87 e1       	ldi	r24, 0x17	; 23
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <eeprom_write_byte>
			}
			state = pauseL;
     62a:	c1 e0       	ldi	r28, 0x01	; 1
     62c:	d0 e0       	ldi	r29, 0x00	; 0
     62e:	82 c0       	rjmp	.+260    	; 0x734 <Lock+0x176>
			break;
		}
		case pauseL:
		{
			count = 0;
     630:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <count.2150>
			address = 20;
     634:	84 e1       	ldi	r24, 0x14	; 20
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <address.2152+0x1>
     63c:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <address.2152>
			holder = 0;
     640:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <holder.2153>
			clearArray(numbers, 7);
     644:	67 e0       	ldi	r22, 0x07	; 7
     646:	8b e8       	ldi	r24, 0x8B	; 139
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	61 df       	rcall	.-318    	; 0x50e <clearArray>
			if(pos == 3)
     64c:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <pos>
     650:	83 30       	cpi	r24, 0x03	; 3
     652:	09 f0       	breq	.+2      	; 0x656 <Lock+0x98>
     654:	6f c0       	rjmp	.+222    	; 0x734 <Lock+0x176>
			{
				state = enterPin;
				LCD_DisplayString(1, "enter pin: ");
     656:	6c e3       	ldi	r22, 0x3C	; 60
     658:	71 e0       	ldi	r23, 0x01	; 1
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	9a de       	rcall	.-716    	; 0x392 <LCD_DisplayString>
     65e:	63 c0       	rjmp	.+198    	; 0x726 <Lock+0x168>
			}
			break;
		}
		case enterPin:
		{
			if(key == '#')
     660:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <key>
     664:	83 32       	cpi	r24, 0x23	; 35
     666:	09 f0       	breq	.+2      	; 0x66a <Lock+0xac>
     668:	5e c0       	rjmp	.+188    	; 0x726 <Lock+0x168>
		case enterPin:
		{
			key = GetKeypadKey();
			if(key != '\0')
			{
				LCD_WriteData(key);
     66a:	10 c0       	rjmp	.+32     	; 0x68c <Lock+0xce>
     66c:	6e de       	rcall	.-804    	; 0x34a <LCD_WriteData>
				numbers[count] = key;
     66e:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <count.2150>
     672:	e8 2f       	mov	r30, r24
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	e5 57       	subi	r30, 0x75	; 117
     678:	fd 4f       	sbci	r31, 0xFD	; 253
     67a:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <key>
     67e:	90 83       	st	Z, r25
				count++;
     680:	8f 5f       	subi	r24, 0xFF	; 255
     682:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <count.2150>
     686:	c2 e0       	ldi	r28, 0x02	; 2
     688:	d0 e0       	ldi	r29, 0x00	; 0
     68a:	54 c0       	rjmp	.+168    	; 0x734 <Lock+0x176>
			}
			break;
		}
		case checkPin:
		{
			holder = 0;
     68c:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <holder.2153>
			address = 20;
     690:	84 e1       	ldi	r24, 0x14	; 20
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <address.2152+0x1>
     698:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <address.2152>
			LCD_WriteData(' ');
     69c:	80 e2       	ldi	r24, 0x20	; 32
     69e:	55 de       	rcall	.-854    	; 0x34a <LCD_WriteData>
			for(int i = 0; i < count-1 ; i++)
     6a0:	c0 90 95 02 	lds	r12, 0x0295	; 0x800295 <count.2150>
     6a4:	8c 2d       	mov	r24, r12
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	18 16       	cp	r1, r24
     6ac:	19 06       	cpc	r1, r25
     6ae:	1c f5       	brge	.+70     	; 0x6f6 <Lock+0x138>
     6b0:	0b e8       	ldi	r16, 0x8B	; 139
     6b2:	12 e0       	ldi	r17, 0x02	; 2
     6b4:	8c 2d       	mov	r24, r12
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	9c 01       	movw	r18, r24
     6ba:	26 57       	subi	r18, 0x76	; 118
     6bc:	3d 4f       	sbci	r19, 0xFD	; 253
     6be:	79 01       	movw	r14, r18
			{
				//LCD_WriteData(numbers[i]);
				//LCD_WriteData(eeprom_read_byte((uint8_t *) address));
				if(eeprom_read_byte((uint8_t *) address) != numbers[i])
				{
					holder = 1;
     6c0:	dd 24       	eor	r13, r13
     6c2:	d3 94       	inc	r13
			LCD_WriteData(' ');
			for(int i = 0; i < count-1 ; i++)
			{
				//LCD_WriteData(numbers[i]);
				//LCD_WriteData(eeprom_read_byte((uint8_t *) address));
				if(eeprom_read_byte((uint8_t *) address) != numbers[i])
     6c4:	c0 91 93 02 	lds	r28, 0x0293	; 0x800293 <address.2152>
     6c8:	d0 91 94 02 	lds	r29, 0x0294	; 0x800294 <address.2152+0x1>
     6cc:	ce 01       	movw	r24, r28
     6ce:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <eeprom_read_byte>
     6d2:	f8 01       	movw	r30, r16
     6d4:	91 91       	ld	r25, Z+
     6d6:	8f 01       	movw	r16, r30
     6d8:	89 13       	cpse	r24, r25
				{
					holder = 1;
     6da:	d0 92 92 02 	sts	0x0292, r13	; 0x800292 <holder.2153>
					//LCD_WriteData(numbers[i]);
				}
				address++;
     6de:	21 96       	adiw	r28, 0x01	; 1
     6e0:	d0 93 94 02 	sts	0x0294, r29	; 0x800294 <address.2152+0x1>
     6e4:	c0 93 93 02 	sts	0x0293, r28	; 0x800293 <address.2152>
		case checkPin:
		{
			holder = 0;
			address = 20;
			LCD_WriteData(' ');
			for(int i = 0; i < count-1 ; i++)
     6e8:	0e 15       	cp	r16, r14
     6ea:	1f 05       	cpc	r17, r15
     6ec:	59 f7       	brne	.-42     	; 0x6c4 <Lock+0x106>
					//LCD_WriteData(numbers[i]);
				}
				address++;
			}
			
			if(holder == 0)
     6ee:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <holder.2153>
     6f2:	81 11       	cpse	r24, r1
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <Lock+0x13e>
			{
				pos = 1;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <pos>
			}
			
			if(count == 1)
     6fc:	f1 e0       	ldi	r31, 0x01	; 1
     6fe:	cf 12       	cpse	r12, r31
     700:	09 c0       	rjmp	.+18     	; 0x714 <Lock+0x156>
			{
				pos = 3;
     702:	83 e0       	ldi	r24, 0x03	; 3
     704:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <pos>
     708:	c3 e0       	ldi	r28, 0x03	; 3
     70a:	d0 e0       	ldi	r29, 0x00	; 0
     70c:	13 c0       	rjmp	.+38     	; 0x734 <Lock+0x176>
			}
			break;
		}
		case checkPin:
		{
			state = pauseL;
     70e:	c1 e0       	ldi	r28, 0x01	; 1
     710:	d0 e0       	ldi	r29, 0x00	; 0
     712:	10 c0       	rjmp	.+32     	; 0x734 <Lock+0x176>
     714:	c3 e0       	ldi	r28, 0x03	; 3
     716:	d0 e0       	ldi	r29, 0x00	; 0
     718:	0d c0       	rjmp	.+26     	; 0x734 <Lock+0x176>
			break;
		}
		default:
		{
			state = startL;
     71a:	c0 e0       	ldi	r28, 0x00	; 0
     71c:	d0 e0       	ldi	r29, 0x00	; 0
				eeprom_write_byte((uint8_t *) 20, '0');
				eeprom_write_byte((uint8_t *) 21, '0');
				eeprom_write_byte((uint8_t *) 22, '0');
				eeprom_write_byte((uint8_t *) 23, '0');
			}
			state = pauseL;
     71e:	0a c0       	rjmp	.+20     	; 0x734 <Lock+0x176>
     720:	c1 e0       	ldi	r28, 0x01	; 1
     722:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
		case enterPin:
		{
			key = GetKeypadKey();
     724:	07 c0       	rjmp	.+14     	; 0x734 <Lock+0x176>
     726:	fd de       	rcall	.-518    	; 0x522 <GetKeypadKey>
     728:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <key>
			if(key != '\0')
     72c:	81 11       	cpse	r24, r1
     72e:	9e cf       	rjmp	.-196    	; 0x66c <Lock+0xae>
     730:	c2 e0       	ldi	r28, 0x02	; 2
     732:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
	}
	return state;
}
     734:	ce 01       	movw	r24, r28
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	08 95       	ret

00000748 <trans>:
	return state;
}


int trans(int state)
{
     748:	4f 92       	push	r4
     74a:	5f 92       	push	r5
     74c:	6f 92       	push	r6
     74e:	7f 92       	push	r7
     750:	8f 92       	push	r8
     752:	9f 92       	push	r9
     754:	af 92       	push	r10
     756:	bf 92       	push	r11
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	ec 01       	movw	r28, r24
	static unsigned char place;
	static unsigned char count;
	static unsigned char holder, holder2, holder3, num1, num2;
	static int decval, intval;
	
	switch (state)
     766:	8a 30       	cpi	r24, 0x0A	; 10
     768:	91 05       	cpc	r25, r1
     76a:	28 f4       	brcc	.+10     	; 0x776 <trans+0x2e>
     76c:	fc 01       	movw	r30, r24
     76e:	e7 5a       	subi	r30, 0xA7	; 167
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__tablejump2__>
			}
			break;
		}
		default:
		{
			state = startT;
     776:	c0 e0       	ldi	r28, 0x00	; 0
     778:	d0 e0       	ldi	r29, 0x00	; 0
     77a:	a7 c3       	rjmp	.+1870   	; 0xeca <trans+0x782>
			state = pauseT;
			break;
		}
		case pauseT:
		{
			totalMoney = 0;
     77c:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <totalMoney.2188>
     780:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <totalMoney.2188+0x1>
     784:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <totalMoney.2188+0x2>
     788:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <totalMoney.2188+0x3>
			changeMoney = 0;
			holderMoney = 0;
			place = 0;
     78c:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <place.2192>
			count = 0;
     790:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <count.2193>
			holder = 0;
			holder2 = 0;
     794:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <holder2.2195>
			holder3 = 0;
			num1 = 0;
     798:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <num1.2197>
			num2 = 0;
     79c:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <num2.2198>
			clearArray(number, 7);
     7a0:	67 e0       	ldi	r22, 0x07	; 7
     7a2:	8b e7       	ldi	r24, 0x7B	; 123
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	b3 de       	rcall	.-666    	; 0x50e <clearArray>
			
			if(pos == 2)
     7a8:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <pos>
     7ac:	82 30       	cpi	r24, 0x02	; 2
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <trans+0x6a>
     7b0:	8c c3       	rjmp	.+1816   	; 0xeca <trans+0x782>
			{
				state = options;
     7b2:	c2 e0       	ldi	r28, 0x02	; 2
     7b4:	d0 e0       	ldi	r29, 0x00	; 0
     7b6:	89 c3       	rjmp	.+1810   	; 0xeca <trans+0x782>
			}
			break;
		}
		case options:
		{
			LCD_DisplayString(1, "A     B            ");
     7b8:	68 e4       	ldi	r22, 0x48	; 72
     7ba:	71 e0       	ldi	r23, 0x01	; 1
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	e9 dd       	rcall	.-1070   	; 0x392 <LCD_DisplayString>
			
			holderMoney = eeprom_read_float((float *)1);
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <eeprom_read_dword>
     7c8:	2b 01       	movw	r4, r22
     7ca:	3c 01       	movw	r6, r24

			intval = (int)holderMoney;
     7cc:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fixsfsi>
     7d0:	4b 01       	movw	r8, r22
     7d2:	5c 01       	movw	r10, r24
			holderMoney = (holderMoney - (int)holderMoney) * 100;
			decval = (int)holderMoney;
			
			num1 = (unsigned char)intval;
     7d4:	c6 2f       	mov	r28, r22
     7d6:	60 93 83 02 	sts	0x0283, r22	; 0x800283 <num1.2197>
			num2 = (unsigned char)decval;
     7da:	07 2e       	mov	r0, r23
     7dc:	00 0c       	add	r0, r0
     7de:	88 0b       	sbc	r24, r24
     7e0:	99 0b       	sbc	r25, r25
     7e2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
     7ea:	c3 01       	movw	r24, r6
     7ec:	b2 01       	movw	r22, r4
     7ee:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__subsf3>
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	48 ec       	ldi	r20, 0xC8	; 200
     7f8:	52 e4       	ldi	r21, 0x42	; 66
     7fa:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
     7fe:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fixsfsi>
     802:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <num2.2198>
			
			
			if(num1 >= 99)
     806:	c3 36       	cpi	r28, 0x63	; 99
     808:	18 f0       	brcs	.+6      	; 0x810 <trans+0xc8>
			{
				num1++;
     80a:	83 94       	inc	r8
     80c:	80 92 83 02 	sts	0x0283, r8	; 0x800283 <num1.2197>
			}
			place = findHowManyB4Dec(num1);
     810:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <num1.2197>
     814:	6e de       	rcall	.-804    	; 0x4f2 <findHowManyB4Dec>
     816:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <place.2192>
			
			holder2 = place - 1;
     81a:	9f ef       	ldi	r25, 0xFF	; 255
     81c:	98 0f       	add	r25, r24
     81e:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <holder2.2195>
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     822:	e8 2e       	mov	r14, r24
     824:	f1 2c       	mov	r15, r1
     826:	1e 14       	cp	r1, r14
     828:	1f 04       	cpc	r1, r15
     82a:	0c f0       	brlt	.+2      	; 0x82e <trans+0xe6>
     82c:	45 c0       	rjmp	.+138    	; 0x8b8 <trans+0x170>
     82e:	00 e0       	ldi	r16, 0x00	; 0
     830:	10 e0       	ldi	r17, 0x00	; 0
			{
				holder3 = num1/(pow(10,holder2));
     832:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <num1.2197>
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     840:	4b 01       	movw	r8, r22
     842:	5c 01       	movw	r10, r24
     844:	c0 91 84 02 	lds	r28, 0x0284	; 0x800284 <holder2.2195>
     848:	6c 2f       	mov	r22, r28
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__floatunsisf>
     854:	9b 01       	movw	r18, r22
     856:	ac 01       	movw	r20, r24
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	80 e2       	ldi	r24, 0x20	; 32
     85e:	91 e4       	ldi	r25, 0x41	; 65
     860:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <pow>
     864:	2b 01       	movw	r4, r22
     866:	3c 01       	movw	r6, r24
     868:	9b 01       	movw	r18, r22
     86a:	ac 01       	movw	r20, r24
     86c:	c5 01       	movw	r24, r10
     86e:	b4 01       	movw	r22, r8
     870:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__divsf3>
     874:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fixunssfsi>
     878:	d6 2f       	mov	r29, r22
				num1 = num1 - (holder3 * pow(10, holder2));
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     884:	a3 01       	movw	r20, r6
     886:	92 01       	movw	r18, r4
     888:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
     88c:	9b 01       	movw	r18, r22
     88e:	ac 01       	movw	r20, r24
     890:	c5 01       	movw	r24, r10
     892:	b4 01       	movw	r22, r8
     894:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__subsf3>
     898:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fixunssfsi>
     89c:	60 93 83 02 	sts	0x0283, r22	; 0x800283 <num1.2197>
				LCD_WriteData(changetoChar(holder3));
     8a0:	8d 2f       	mov	r24, r29
     8a2:	08 de       	rcall	.-1008   	; 0x4b4 <changetoChar>
     8a4:	52 dd       	rcall	.-1372   	; 0x34a <LCD_WriteData>
     8a6:	c1 50       	subi	r28, 0x01	; 1
				holder2--;
     8a8:	c0 93 84 02 	sts	0x0284, r28	; 0x800284 <holder2.2195>
     8ac:	0f 5f       	subi	r16, 0xFF	; 255
			
			holder2 = place - 1;
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     8ae:	1f 4f       	sbci	r17, 0xFF	; 255
     8b0:	e0 16       	cp	r14, r16
     8b2:	f1 06       	cpc	r15, r17
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <trans+0x170>
     8b6:	bd cf       	rjmp	.-134    	; 0x832 <trans+0xea>
				num1 = num1 - (holder3 * pow(10, holder2));
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			
			holder2 = 1;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <holder2.2195>
			LCD_WriteData('.');
     8be:	8e e2       	ldi	r24, 0x2E	; 46
     8c0:	44 dd       	rcall	.-1400   	; 0x34a <LCD_WriteData>
     8c2:	02 e0       	ldi	r16, 0x02	; 2
     8c4:	10 e0       	ldi	r17, 0x00	; 0
     8c6:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <num2.2198>
			for(int i = 0; i < 2; i++)
			{
				holder3 = num2/(pow(10,holder2));
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     8d4:	4b 01       	movw	r8, r22
     8d6:	5c 01       	movw	r10, r24
     8d8:	c0 91 84 02 	lds	r28, 0x0284	; 0x800284 <holder2.2195>
     8dc:	6c 2f       	mov	r22, r28
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__floatunsisf>
     8e8:	9b 01       	movw	r18, r22
     8ea:	ac 01       	movw	r20, r24
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	80 e2       	ldi	r24, 0x20	; 32
     8f2:	91 e4       	ldi	r25, 0x41	; 65
     8f4:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <pow>
     8f8:	2b 01       	movw	r4, r22
     8fa:	3c 01       	movw	r6, r24
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
     900:	c5 01       	movw	r24, r10
     902:	b4 01       	movw	r22, r8
     904:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__divsf3>
     908:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fixunssfsi>
     90c:	d6 2f       	mov	r29, r22
     90e:	70 e0       	ldi	r23, 0x00	; 0
				num2 = num2 - (holder3 * pow(10, holder2));
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     918:	a3 01       	movw	r20, r6
     91a:	92 01       	movw	r18, r4
     91c:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
     920:	9b 01       	movw	r18, r22
     922:	ac 01       	movw	r20, r24
     924:	c5 01       	movw	r24, r10
     926:	b4 01       	movw	r22, r8
     928:	c7 d7       	rcall	.+3982   	; 0x18b8 <__subsf3>
     92a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fixunssfsi>
     92e:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <num2.2198>
				LCD_WriteData(changetoChar(holder3));
     932:	8d 2f       	mov	r24, r29
     934:	bf dd       	rcall	.-1154   	; 0x4b4 <changetoChar>
     936:	09 dd       	rcall	.-1518   	; 0x34a <LCD_WriteData>
     938:	c1 50       	subi	r28, 0x01	; 1
				holder2--;
     93a:	c0 93 84 02 	sts	0x0284, r28	; 0x800284 <holder2.2195>
     93e:	01 50       	subi	r16, 0x01	; 1
     940:	11 09       	sbc	r17, r1
     942:	09 f0       	breq	.+2      	; 0x946 <trans+0x1fe>
				holder2--;
			}
			
			holder2 = 1;
			LCD_WriteData('.');
			for(int i = 0; i < 2; i++)
     944:	c0 cf       	rjmp	.-128    	; 0x8c6 <trans+0x17e>
     946:	8a e0       	ldi	r24, 0x0A	; 10
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			
			//writing $$ of B
			holderMoney = eeprom_read_float((float *)10);
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <eeprom_read_dword>
     94e:	2b 01       	movw	r4, r22
     950:	3c 01       	movw	r6, r24
     952:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fixsfsi>
			
			intval = (int)holderMoney;
     956:	4b 01       	movw	r8, r22
     958:	5c 01       	movw	r10, r24
     95a:	c6 2f       	mov	r28, r22
			holderMoney = (holderMoney - (int)holderMoney) * 100;
			decval = (int)holderMoney;
			
			num1 = (unsigned char)intval;
     95c:	60 93 83 02 	sts	0x0283, r22	; 0x800283 <num1.2197>
     960:	07 2e       	mov	r0, r23
			num2 = (unsigned char)decval;
     962:	00 0c       	add	r0, r0
     964:	88 0b       	sbc	r24, r24
     966:	99 0b       	sbc	r25, r25
     968:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     96c:	9b 01       	movw	r18, r22
     96e:	ac 01       	movw	r20, r24
     970:	c3 01       	movw	r24, r6
     972:	b2 01       	movw	r22, r4
     974:	a1 d7       	rcall	.+3906   	; 0x18b8 <__subsf3>
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	48 ec       	ldi	r20, 0xC8	; 200
     97c:	52 e4       	ldi	r21, 0x42	; 66
     97e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
     982:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fixsfsi>
			
			LCD_WriteData(' ');
     986:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <num2.2198>
     98a:	80 e2       	ldi	r24, 0x20	; 32
			LCD_WriteData(' ');
     98c:	de dc       	rcall	.-1604   	; 0x34a <LCD_WriteData>
     98e:	80 e2       	ldi	r24, 0x20	; 32
			LCD_WriteData(' ');
     990:	dc dc       	rcall	.-1608   	; 0x34a <LCD_WriteData>
     992:	80 e2       	ldi	r24, 0x20	; 32
     994:	da dc       	rcall	.-1612   	; 0x34a <LCD_WriteData>
			
			
			if(num1 >= 99)
     996:	c3 36       	cpi	r28, 0x63	; 99
     998:	18 f0       	brcs	.+6      	; 0x9a0 <trans+0x258>
			{
				num1++;
     99a:	83 94       	inc	r8
     99c:	80 92 83 02 	sts	0x0283, r8	; 0x800283 <num1.2197>
			}
			place = findHowManyB4Dec(num1);
     9a0:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <num1.2197>
     9a4:	a6 dd       	rcall	.-1204   	; 0x4f2 <findHowManyB4Dec>
     9a6:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <place.2192>
     9aa:	9f ef       	ldi	r25, 0xFF	; 255
			
			holder2 = place - 1;
     9ac:	98 0f       	add	r25, r24
     9ae:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <holder2.2195>
     9b2:	e8 2e       	mov	r14, r24
			
			for(int i = 0; i < place; i++)
     9b4:	f1 2c       	mov	r15, r1
     9b6:	1e 14       	cp	r1, r14
     9b8:	1f 04       	cpc	r1, r15
     9ba:	0c f0       	brlt	.+2      	; 0x9be <trans+0x276>
     9bc:	43 c0       	rjmp	.+134    	; 0xa44 <trans+0x2fc>
     9be:	00 e0       	ldi	r16, 0x00	; 0
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <num1.2197>
			{
				holder3 = num1/(pow(10,holder2));
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     9d0:	4b 01       	movw	r8, r22
     9d2:	5c 01       	movw	r10, r24
     9d4:	c0 91 84 02 	lds	r28, 0x0284	; 0x800284 <holder2.2195>
     9d8:	6c 2f       	mov	r22, r28
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__floatunsisf>
     9e4:	9b 01       	movw	r18, r22
     9e6:	ac 01       	movw	r20, r24
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	80 e2       	ldi	r24, 0x20	; 32
     9ee:	91 e4       	ldi	r25, 0x41	; 65
     9f0:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <pow>
     9f4:	2b 01       	movw	r4, r22
     9f6:	3c 01       	movw	r6, r24
     9f8:	9b 01       	movw	r18, r22
     9fa:	ac 01       	movw	r20, r24
     9fc:	c5 01       	movw	r24, r10
     9fe:	b4 01       	movw	r22, r8
     a00:	c0 d7       	rcall	.+3968   	; 0x1982 <__divsf3>
     a02:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fixunssfsi>
     a06:	d6 2f       	mov	r29, r22
				num1 = num1 - (holder3 * pow(10, holder2));
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     a12:	a3 01       	movw	r20, r6
     a14:	92 01       	movw	r18, r4
     a16:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
     a1a:	9b 01       	movw	r18, r22
     a1c:	ac 01       	movw	r20, r24
     a1e:	c5 01       	movw	r24, r10
     a20:	b4 01       	movw	r22, r8
     a22:	4a d7       	rcall	.+3732   	; 0x18b8 <__subsf3>
     a24:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fixunssfsi>
     a28:	60 93 83 02 	sts	0x0283, r22	; 0x800283 <num1.2197>
				LCD_WriteData(changetoChar(holder3));
     a2c:	8d 2f       	mov	r24, r29
     a2e:	42 dd       	rcall	.-1404   	; 0x4b4 <changetoChar>
     a30:	8c dc       	rcall	.-1768   	; 0x34a <LCD_WriteData>
				holder2--;
     a32:	c1 50       	subi	r28, 0x01	; 1
     a34:	c0 93 84 02 	sts	0x0284, r28	; 0x800284 <holder2.2195>
			}
			place = findHowManyB4Dec(num1);
			
			holder2 = place - 1;
			
			for(int i = 0; i < place; i++)
     a38:	0f 5f       	subi	r16, 0xFF	; 255
     a3a:	1f 4f       	sbci	r17, 0xFF	; 255
     a3c:	0e 15       	cp	r16, r14
     a3e:	1f 05       	cpc	r17, r15
     a40:	09 f0       	breq	.+2      	; 0xa44 <trans+0x2fc>
     a42:	bf cf       	rjmp	.-130    	; 0x9c2 <trans+0x27a>
				num1 = num1 - (holder3 * pow(10, holder2));
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			
			holder2 = 1;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <holder2.2195>
			LCD_WriteData('.');
     a4a:	8e e2       	ldi	r24, 0x2E	; 46
     a4c:	7e dc       	rcall	.-1796   	; 0x34a <LCD_WriteData>
     a4e:	02 e0       	ldi	r16, 0x02	; 2
     a50:	10 e0       	ldi	r17, 0x00	; 0
     a52:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <num2.2198>
			for(int i = 0; i < 2; i++)
			{
				holder3 = num2/(pow(10,holder2));
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     a60:	4b 01       	movw	r8, r22
     a62:	5c 01       	movw	r10, r24
     a64:	c0 91 84 02 	lds	r28, 0x0284	; 0x800284 <holder2.2195>
     a68:	6c 2f       	mov	r22, r28
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__floatunsisf>
     a74:	9b 01       	movw	r18, r22
     a76:	ac 01       	movw	r20, r24
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	80 e2       	ldi	r24, 0x20	; 32
     a7e:	91 e4       	ldi	r25, 0x41	; 65
     a80:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <pow>
     a84:	2b 01       	movw	r4, r22
     a86:	3c 01       	movw	r6, r24
     a88:	9b 01       	movw	r18, r22
     a8a:	ac 01       	movw	r20, r24
     a8c:	c5 01       	movw	r24, r10
     a8e:	b4 01       	movw	r22, r8
     a90:	78 d7       	rcall	.+3824   	; 0x1982 <__divsf3>
     a92:	e4 d7       	rcall	.+4040   	; 0x1a5c <__fixunssfsi>
				num2 = num2 - (holder3 * pow(10, holder2));
     a94:	d6 2f       	mov	r29, r22
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     aa0:	a3 01       	movw	r20, r6
     aa2:	92 01       	movw	r18, r4
     aa4:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	c5 01       	movw	r24, r10
     aae:	b4 01       	movw	r22, r8
     ab0:	03 d7       	rcall	.+3590   	; 0x18b8 <__subsf3>
     ab2:	d4 d7       	rcall	.+4008   	; 0x1a5c <__fixunssfsi>
				LCD_WriteData(changetoChar(holder3));
     ab4:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <num2.2198>
     ab8:	8d 2f       	mov	r24, r29
     aba:	fc dc       	rcall	.-1544   	; 0x4b4 <changetoChar>
     abc:	46 dc       	rcall	.-1908   	; 0x34a <LCD_WriteData>
				holder2--;
     abe:	c1 50       	subi	r28, 0x01	; 1
     ac0:	c0 93 84 02 	sts	0x0284, r28	; 0x800284 <holder2.2195>
     ac4:	01 50       	subi	r16, 0x01	; 1
     ac6:	11 09       	sbc	r17, r1
				holder2--;
			}
			
			holder2 = 1;
			LCD_WriteData('.');
			for(int i = 0; i < 2; i++)
     ac8:	09 f0       	breq	.+2      	; 0xacc <trans+0x384>
     aca:	c3 cf       	rjmp	.-122    	; 0xa52 <trans+0x30a>
				holder3 = num2/(pow(10,holder2));
				num2 = num2 - (holder3 * pow(10, holder2));
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			state = options1;
     acc:	c3 e0       	ldi	r28, 0x03	; 3
     ace:	d0 e0       	ldi	r29, 0x00	; 0
     ad0:	fc c1       	rjmp	.+1016   	; 0xeca <trans+0x782>
			break;
		}
		case options1:
		{
			key = GetKeypadKey();
     ad2:	27 dd       	rcall	.-1458   	; 0x522 <GetKeypadKey>
     ad4:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <key>
			if(key == 'A')
     ad8:	81 34       	cpi	r24, 0x41	; 65
     ada:	c1 f4       	brne	.+48     	; 0xb0c <trans+0x3c4>
			{
				state = picked;
				totalMoney += eeprom_read_float((float *)1);
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <eeprom_read_dword>
     ae4:	9b 01       	movw	r18, r22
     ae6:	ac 01       	movw	r20, r24
     ae8:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <totalMoney.2188>
     aec:	70 91 88 02 	lds	r23, 0x0288	; 0x800288 <totalMoney.2188+0x1>
     af0:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <totalMoney.2188+0x2>
     af4:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <totalMoney.2188+0x3>
     af8:	e0 d6       	rcall	.+3520   	; 0x18ba <__addsf3>
     afa:	60 93 87 02 	sts	0x0287, r22	; 0x800287 <totalMoney.2188>
     afe:	70 93 88 02 	sts	0x0288, r23	; 0x800288 <totalMoney.2188+0x1>
     b02:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <totalMoney.2188+0x2>
     b06:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <totalMoney.2188+0x3>
     b0a:	d9 c1       	rjmp	.+946    	; 0xebe <trans+0x776>
			}
			else if(key == 'B')
     b0c:	82 34       	cpi	r24, 0x42	; 66
     b0e:	09 f0       	breq	.+2      	; 0xb12 <trans+0x3ca>
     b10:	dc c1       	rjmp	.+952    	; 0xeca <trans+0x782>
			{
				state = picked;
				totalMoney += eeprom_read_float((float *)10);
     b12:	8a e0       	ldi	r24, 0x0A	; 10
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <eeprom_read_dword>
     b1a:	9b 01       	movw	r18, r22
     b1c:	ac 01       	movw	r20, r24
     b1e:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <totalMoney.2188>
     b22:	70 91 88 02 	lds	r23, 0x0288	; 0x800288 <totalMoney.2188+0x1>
     b26:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <totalMoney.2188+0x2>
     b2a:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <totalMoney.2188+0x3>
     b2e:	c5 d6       	rcall	.+3466   	; 0x18ba <__addsf3>
     b30:	60 93 87 02 	sts	0x0287, r22	; 0x800287 <totalMoney.2188>
     b34:	70 93 88 02 	sts	0x0288, r23	; 0x800288 <totalMoney.2188+0x1>
     b38:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <totalMoney.2188+0x2>
     b3c:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <totalMoney.2188+0x3>
     b40:	be c1       	rjmp	.+892    	; 0xebe <trans+0x776>
			state = picked1;
			break;
		}
		case picked1:
		{
			key = GetKeypadKey();
     b42:	ef dc       	rcall	.-1570   	; 0x522 <GetKeypadKey>
     b44:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <key>
			if(key == 'A')
     b48:	81 34       	cpi	r24, 0x41	; 65
			{
				state = payment;
			}
			else if(key == 'B')
     b4a:	89 f1       	breq	.+98     	; 0xbae <trans+0x466>
     b4c:	82 34       	cpi	r24, 0x42	; 66
     b4e:	09 f0       	breq	.+2      	; 0xb52 <trans+0x40a>
			{
				state = options;
     b50:	bc c1       	rjmp	.+888    	; 0xeca <trans+0x782>
     b52:	c2 e0       	ldi	r28, 0x02	; 2
     b54:	d0 e0       	ldi	r29, 0x00	; 0
			state = payment1;
			break;
		}
		case payment1:
		{
			if(key == '#')
     b56:	b9 c1       	rjmp	.+882    	; 0xeca <trans+0x782>
     b58:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <key>
			{
				state = change;
				OCR1A = 65;
     b5c:	83 32       	cpi	r24, 0x23	; 35
     b5e:	71 f5       	brne	.+92     	; 0xbbc <trans+0x474>
     b60:	81 e4       	ldi	r24, 0x41	; 65
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
			holder = 0;
			break;
		}
		case change:
		{
			LCD_DisplayString(1, "change:          ");
     b68:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b6c:	6c e5       	ldi	r22, 0x5C	; 92
     b6e:	71 e0       	ldi	r23, 0x01	; 1
     b70:	81 e0       	ldi	r24, 0x01	; 1
			
			LCD_WriteData(0x01);
     b72:	0f dc       	rcall	.-2018   	; 0x392 <LCD_DisplayString>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	e9 db       	rcall	.-2094   	; 0x34a <LCD_WriteData>

			for(int i = 0; i < place; i++)
     b78:	b0 90 86 02 	lds	r11, 0x0286	; 0x800286 <place.2192>
     b7c:	eb 2c       	mov	r14, r11
     b7e:	f1 2c       	mov	r15, r1
     b80:	1e 14       	cp	r1, r14
     b82:	1f 04       	cpc	r1, r15
     b84:	0c f4       	brge	.+2      	; 0xb88 <trans+0x440>
     b86:	3e c0       	rjmp	.+124    	; 0xc04 <trans+0x4bc>
		{
			state = change1;
		}
		case change1:
		{
			key = GetKeypadKey();
     b88:	74 c0       	rjmp	.+232    	; 0xc72 <trans+0x52a>
     b8a:	cb dc       	rcall	.-1642   	; 0x522 <GetKeypadKey>
     b8c:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <key>
			if(key == '#')
     b90:	83 32       	cpi	r24, 0x23	; 35
     b92:	09 f0       	breq	.+2      	; 0xb96 <trans+0x44e>
			{
				pos = 3;
     b94:	91 c1       	rjmp	.+802    	; 0xeb8 <trans+0x770>
     b96:	83 e0       	ldi	r24, 0x03	; 3
     b98:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <pos>
				state = pauseT;
				OCR1A = 175;
     b9c:	8f ea       	ldi	r24, 0xAF	; 175
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		{
			key = GetKeypadKey();
			if(key == '#')
			{
				pos = 3;
				state = pauseT;
     ba4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ba8:	c1 e0       	ldi	r28, 0x01	; 1
		{
			break;
		}
		case payment:
		{
			LCD_DisplayString(1, "Enter Payment:   ");
     baa:	d0 e0       	ldi	r29, 0x00	; 0
     bac:	8e c1       	rjmp	.+796    	; 0xeca <trans+0x782>
     bae:	6e e6       	ldi	r22, 0x6E	; 110
     bb0:	71 e0       	ldi	r23, 0x01	; 1
     bb2:	81 e0       	ldi	r24, 0x01	; 1
			break;
     bb4:	ee db       	rcall	.-2084   	; 0x392 <LCD_DisplayString>
     bb6:	c6 e0       	ldi	r28, 0x06	; 6
     bb8:	d0 e0       	ldi	r29, 0x00	; 0
		}
		case payment1:
		{
			key = GetKeypadKey();
     bba:	87 c1       	rjmp	.+782    	; 0xeca <trans+0x782>
     bbc:	b2 dc       	rcall	.-1692   	; 0x522 <GetKeypadKey>
     bbe:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <key>
			if(key !=  '\0' && key != 'A' && key != 'B' && key!= 'C' && key != 'D')
     bc2:	88 23       	and	r24, r24
     bc4:	b9 f0       	breq	.+46     	; 0xbf4 <trans+0x4ac>
     bc6:	9f eb       	ldi	r25, 0xBF	; 191
     bc8:	98 0f       	add	r25, r24
     bca:	94 30       	cpi	r25, 0x04	; 4
     bcc:	98 f0       	brcs	.+38     	; 0xbf4 <trans+0x4ac>
			{
				LCD_WriteData(key);
     bce:	bd db       	rcall	.-2182   	; 0x34a <LCD_WriteData>
     bd0:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <key>
				if (key == '.')
     bd4:	9e 32       	cpi	r25, 0x2E	; 46
     bd6:	21 f4       	brne	.+8      	; 0xbe0 <trans+0x498>
     bd8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <count.2193>
				{
					place = count;
     bdc:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <place.2192>
     be0:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <count.2193>
				}
				number[count] = key;
     be4:	e8 2f       	mov	r30, r24
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	e5 58       	subi	r30, 0x85	; 133
     bea:	fd 4f       	sbci	r31, 0xFD	; 253
				count++;
     bec:	90 83       	st	Z, r25
     bee:	8f 5f       	subi	r24, 0xFF	; 255
     bf0:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <count.2193>
			}
			holder2 = place - 1;
     bf4:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <place.2192>
     bf8:	81 50       	subi	r24, 0x01	; 1
     bfa:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <holder2.2195>
			holder = 0;
			break;
     bfe:	c7 e0       	ldi	r28, 0x07	; 7
     c00:	d0 e0       	ldi	r29, 0x00	; 0
     c02:	63 c1       	rjmp	.+710    	; 0xeca <trans+0x782>
     c04:	d0 91 83 02 	lds	r29, 0x0283	; 0x800283 <num1.2197>
     c08:	c0 91 84 02 	lds	r28, 0x0284	; 0x800284 <holder2.2195>
     c0c:	0b e7       	ldi	r16, 0x7B	; 123
			LCD_WriteData(0x01);

			for(int i = 0; i < place; i++)
			{
				//LCD_WriteData(number[i]);
				holder = changetoInteger(number[i]);
     c0e:	12 e0       	ldi	r17, 0x02	; 2
     c10:	9c 2e       	mov	r9, r28
     c12:	9b 18       	sub	r9, r11
     c14:	f8 01       	movw	r30, r16
     c16:	81 91       	ld	r24, Z+
     c18:	8f 01       	movw	r16, r30
				num1 = holder*pow(10, holder2) + num1;
     c1a:	2e dc       	rcall	.-1956   	; 0x478 <changetoInteger>
     c1c:	a8 2e       	mov	r10, r24
     c1e:	6c 2f       	mov	r22, r28
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	46 d7       	rcall	.+3724   	; 0x1ab4 <__floatunsisf>
     c28:	9b 01       	movw	r18, r22
     c2a:	ac 01       	movw	r20, r24
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	80 e2       	ldi	r24, 0x20	; 32
     c32:	91 e4       	ldi	r25, 0x41	; 65
     c34:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <pow>
     c38:	2b 01       	movw	r4, r22
     c3a:	3c 01       	movw	r6, r24
     c3c:	6a 2d       	mov	r22, r10
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	39 d7       	rcall	.+3698   	; 0x1ab8 <__floatsisf>
     c46:	a3 01       	movw	r20, r6
     c48:	92 01       	movw	r18, r4
     c4a:	c2 d7       	rcall	.+3972   	; 0x1bd0 <__mulsf3>
     c4c:	2b 01       	movw	r4, r22
     c4e:	3c 01       	movw	r6, r24
     c50:	6d 2f       	mov	r22, r29
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	2f d7       	rcall	.+3678   	; 0x1ab8 <__floatsisf>
     c5a:	9b 01       	movw	r18, r22
     c5c:	ac 01       	movw	r20, r24
     c5e:	c3 01       	movw	r24, r6
     c60:	b2 01       	movw	r22, r4
     c62:	2b d6       	rcall	.+3158   	; 0x18ba <__addsf3>
     c64:	fb d6       	rcall	.+3574   	; 0x1a5c <__fixunssfsi>
     c66:	d6 2f       	mov	r29, r22
     c68:	c1 50       	subi	r28, 0x01	; 1
				holder2--;
     c6a:	9c 12       	cpse	r9, r28
		{
			LCD_DisplayString(1, "change:          ");
			
			LCD_WriteData(0x01);

			for(int i = 0; i < place; i++)
     c6c:	d3 cf       	rjmp	.-90     	; 0xc14 <trans+0x4cc>
     c6e:	60 93 83 02 	sts	0x0283, r22	; 0x800283 <num1.2197>
				holder = changetoInteger(number[i]);
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			//LCD_WriteData('.');
			holder2 = 1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <holder2.2195>
			for(int j = place+1; j < count-1; j++)
     c78:	60 90 85 02 	lds	r6, 0x0285	; 0x800285 <count.2193>
     c7c:	ff ef       	ldi	r31, 0xFF	; 255
     c7e:	ef 1a       	sub	r14, r31
     c80:	ff 0a       	sbc	r15, r31
     c82:	86 2d       	mov	r24, r6
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	e8 16       	cp	r14, r24
     c8a:	f9 06       	cpc	r15, r25
     c8c:	0c f0       	brlt	.+2      	; 0xc90 <trans+0x548>
     c8e:	3f c0       	rjmp	.+126    	; 0xd0e <trans+0x5c6>
     c90:	c0 91 82 02 	lds	r28, 0x0282	; 0x800282 <num2.2198>
     c94:	eb 2c       	mov	r14, r11
     c96:	f1 2c       	mov	r15, r1
     c98:	87 01       	movw	r16, r14
     c9a:	04 58       	subi	r16, 0x84	; 132
     c9c:	1d 4f       	sbci	r17, 0xFD	; 253
     c9e:	83 e0       	ldi	r24, 0x03	; 3
			{	
				//LCD_WriteData(number[j]);
				holder = changetoInteger(number[j]);
     ca0:	8b 0d       	add	r24, r11
     ca2:	58 2e       	mov	r5, r24
     ca4:	56 18       	sub	r5, r6
     ca6:	d1 e0       	ldi	r29, 0x01	; 1
     ca8:	f8 01       	movw	r30, r16
				num2 = holder*pow(10, holder2) + num2;
     caa:	81 91       	ld	r24, Z+
     cac:	8f 01       	movw	r16, r30
     cae:	e4 db       	rcall	.-2104   	; 0x478 <changetoInteger>
     cb0:	78 2e       	mov	r7, r24
     cb2:	6d 2f       	mov	r22, r29
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	fc d6       	rcall	.+3576   	; 0x1ab4 <__floatunsisf>
     cbc:	9b 01       	movw	r18, r22
     cbe:	ac 01       	movw	r20, r24
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	80 e2       	ldi	r24, 0x20	; 32
     cc6:	91 e4       	ldi	r25, 0x41	; 65
     cc8:	e6 d7       	rcall	.+4044   	; 0x1c96 <pow>
     cca:	4b 01       	movw	r8, r22
     ccc:	5c 01       	movw	r10, r24
     cce:	67 2d       	mov	r22, r7
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	f0 d6       	rcall	.+3552   	; 0x1ab8 <__floatsisf>
     cd8:	a5 01       	movw	r20, r10
     cda:	94 01       	movw	r18, r8
     cdc:	79 d7       	rcall	.+3826   	; 0x1bd0 <__mulsf3>
     cde:	4b 01       	movw	r8, r22
     ce0:	5c 01       	movw	r10, r24
     ce2:	6c 2f       	mov	r22, r28
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	e6 d6       	rcall	.+3532   	; 0x1ab8 <__floatsisf>
     cec:	9b 01       	movw	r18, r22
     cee:	ac 01       	movw	r20, r24
     cf0:	c5 01       	movw	r24, r10
     cf2:	b4 01       	movw	r22, r8
     cf4:	e2 d5       	rcall	.+3012   	; 0x18ba <__addsf3>
				holder2--;
     cf6:	b2 d6       	rcall	.+3428   	; 0x1a5c <__fixunssfsi>
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			//LCD_WriteData('.');
			holder2 = 1;
			for(int j = place+1; j < count-1; j++)
     cf8:	c6 2f       	mov	r28, r22
     cfa:	d1 50       	subi	r29, 0x01	; 1
     cfc:	5d 12       	cpse	r5, r29
     cfe:	d4 cf       	rjmp	.-88     	; 0xca8 <trans+0x560>
     d00:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <num2.2198>
     d04:	8e 2d       	mov	r24, r14
				num2 = holder*pow(10, holder2) + num2;
				holder2--;
			}
			
			holderMoney = (float)num1 + ((float)num2/100);
			changeMoney = holderMoney - totalMoney;
     d06:	86 19       	sub	r24, r6
     d08:	8d 5f       	subi	r24, 0xFD	; 253
     d0a:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <holder2.2195>
     d0e:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <num2.2198>
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	cd d6       	rcall	.+3482   	; 0x1ab4 <__floatunsisf>
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	48 ec       	ldi	r20, 0xC8	; 200
     d20:	52 e4       	ldi	r21, 0x42	; 66
     d22:	2f d6       	rcall	.+3166   	; 0x1982 <__divsf3>
     d24:	4b 01       	movw	r8, r22
     d26:	5c 01       	movw	r10, r24
     d28:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <num1.2197>
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	c0 d6       	rcall	.+3456   	; 0x1ab4 <__floatunsisf>
     d34:	9b 01       	movw	r18, r22
     d36:	ac 01       	movw	r20, r24
     d38:	c5 01       	movw	r24, r10
     d3a:	b4 01       	movw	r22, r8
     d3c:	be d5       	rcall	.+2940   	; 0x18ba <__addsf3>
     d3e:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <totalMoney.2188>
     d42:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <totalMoney.2188+0x1>
     d46:	40 91 89 02 	lds	r20, 0x0289	; 0x800289 <totalMoney.2188+0x2>
			holderMoney = (changeMoney - (int)changeMoney) * 100;
     d4a:	50 91 8a 02 	lds	r21, 0x028A	; 0x80028a <totalMoney.2188+0x3>
     d4e:	b4 d5       	rcall	.+2920   	; 0x18b8 <__subsf3>
     d50:	2b 01       	movw	r4, r22
			decval = (int)holderMoney;
			intval = (int)changeMoney;
			
			num1 = (unsigned char)intval;
     d52:	3c 01       	movw	r6, r24
     d54:	7e d6       	rcall	.+3324   	; 0x1a52 <__fixsfsi>
     d56:	4b 01       	movw	r8, r22
			num2 = (unsigned char)decval;
     d58:	5c 01       	movw	r10, r24
     d5a:	c6 2f       	mov	r28, r22
     d5c:	60 93 83 02 	sts	0x0283, r22	; 0x800283 <num1.2197>
     d60:	07 2e       	mov	r0, r23
     d62:	00 0c       	add	r0, r0
     d64:	88 0b       	sbc	r24, r24
     d66:	99 0b       	sbc	r25, r25
     d68:	a7 d6       	rcall	.+3406   	; 0x1ab8 <__floatsisf>
     d6a:	9b 01       	movw	r18, r22
     d6c:	ac 01       	movw	r20, r24
     d6e:	c3 01       	movw	r24, r6
     d70:	b2 01       	movw	r22, r4
     d72:	a2 d5       	rcall	.+2884   	; 0x18b8 <__subsf3>
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	48 ec       	ldi	r20, 0xC8	; 200
     d7a:	52 e4       	ldi	r21, 0x42	; 66
     d7c:	29 d7       	rcall	.+3666   	; 0x1bd0 <__mulsf3>
			
			LCD_WriteData(' ');
     d7e:	69 d6       	rcall	.+3282   	; 0x1a52 <__fixsfsi>
     d80:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <num2.2198>
			
			
			if(num1 >= 99)
     d84:	80 e2       	ldi	r24, 0x20	; 32
     d86:	e1 da       	rcall	.-2622   	; 0x34a <LCD_WriteData>
			{
				num1++;
     d88:	c3 36       	cpi	r28, 0x63	; 99
			}
			place = findHowManyB4Dec(num1);
     d8a:	18 f0       	brcs	.+6      	; 0xd92 <trans+0x64a>
     d8c:	83 94       	inc	r8
     d8e:	80 92 83 02 	sts	0x0283, r8	; 0x800283 <num1.2197>
     d92:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <num1.2197>
			
			holder2 = place - 1;
     d96:	ad db       	rcall	.-2214   	; 0x4f2 <findHowManyB4Dec>
     d98:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <place.2192>
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     d9c:	9f ef       	ldi	r25, 0xFF	; 255
     d9e:	98 0f       	add	r25, r24
     da0:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <holder2.2195>
     da4:	e8 2e       	mov	r14, r24
			{
				holder3 = num1/(pow(10,holder2));
     da6:	f1 2c       	mov	r15, r1
     da8:	1e 14       	cp	r1, r14
     daa:	1f 04       	cpc	r1, r15
     dac:	0c f0       	brlt	.+2      	; 0xdb0 <trans+0x668>
     dae:	3c c0       	rjmp	.+120    	; 0xe28 <trans+0x6e0>
     db0:	00 e0       	ldi	r16, 0x00	; 0
     db2:	10 e0       	ldi	r17, 0x00	; 0
     db4:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <num1.2197>
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	7c d6       	rcall	.+3320   	; 0x1ab8 <__floatsisf>
     dc0:	4b 01       	movw	r8, r22
     dc2:	5c 01       	movw	r10, r24
     dc4:	c0 91 84 02 	lds	r28, 0x0284	; 0x800284 <holder2.2195>
     dc8:	6c 2f       	mov	r22, r28
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	71 d6       	rcall	.+3298   	; 0x1ab4 <__floatunsisf>
     dd2:	9b 01       	movw	r18, r22
     dd4:	ac 01       	movw	r20, r24
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	80 e2       	ldi	r24, 0x20	; 32
     ddc:	91 e4       	ldi	r25, 0x41	; 65
     dde:	5b d7       	rcall	.+3766   	; 0x1c96 <pow>
     de0:	2b 01       	movw	r4, r22
     de2:	3c 01       	movw	r6, r24
     de4:	9b 01       	movw	r18, r22
     de6:	ac 01       	movw	r20, r24
				num1 = num1 - (holder3 * pow(10, holder2));
     de8:	c5 01       	movw	r24, r10
     dea:	b4 01       	movw	r22, r8
     dec:	ca d5       	rcall	.+2964   	; 0x1982 <__divsf3>
     dee:	36 d6       	rcall	.+3180   	; 0x1a5c <__fixunssfsi>
     df0:	d6 2f       	mov	r29, r22
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	5f d6       	rcall	.+3262   	; 0x1ab8 <__floatsisf>
     dfa:	a3 01       	movw	r20, r6
     dfc:	92 01       	movw	r18, r4
     dfe:	e8 d6       	rcall	.+3536   	; 0x1bd0 <__mulsf3>
     e00:	9b 01       	movw	r18, r22
     e02:	ac 01       	movw	r20, r24
     e04:	c5 01       	movw	r24, r10
				LCD_WriteData(changetoChar(holder3));
     e06:	b4 01       	movw	r22, r8
     e08:	57 d5       	rcall	.+2734   	; 0x18b8 <__subsf3>
     e0a:	28 d6       	rcall	.+3152   	; 0x1a5c <__fixunssfsi>
     e0c:	60 93 83 02 	sts	0x0283, r22	; 0x800283 <num1.2197>
				holder2--;
     e10:	8d 2f       	mov	r24, r29
     e12:	50 db       	rcall	.-2400   	; 0x4b4 <changetoChar>
			
			holder2 = place - 1;
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     e14:	9a da       	rcall	.-2764   	; 0x34a <LCD_WriteData>
     e16:	c1 50       	subi	r28, 0x01	; 1
     e18:	c0 93 84 02 	sts	0x0284, r28	; 0x800284 <holder2.2195>
				num1 = num1 - (holder3 * pow(10, holder2));
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			
			holder2 = 1;
     e1c:	0f 5f       	subi	r16, 0xFF	; 255
     e1e:	1f 4f       	sbci	r17, 0xFF	; 255
     e20:	e0 16       	cp	r14, r16
			LCD_WriteData('.');
     e22:	f1 06       	cpc	r15, r17
     e24:	09 f0       	breq	.+2      	; 0xe28 <trans+0x6e0>
     e26:	c6 cf       	rjmp	.-116    	; 0xdb4 <trans+0x66c>
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <holder2.2195>
			for(int i = 0; i < 2; i++)
			{
				holder3 = num2/(pow(10,holder2));
     e2e:	8e e2       	ldi	r24, 0x2E	; 46
     e30:	8c da       	rcall	.-2792   	; 0x34a <LCD_WriteData>
     e32:	02 e0       	ldi	r16, 0x02	; 2
     e34:	10 e0       	ldi	r17, 0x00	; 0
     e36:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <num2.2198>
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	3b d6       	rcall	.+3190   	; 0x1ab8 <__floatsisf>
     e42:	4b 01       	movw	r8, r22
     e44:	5c 01       	movw	r10, r24
     e46:	c0 91 84 02 	lds	r28, 0x0284	; 0x800284 <holder2.2195>
     e4a:	6c 2f       	mov	r22, r28
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	30 d6       	rcall	.+3168   	; 0x1ab4 <__floatunsisf>
     e54:	9b 01       	movw	r18, r22
     e56:	ac 01       	movw	r20, r24
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	80 e2       	ldi	r24, 0x20	; 32
     e5e:	91 e4       	ldi	r25, 0x41	; 65
     e60:	1a d7       	rcall	.+3636   	; 0x1c96 <pow>
     e62:	2b 01       	movw	r4, r22
     e64:	3c 01       	movw	r6, r24
     e66:	9b 01       	movw	r18, r22
     e68:	ac 01       	movw	r20, r24
     e6a:	c5 01       	movw	r24, r10
     e6c:	b4 01       	movw	r22, r8
     e6e:	89 d5       	rcall	.+2834   	; 0x1982 <__divsf3>
     e70:	f5 d5       	rcall	.+3050   	; 0x1a5c <__fixunssfsi>
				num2 = num2 - (holder3 * pow(10, holder2));
     e72:	d6 2f       	mov	r29, r22
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	1e d6       	rcall	.+3132   	; 0x1ab8 <__floatsisf>
     e7c:	a3 01       	movw	r20, r6
     e7e:	92 01       	movw	r18, r4
     e80:	a7 d6       	rcall	.+3406   	; 0x1bd0 <__mulsf3>
     e82:	9b 01       	movw	r18, r22
     e84:	ac 01       	movw	r20, r24
     e86:	c5 01       	movw	r24, r10
     e88:	b4 01       	movw	r22, r8
     e8a:	16 d5       	rcall	.+2604   	; 0x18b8 <__subsf3>
     e8c:	e7 d5       	rcall	.+3022   	; 0x1a5c <__fixunssfsi>
     e8e:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <num2.2198>
     e92:	8d 2f       	mov	r24, r29
     e94:	0f db       	rcall	.-2530   	; 0x4b4 <changetoChar>
     e96:	59 da       	rcall	.-2894   	; 0x34a <LCD_WriteData>
				LCD_WriteData(changetoChar(holder3));
     e98:	c1 50       	subi	r28, 0x01	; 1
     e9a:	c0 93 84 02 	sts	0x0284, r28	; 0x800284 <holder2.2195>
     e9e:	01 50       	subi	r16, 0x01	; 1
     ea0:	11 09       	sbc	r17, r1
				holder2--;
     ea2:	09 f0       	breq	.+2      	; 0xea6 <trans+0x75e>
     ea4:	c8 cf       	rjmp	.-112    	; 0xe36 <trans+0x6ee>
     ea6:	c8 e0       	ldi	r28, 0x08	; 8
     ea8:	d0 e0       	ldi	r29, 0x00	; 0
     eaa:	0f c0       	rjmp	.+30     	; 0xeca <trans+0x782>
				holder2--;
			}
			
			holder2 = 1;
			LCD_WriteData('.');
			for(int i = 0; i < 2; i++)
     eac:	c1 e0       	ldi	r28, 0x01	; 1
     eae:	d0 e0       	ldi	r29, 0x00	; 0
     eb0:	0c c0       	rjmp	.+24     	; 0xeca <trans+0x782>
     eb2:	c5 e0       	ldi	r28, 0x05	; 5
     eb4:	d0 e0       	ldi	r29, 0x00	; 0
	
	switch (state)
	{
		case startT:
		{
			state = pauseT;
     eb6:	09 c0       	rjmp	.+18     	; 0xeca <trans+0x782>
     eb8:	c9 e0       	ldi	r28, 0x09	; 9
     eba:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		case picked:
		{
			state = picked1;
     ebc:	06 c0       	rjmp	.+12     	; 0xeca <trans+0x782>
     ebe:	60 e8       	ldi	r22, 0x80	; 128
     ec0:	71 e0       	ldi	r23, 0x01	; 1
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	66 da       	rcall	.-2868   	; 0x392 <LCD_DisplayString>
     ec6:	c4 e0       	ldi	r28, 0x04	; 4
		{
			break;
		}
		case picked:
		{
			LCD_DisplayString(1, "Done  |  AddItem A    |    B");
     ec8:	d0 e0       	ldi	r29, 0x00	; 0
     eca:	ce 01       	movw	r24, r28
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
			break;
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
		{
			break;
		}
	}
	return state;
}
     ed6:	ef 90       	pop	r14
     ed8:	bf 90       	pop	r11
     eda:	af 90       	pop	r10
     edc:	9f 90       	pop	r9
     ede:	8f 90       	pop	r8
     ee0:	7f 90       	pop	r7
     ee2:	6f 90       	pop	r6
     ee4:	5f 90       	pop	r5
     ee6:	4f 90       	pop	r4
     ee8:	08 95       	ret

00000eea <setting>:
     eea:	4f 92       	push	r4
     eec:	5f 92       	push	r5
     eee:	6f 92       	push	r6
     ef0:	7f 92       	push	r7
     ef2:	8f 92       	push	r8
     ef4:	9f 92       	push	r9

int setting(int state)
{
     ef6:	af 92       	push	r10
     ef8:	bf 92       	push	r11
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	ec 01       	movw	r28, r24
	static unsigned char holder, holder2, holder3, num1, num2;
	static int decval, intval;
	static unsigned char number[7] = {0};

	
	switch(state)
     f0c:	89 30       	cpi	r24, 0x09	; 9
     f0e:	91 05       	cpc	r25, r1
     f10:	08 f0       	brcs	.+2      	; 0xf14 <setting+0x2a>
     f12:	43 c3       	rjmp	.+1670   	; 0x159a <setting+0x6b0>
     f14:	fc 01       	movw	r30, r24
     f16:	ed 59       	subi	r30, 0x9D	; 157
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__tablejump2__>
			break;
		}
		case pauseS:
		{
			holderMoney = 0;
			place = 0;
     f1e:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <place.2263>
			count = 0;
     f22:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <count.2264>
			holder = 0;
			holder2 = 0;
     f26:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <holder2.2267>
			whichAddr = 0;
     f2a:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <whichAddr.2265>
			holder3 = 0;
			num1 = 0;
     f2e:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <num1.2269>
			num2 = 0;
     f32:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <num2.2270>
			clearArray(number, 7);
     f36:	67 e0       	ldi	r22, 0x07	; 7
     f38:	8e e6       	ldi	r24, 0x6E	; 110
     f3a:	92 e0       	ldi	r25, 0x02	; 2
     f3c:	e8 da       	rcall	.-2608   	; 0x50e <clearArray>
			if(pos == 4)
     f3e:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <pos>
     f42:	84 30       	cpi	r24, 0x04	; 4
     f44:	09 f0       	breq	.+2      	; 0xf48 <setting+0x5e>
     f46:	2e c3       	rjmp	.+1628   	; 0x15a4 <setting+0x6ba>
			{
				state = opt;
				LCD_DisplayString(1, "  A    |   B      code |   items");
     f48:	6d e9       	ldi	r22, 0x9D	; 157
     f4a:	71 e0       	ldi	r23, 0x01	; 1
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	21 da       	rcall	.-3006   	; 0x392 <LCD_DisplayString>
			num1 = 0;
			num2 = 0;
			clearArray(number, 7);
			if(pos == 4)
			{
				state = opt;
     f50:	c2 e0       	ldi	r28, 0x02	; 2
     f52:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		case opt:
		{
			key = GetKeypadKey();
     f54:	27 c3       	rjmp	.+1614   	; 0x15a4 <setting+0x6ba>
     f56:	e5 da       	rcall	.-2614   	; 0x522 <GetKeypadKey>
     f58:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <key>
			if (key == 'A')
     f5c:	81 34       	cpi	r24, 0x41	; 65
     f5e:	29 f4       	brne	.+10     	; 0xf6a <setting+0x80>
			{
				state = codeSet;
				LCD_DisplayString(1, "enter new code:  ");
     f60:	6e eb       	ldi	r22, 0xBE	; 190
     f62:	71 e0       	ldi	r23, 0x01	; 1
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	15 da       	rcall	.-3030   	; 0x392 <LCD_DisplayString>
     f68:	0f c3       	rjmp	.+1566   	; 0x1588 <setting+0x69e>
			}
			else if(key == 'B')
     f6a:	82 34       	cpi	r24, 0x42	; 66
     f6c:	09 f0       	breq	.+2      	; 0xf70 <setting+0x86>
			{
				LCD_DisplayString(1, "A     B           ");
     f6e:	1a c3       	rjmp	.+1588   	; 0x15a4 <setting+0x6ba>
     f70:	60 ed       	ldi	r22, 0xD0	; 208
     f72:	71 e0       	ldi	r23, 0x01	; 1
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	0d da       	rcall	.-3046   	; 0x392 <LCD_DisplayString>
				
				//writing $$ of A
				holderMoney = eeprom_read_float((float *)1);
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <eeprom_read_dword>
     f80:	4b 01       	movw	r8, r22
				
				intval = (int)holderMoney;
     f82:	5c 01       	movw	r10, r24
     f84:	66 d5       	rcall	.+2764   	; 0x1a52 <__fixsfsi>
     f86:	6b 01       	movw	r12, r22
     f88:	7c 01       	movw	r14, r24
     f8a:	70 93 6d 02 	sts	0x026D, r23	; 0x80026d <intval.2272+0x1>
     f8e:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <intval.2272>
				holderMoney = (holderMoney - (int)holderMoney) * 100;
				decval = (int)holderMoney;
				
				num1 = (unsigned char)intval;
     f92:	c6 2f       	mov	r28, r22
     f94:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <num1.2269>
				num2 = (unsigned char)decval;
     f98:	07 2e       	mov	r0, r23
     f9a:	00 0c       	add	r0, r0
     f9c:	88 0b       	sbc	r24, r24
     f9e:	99 0b       	sbc	r25, r25
     fa0:	8b d5       	rcall	.+2838   	; 0x1ab8 <__floatsisf>
     fa2:	9b 01       	movw	r18, r22
     fa4:	ac 01       	movw	r20, r24
     fa6:	c5 01       	movw	r24, r10
     fa8:	b4 01       	movw	r22, r8
     faa:	86 d4       	rcall	.+2316   	; 0x18b8 <__subsf3>
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	48 ec       	ldi	r20, 0xC8	; 200
     fb2:	52 e4       	ldi	r21, 0x42	; 66
     fb4:	0d d6       	rcall	.+3098   	; 0x1bd0 <__mulsf3>
     fb6:	4d d5       	rcall	.+2714   	; 0x1a52 <__fixsfsi>
     fb8:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <num2.2270>
								
				
				if(num1 >= 99)
     fbc:	c3 36       	cpi	r28, 0x63	; 99
     fbe:	18 f0       	brcs	.+6      	; 0xfc6 <setting+0xdc>
				{
					num1++;
     fc0:	c3 94       	inc	r12
     fc2:	c0 92 76 02 	sts	0x0276, r12	; 0x800276 <num1.2269>
				}
				place = findHowManyB4Dec(num1);
     fc6:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <num1.2269>
     fca:	93 da       	rcall	.-2778   	; 0x4f2 <findHowManyB4Dec>
     fcc:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <place.2263>
     fd0:	9f ef       	ldi	r25, 0xFF	; 255
				
				holder2 = place - 1;
     fd2:	98 0f       	add	r25, r24
     fd4:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <holder2.2267>
     fd8:	e8 2e       	mov	r14, r24
				
				unsigned char holder3 = 0;
				
				for(int i = 0; i < place; i++)
     fda:	f1 2c       	mov	r15, r1
     fdc:	1e 14       	cp	r1, r14
     fde:	1f 04       	cpc	r1, r15
     fe0:	0c f0       	brlt	.+2      	; 0xfe4 <setting+0xfa>
     fe2:	3c c0       	rjmp	.+120    	; 0x105c <setting+0x172>
     fe4:	00 e0       	ldi	r16, 0x00	; 0
     fe6:	10 e0       	ldi	r17, 0x00	; 0
				{
					holder3 = num1/(pow(10,holder2));
     fe8:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <num1.2269>
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	62 d5       	rcall	.+2756   	; 0x1ab8 <__floatsisf>
     ff4:	4b 01       	movw	r8, r22
     ff6:	5c 01       	movw	r10, r24
     ff8:	c0 91 78 02 	lds	r28, 0x0278	; 0x800278 <holder2.2267>
     ffc:	6c 2f       	mov	r22, r28
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	57 d5       	rcall	.+2734   	; 0x1ab4 <__floatunsisf>
    1006:	9b 01       	movw	r18, r22
    1008:	ac 01       	movw	r20, r24
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	80 e2       	ldi	r24, 0x20	; 32
    1010:	91 e4       	ldi	r25, 0x41	; 65
    1012:	41 d6       	rcall	.+3202   	; 0x1c96 <pow>
    1014:	2b 01       	movw	r4, r22
    1016:	3c 01       	movw	r6, r24
    1018:	9b 01       	movw	r18, r22
    101a:	ac 01       	movw	r20, r24
    101c:	c5 01       	movw	r24, r10
    101e:	b4 01       	movw	r22, r8
    1020:	b0 d4       	rcall	.+2400   	; 0x1982 <__divsf3>
    1022:	1c d5       	rcall	.+2616   	; 0x1a5c <__fixunssfsi>
					num1 = num1 - (holder3 * pow(10, holder2));
    1024:	d6 2f       	mov	r29, r22
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	45 d5       	rcall	.+2698   	; 0x1ab8 <__floatsisf>
    102e:	a3 01       	movw	r20, r6
    1030:	92 01       	movw	r18, r4
    1032:	ce d5       	rcall	.+2972   	; 0x1bd0 <__mulsf3>
    1034:	9b 01       	movw	r18, r22
    1036:	ac 01       	movw	r20, r24
    1038:	c5 01       	movw	r24, r10
    103a:	b4 01       	movw	r22, r8
    103c:	3d d4       	rcall	.+2170   	; 0x18b8 <__subsf3>
    103e:	0e d5       	rcall	.+2588   	; 0x1a5c <__fixunssfsi>
    1040:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <num1.2269>
					LCD_WriteData(changetoChar(holder3));
    1044:	8d 2f       	mov	r24, r29
    1046:	36 da       	rcall	.-2964   	; 0x4b4 <changetoChar>
    1048:	80 d9       	rcall	.-3328   	; 0x34a <LCD_WriteData>
    104a:	c1 50       	subi	r28, 0x01	; 1
					holder2--;
    104c:	c0 93 78 02 	sts	0x0278, r28	; 0x800278 <holder2.2267>
    1050:	0f 5f       	subi	r16, 0xFF	; 255
				
				holder2 = place - 1;
				
				unsigned char holder3 = 0;
				
				for(int i = 0; i < place; i++)
    1052:	1f 4f       	sbci	r17, 0xFF	; 255
    1054:	0e 15       	cp	r16, r14
    1056:	1f 05       	cpc	r17, r15
    1058:	09 f0       	breq	.+2      	; 0x105c <setting+0x172>
    105a:	c6 cf       	rjmp	.-116    	; 0xfe8 <setting+0xfe>
					num1 = num1 - (holder3 * pow(10, holder2));
					LCD_WriteData(changetoChar(holder3));
					holder2--;
				}
				
				holder2 = 1;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <holder2.2267>
				LCD_WriteData('.');
    1062:	8e e2       	ldi	r24, 0x2E	; 46
    1064:	72 d9       	rcall	.-3356   	; 0x34a <LCD_WriteData>
    1066:	02 e0       	ldi	r16, 0x02	; 2
    1068:	10 e0       	ldi	r17, 0x00	; 0
				for(int i = 0; i < 2; i++)
				{
					holder3 = num2/(pow(10,holder2));
    106a:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <num2.2270>
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	21 d5       	rcall	.+2626   	; 0x1ab8 <__floatsisf>
    1076:	6b 01       	movw	r12, r22
    1078:	7c 01       	movw	r14, r24
    107a:	c0 91 78 02 	lds	r28, 0x0278	; 0x800278 <holder2.2267>
    107e:	6c 2f       	mov	r22, r28
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	16 d5       	rcall	.+2604   	; 0x1ab4 <__floatunsisf>
    1088:	9b 01       	movw	r18, r22
    108a:	ac 01       	movw	r20, r24
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e2       	ldi	r24, 0x20	; 32
    1092:	91 e4       	ldi	r25, 0x41	; 65
    1094:	00 d6       	rcall	.+3072   	; 0x1c96 <pow>
    1096:	4b 01       	movw	r8, r22
    1098:	5c 01       	movw	r10, r24
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	c7 01       	movw	r24, r14
    10a0:	b6 01       	movw	r22, r12
					num2 = num2 - (holder3 * pow(10, holder2));
    10a2:	6f d4       	rcall	.+2270   	; 0x1982 <__divsf3>
    10a4:	db d4       	rcall	.+2486   	; 0x1a5c <__fixunssfsi>
    10a6:	d6 2f       	mov	r29, r22
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	04 d5       	rcall	.+2568   	; 0x1ab8 <__floatsisf>
    10b0:	a5 01       	movw	r20, r10
    10b2:	94 01       	movw	r18, r8
    10b4:	8d d5       	rcall	.+2842   	; 0x1bd0 <__mulsf3>
    10b6:	9b 01       	movw	r18, r22
    10b8:	ac 01       	movw	r20, r24
    10ba:	c7 01       	movw	r24, r14
    10bc:	b6 01       	movw	r22, r12
    10be:	fc d3       	rcall	.+2040   	; 0x18b8 <__subsf3>
    10c0:	cd d4       	rcall	.+2458   	; 0x1a5c <__fixunssfsi>
    10c2:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <num2.2270>
					LCD_WriteData(changetoChar(holder3));
    10c6:	8d 2f       	mov	r24, r29
    10c8:	f5 d9       	rcall	.-3094   	; 0x4b4 <changetoChar>
    10ca:	3f d9       	rcall	.-3458   	; 0x34a <LCD_WriteData>
					holder2--;
    10cc:	c1 50       	subi	r28, 0x01	; 1
    10ce:	c0 93 78 02 	sts	0x0278, r28	; 0x800278 <holder2.2267>
					holder2--;
				}
				
				holder2 = 1;
				LCD_WriteData('.');
				for(int i = 0; i < 2; i++)
    10d2:	01 50       	subi	r16, 0x01	; 1
    10d4:	11 09       	sbc	r17, r1
					LCD_WriteData(changetoChar(holder3));
					holder2--;
				}
				
				//writing $$ of B
				holderMoney = eeprom_read_float((float *)10);
    10d6:	09 f0       	breq	.+2      	; 0x10da <setting+0x1f0>
    10d8:	c8 cf       	rjmp	.-112    	; 0x106a <setting+0x180>
    10da:	8a e0       	ldi	r24, 0x0A	; 10
    10dc:	90 e0       	ldi	r25, 0x00	; 0
				
				intval = (int)holderMoney;
    10de:	51 d7       	rcall	.+3746   	; 0x1f82 <eeprom_read_dword>
    10e0:	4b 01       	movw	r8, r22
    10e2:	5c 01       	movw	r10, r24
    10e4:	b6 d4       	rcall	.+2412   	; 0x1a52 <__fixsfsi>
    10e6:	6b 01       	movw	r12, r22
    10e8:	7c 01       	movw	r14, r24
    10ea:	70 93 6d 02 	sts	0x026D, r23	; 0x80026d <intval.2272+0x1>
				holderMoney = (holderMoney - (int)holderMoney) * 100;
				decval = (int)holderMoney;
				
				num1 = (unsigned char)intval;
    10ee:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <intval.2272>
				num2 = (unsigned char)decval;
    10f2:	c6 2f       	mov	r28, r22
    10f4:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <num1.2269>
    10f8:	07 2e       	mov	r0, r23
    10fa:	00 0c       	add	r0, r0
    10fc:	88 0b       	sbc	r24, r24
    10fe:	99 0b       	sbc	r25, r25
    1100:	db d4       	rcall	.+2486   	; 0x1ab8 <__floatsisf>
    1102:	9b 01       	movw	r18, r22
    1104:	ac 01       	movw	r20, r24
    1106:	c5 01       	movw	r24, r10
    1108:	b4 01       	movw	r22, r8
    110a:	d6 d3       	rcall	.+1964   	; 0x18b8 <__subsf3>
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	48 ec       	ldi	r20, 0xC8	; 200
    1112:	52 e4       	ldi	r21, 0x42	; 66
    1114:	5d d5       	rcall	.+2746   	; 0x1bd0 <__mulsf3>
    1116:	9d d4       	rcall	.+2362   	; 0x1a52 <__fixsfsi>
    1118:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <num2.2270>
				
				LCD_WriteData(' ');
    111c:	80 e2       	ldi	r24, 0x20	; 32
    111e:	15 d9       	rcall	.-3542   	; 0x34a <LCD_WriteData>
				LCD_WriteData(' ');
    1120:	80 e2       	ldi	r24, 0x20	; 32
    1122:	13 d9       	rcall	.-3546   	; 0x34a <LCD_WriteData>
				LCD_WriteData(' ');
    1124:	80 e2       	ldi	r24, 0x20	; 32
    1126:	11 d9       	rcall	.-3550   	; 0x34a <LCD_WriteData>
    1128:	80 e2       	ldi	r24, 0x20	; 32
				LCD_WriteData(' ');
    112a:	0f d9       	rcall	.-3554   	; 0x34a <LCD_WriteData>
    112c:	c3 36       	cpi	r28, 0x63	; 99
				
				
				if(num1 >= 99)
    112e:	18 f0       	brcs	.+6      	; 0x1136 <setting+0x24c>
    1130:	c3 94       	inc	r12
				{
					num1++;
    1132:	c0 92 76 02 	sts	0x0276, r12	; 0x800276 <num1.2269>
    1136:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <num1.2269>
				}
				place = findHowManyB4Dec(num1);
    113a:	db d9       	rcall	.-3146   	; 0x4f2 <findHowManyB4Dec>
    113c:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <place.2263>
				
				holder2 = place - 1;
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	98 0f       	add	r25, r24
    1144:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <holder2.2267>
				
				for(int i = 0; i < place; i++)
    1148:	e8 2e       	mov	r14, r24
    114a:	f1 2c       	mov	r15, r1
    114c:	1e 14       	cp	r1, r14
    114e:	1f 04       	cpc	r1, r15
    1150:	0c f0       	brlt	.+2      	; 0x1154 <setting+0x26a>
				{
					holder3 = num1/(pow(10,holder2));
    1152:	3c c0       	rjmp	.+120    	; 0x11cc <setting+0x2e2>
    1154:	00 e0       	ldi	r16, 0x00	; 0
    1156:	10 e0       	ldi	r17, 0x00	; 0
    1158:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <num1.2269>
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	aa d4       	rcall	.+2388   	; 0x1ab8 <__floatsisf>
    1164:	4b 01       	movw	r8, r22
    1166:	5c 01       	movw	r10, r24
    1168:	c0 91 78 02 	lds	r28, 0x0278	; 0x800278 <holder2.2267>
    116c:	6c 2f       	mov	r22, r28
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9f d4       	rcall	.+2366   	; 0x1ab4 <__floatunsisf>
    1176:	9b 01       	movw	r18, r22
    1178:	ac 01       	movw	r20, r24
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	80 e2       	ldi	r24, 0x20	; 32
    1180:	91 e4       	ldi	r25, 0x41	; 65
    1182:	89 d5       	rcall	.+2834   	; 0x1c96 <pow>
    1184:	2b 01       	movw	r4, r22
    1186:	3c 01       	movw	r6, r24
    1188:	9b 01       	movw	r18, r22
    118a:	ac 01       	movw	r20, r24
    118c:	c5 01       	movw	r24, r10
    118e:	b4 01       	movw	r22, r8
    1190:	f8 d3       	rcall	.+2032   	; 0x1982 <__divsf3>
					num1 = num1 - (holder3 * pow(10, holder2));
    1192:	64 d4       	rcall	.+2248   	; 0x1a5c <__fixunssfsi>
    1194:	d6 2f       	mov	r29, r22
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	8d d4       	rcall	.+2330   	; 0x1ab8 <__floatsisf>
    119e:	a3 01       	movw	r20, r6
    11a0:	92 01       	movw	r18, r4
    11a2:	16 d5       	rcall	.+2604   	; 0x1bd0 <__mulsf3>
    11a4:	9b 01       	movw	r18, r22
    11a6:	ac 01       	movw	r20, r24
    11a8:	c5 01       	movw	r24, r10
    11aa:	b4 01       	movw	r22, r8
    11ac:	85 d3       	rcall	.+1802   	; 0x18b8 <__subsf3>
    11ae:	56 d4       	rcall	.+2220   	; 0x1a5c <__fixunssfsi>
    11b0:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <num1.2269>
					LCD_WriteData(changetoChar(holder3));
    11b4:	8d 2f       	mov	r24, r29
    11b6:	7e d9       	rcall	.-3332   	; 0x4b4 <changetoChar>
    11b8:	c8 d8       	rcall	.-3696   	; 0x34a <LCD_WriteData>
					holder2--;
    11ba:	c1 50       	subi	r28, 0x01	; 1
    11bc:	c0 93 78 02 	sts	0x0278, r28	; 0x800278 <holder2.2267>
				}
				place = findHowManyB4Dec(num1);
				
				holder2 = place - 1;
				
				for(int i = 0; i < place; i++)
    11c0:	0f 5f       	subi	r16, 0xFF	; 255
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	e0 16       	cp	r14, r16
					num1 = num1 - (holder3 * pow(10, holder2));
					LCD_WriteData(changetoChar(holder3));
					holder2--;
				}
				
				holder2 = 1;
    11c6:	f1 06       	cpc	r15, r17
    11c8:	09 f0       	breq	.+2      	; 0x11cc <setting+0x2e2>
    11ca:	c6 cf       	rjmp	.-116    	; 0x1158 <setting+0x26e>
				LCD_WriteData('.');
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <holder2.2267>
    11d2:	8e e2       	ldi	r24, 0x2E	; 46
    11d4:	ba d8       	rcall	.-3724   	; 0x34a <LCD_WriteData>
				for(int i = 0; i < 2; i++)
				{
					holder3 = num2/(pow(10,holder2));
    11d6:	02 e0       	ldi	r16, 0x02	; 2
    11d8:	10 e0       	ldi	r17, 0x00	; 0
    11da:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <num2.2270>
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	69 d4       	rcall	.+2258   	; 0x1ab8 <__floatsisf>
    11e6:	6b 01       	movw	r12, r22
    11e8:	7c 01       	movw	r14, r24
    11ea:	c0 91 78 02 	lds	r28, 0x0278	; 0x800278 <holder2.2267>
    11ee:	6c 2f       	mov	r22, r28
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	5e d4       	rcall	.+2236   	; 0x1ab4 <__floatunsisf>
    11f8:	9b 01       	movw	r18, r22
    11fa:	ac 01       	movw	r20, r24
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	80 e2       	ldi	r24, 0x20	; 32
    1202:	91 e4       	ldi	r25, 0x41	; 65
    1204:	48 d5       	rcall	.+2704   	; 0x1c96 <pow>
    1206:	4b 01       	movw	r8, r22
    1208:	5c 01       	movw	r10, r24
    120a:	9b 01       	movw	r18, r22
    120c:	ac 01       	movw	r20, r24
    120e:	c7 01       	movw	r24, r14
    1210:	b6 01       	movw	r22, r12
    1212:	b7 d3       	rcall	.+1902   	; 0x1982 <__divsf3>
    1214:	23 d4       	rcall	.+2118   	; 0x1a5c <__fixunssfsi>
					num2 = num2 - (holder3 * pow(10, holder2));
    1216:	d6 2f       	mov	r29, r22
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	4c d4       	rcall	.+2200   	; 0x1ab8 <__floatsisf>
    1220:	a5 01       	movw	r20, r10
    1222:	94 01       	movw	r18, r8
    1224:	d5 d4       	rcall	.+2474   	; 0x1bd0 <__mulsf3>
    1226:	9b 01       	movw	r18, r22
    1228:	ac 01       	movw	r20, r24
    122a:	c7 01       	movw	r24, r14
    122c:	b6 01       	movw	r22, r12
    122e:	44 d3       	rcall	.+1672   	; 0x18b8 <__subsf3>
    1230:	15 d4       	rcall	.+2090   	; 0x1a5c <__fixunssfsi>
    1232:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <num2.2270>
    1236:	8d 2f       	mov	r24, r29
					LCD_WriteData(changetoChar(holder3));
    1238:	3d d9       	rcall	.-3462   	; 0x4b4 <changetoChar>
    123a:	87 d8       	rcall	.-3826   	; 0x34a <LCD_WriteData>
    123c:	c1 50       	subi	r28, 0x01	; 1
    123e:	c0 93 78 02 	sts	0x0278, r28	; 0x800278 <holder2.2267>
					holder2--;
    1242:	01 50       	subi	r16, 0x01	; 1
    1244:	11 09       	sbc	r17, r1
    1246:	09 f0       	breq	.+2      	; 0x124a <setting+0x360>
    1248:	c8 cf       	rjmp	.-112    	; 0x11da <setting+0x2f0>
					holder2--;
				}
				
				holder2 = 1;
				LCD_WriteData('.');
				for(int i = 0; i < 2; i++)
    124a:	c5 e0       	ldi	r28, 0x05	; 5
    124c:	d0 e0       	ldi	r29, 0x00	; 0
					holder3 = num2/(pow(10,holder2));
					num2 = num2 - (holder3 * pow(10, holder2));
					LCD_WriteData(changetoChar(holder3));
					holder2--;
				}
				state = pricePick;
    124e:	aa c1       	rjmp	.+852    	; 0x15a4 <setting+0x6ba>
    1250:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <key>
			}
			break;
		}
		case codeSet:
		{
			if (key == '#')
    1254:	83 32       	cpi	r24, 0x23	; 35
    1256:	09 f0       	breq	.+2      	; 0x125a <setting+0x370>
    1258:	97 c1       	rjmp	.+814    	; 0x1588 <setting+0x69e>
			{
				state = codeWrite;
				intval = 20;
    125a:	84 e1       	ldi	r24, 0x14	; 20
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <intval.2272+0x1>
    1262:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <intval.2272>
			}
			break;
		}
		case codeWrite:
		{
			eeprom_write_byte(((uint8_t *) 26), '1');
    1266:	61 e3       	ldi	r22, 0x31	; 49
    1268:	8a e1       	ldi	r24, 0x1A	; 26
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	8f d6       	rcall	.+3358   	; 0x1f8c <eeprom_write_byte>
    126e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <count.2264>
			for(int i = 0; i < count ; i++)
    1272:	81 11       	cpse	r24, r1
    1274:	83 c0       	rjmp	.+262    	; 0x137c <setting+0x492>
    1276:	c4 e0       	ldi	r28, 0x04	; 4
    1278:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		case codeWrite:
		{
			LCD_DisplayString(1, " settings | menu     ");
    127a:	94 c1       	rjmp	.+808    	; 0x15a4 <setting+0x6ba>
    127c:	63 ee       	ldi	r22, 0xE3	; 227
    127e:	71 e0       	ldi	r23, 0x01	; 1
    1280:	81 e0       	ldi	r24, 0x01	; 1
			LCD_WriteData(2);
    1282:	87 d8       	rcall	.-3826   	; 0x392 <LCD_DisplayString>
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	61 d8       	rcall	.-3902   	; 0x34a <LCD_WriteData>
			LCD_Cursor(33);
    1288:	81 e2       	ldi	r24, 0x21	; 33
    128a:	48 d8       	rcall	.-3952   	; 0x31c <LCD_Cursor>
    128c:	81 e0       	ldi	r24, 0x01	; 1
			state = done;
			//change to custom char;
			holder2 = 1;
    128e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <holder2.2267>
		case codeWrite:
		{
			LCD_DisplayString(1, " settings | menu     ");
			LCD_WriteData(2);
			LCD_Cursor(33);
			state = done;
    1292:	c8 e0       	ldi	r28, 0x08	; 8
			//change to custom char;
			holder2 = 1;
			
			break;
    1294:	d0 e0       	ldi	r29, 0x00	; 0
		}
		case pricePick:
		{
			key = GetKeypadKey();
    1296:	86 c1       	rjmp	.+780    	; 0x15a4 <setting+0x6ba>
    1298:	44 d9       	rcall	.-3448   	; 0x522 <GetKeypadKey>
    129a:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <key>
			if(key == 'A')
    129e:	81 34       	cpi	r24, 0x41	; 65
    12a0:	39 f4       	brne	.+14     	; 0x12b0 <setting+0x3c6>
			{
				state = priceSet;
				whichAddr = 1;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <whichAddr.2265>
				LCD_DisplayString(1, "Enter Price:     ");
    12a8:	69 ef       	ldi	r22, 0xF9	; 249
    12aa:	71 e0       	ldi	r23, 0x01	; 1
    12ac:	72 d8       	rcall	.-3868   	; 0x392 <LCD_DisplayString>
    12ae:	65 c1       	rjmp	.+714    	; 0x157a <setting+0x690>
    12b0:	82 34       	cpi	r24, 0x42	; 66
				//variable set to indicate A chosen;
			}
			else if(key == 'B')
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <setting+0x3cc>
    12b4:	77 c1       	rjmp	.+750    	; 0x15a4 <setting+0x6ba>
    12b6:	82 e0       	ldi	r24, 0x02	; 2
			{
				state = priceSet;
				whichAddr = 2;
    12b8:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <whichAddr.2265>
    12bc:	69 ef       	ldi	r22, 0xF9	; 249
				LCD_DisplayString(1, "Enter Price:     ");
    12be:	71 e0       	ldi	r23, 0x01	; 1
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	67 d8       	rcall	.-3890   	; 0x392 <LCD_DisplayString>
    12c4:	5a c1       	rjmp	.+692    	; 0x157a <setting+0x690>
    12c6:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <key>
			}
			break;
		}
		case priceSet:
		{
			if (key == '#')
    12ca:	83 32       	cpi	r24, 0x23	; 35
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <setting+0x3e6>
    12ce:	55 c1       	rjmp	.+682    	; 0x157a <setting+0x690>
    12d0:	94 c0       	rjmp	.+296    	; 0x13fa <setting+0x510>
    12d2:	63 ee       	ldi	r22, 0xE3	; 227
    12d4:	71 e0       	ldi	r23, 0x01	; 1
			}
			break;
		}
		case priceWrite:
		{
			LCD_DisplayString(1, " settings | menu     ");
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	5c d8       	rcall	.-3912   	; 0x392 <LCD_DisplayString>
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	36 d8       	rcall	.-3988   	; 0x34a <LCD_WriteData>
    12de:	81 e2       	ldi	r24, 0x21	; 33
			LCD_WriteData(2);
    12e0:	1d d8       	rcall	.-4038   	; 0x31c <LCD_Cursor>
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <holder2.2267>
			LCD_Cursor(33);
    12e8:	c8 e0       	ldi	r28, 0x08	; 8
    12ea:	d0 e0       	ldi	r29, 0x00	; 0
			state = done;
			//change to custom char;
			holder2 = 1;
    12ec:	5b c1       	rjmp	.+694    	; 0x15a4 <setting+0x6ba>
    12ee:	19 d9       	rcall	.-3534   	; 0x522 <GetKeypadKey>
    12f0:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <key>
		case priceWrite:
		{
			LCD_DisplayString(1, " settings | menu     ");
			LCD_WriteData(2);
			LCD_Cursor(33);
			state = done;
    12f4:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <joy>
			
			break;
		}
		case done:
		{
			key = GetKeypadKey();
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	59 f4       	brne	.+22     	; 0x1312 <setting+0x428>
    12fc:	63 ee       	ldi	r22, 0xE3	; 227
    12fe:	71 e0       	ldi	r23, 0x01	; 1
			if(joy == 1)
    1300:	48 d8       	rcall	.-3952   	; 0x392 <LCD_DisplayString>
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	22 d8       	rcall	.-4028   	; 0x34a <LCD_WriteData>
    1306:	81 e2       	ldi	r24, 0x21	; 33
			{
				LCD_DisplayString(1, " settings | menu     ");
    1308:	09 d8       	rcall	.-4078   	; 0x31c <LCD_Cursor>
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <holder2.2267>
				LCD_WriteData(2);
    1310:	14 c0       	rjmp	.+40     	; 0x133a <setting+0x450>
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	91 f4       	brne	.+36     	; 0x133a <setting+0x450>
				LCD_Cursor(33);
    1316:	6b e0       	ldi	r22, 0x0B	; 11
    1318:	72 e0       	ldi	r23, 0x02	; 2
				holder2 = 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	3a d8       	rcall	.-3980   	; 0x392 <LCD_DisplayString>
    131e:	82 e0       	ldi	r24, 0x02	; 2
    1320:	14 d8       	rcall	.-4056   	; 0x34a <LCD_WriteData>
			}
			else if(joy == 2)
    1322:	81 e2       	ldi	r24, 0x21	; 33
    1324:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_Cursor>
			{
				LCD_DisplayString(1, " settings | menu            ");
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <holder2.2267>
    132e:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <key>
				LCD_WriteData(2);
    1332:	83 32       	cpi	r24, 0x23	; 35
    1334:	09 f0       	breq	.+2      	; 0x1338 <setting+0x44e>
				LCD_Cursor(33);
    1336:	36 c1       	rjmp	.+620    	; 0x15a4 <setting+0x6ba>
    1338:	0a c0       	rjmp	.+20     	; 0x134e <setting+0x464>
    133a:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <key>
				holder2 = 2;
    133e:	83 32       	cpi	r24, 0x23	; 35
    1340:	09 f0       	breq	.+2      	; 0x1344 <setting+0x45a>
			}
		
			if(key == '#')
    1342:	30 c1       	rjmp	.+608    	; 0x15a4 <setting+0x6ba>
    1344:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <holder2.2267>
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	09 f4       	brne	.+2      	; 0x134e <setting+0x464>
    134c:	29 c1       	rjmp	.+594    	; 0x15a0 <setting+0x6b6>
    134e:	83 e0       	ldi	r24, 0x03	; 3
    1350:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <pos>
    1354:	c1 e0       	ldi	r28, 0x01	; 1
    1356:	d0 e0       	ldi	r29, 0x00	; 0
			{
				if(holder2 == 1)
    1358:	25 c1       	rjmp	.+586    	; 0x15a4 <setting+0x6ba>
    135a:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_WriteData>
    135e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <count.2264>
					state = pauseS;
				}
				else
				{
					state = pauseS;
					pos = 3;
    1362:	e8 2f       	mov	r30, r24
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	e2 59       	subi	r30, 0x92	; 146
				{
					state = pauseS;
				}
				else
				{
					state = pauseS;
    1368:	fd 4f       	sbci	r31, 0xFD	; 253
    136a:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <key>
		case codeSet:
		{
			key = GetKeypadKey();
			if(key !=  '\0')
			{
				LCD_WriteData(key);
    136e:	90 83       	st	Z, r25
    1370:	8f 5f       	subi	r24, 0xFF	; 255
				number[count] = key;
    1372:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <count.2264>
    1376:	c3 e0       	ldi	r28, 0x03	; 3
    1378:	d0 e0       	ldi	r29, 0x00	; 0
    137a:	14 c1       	rjmp	.+552    	; 0x15a4 <setting+0x6ba>
    137c:	0e e6       	ldi	r16, 0x6E	; 110
    137e:	12 e0       	ldi	r17, 0x02	; 2
    1380:	c0 e0       	ldi	r28, 0x00	; 0
    1382:	d0 e0       	ldi	r29, 0x00	; 0
				count++;
    1384:	f8 01       	movw	r30, r16
    1386:	61 91       	ld	r22, Z+
    1388:	8f 01       	movw	r16, r30
    138a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <intval.2272>
    138e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <intval.2272+0x1>
			break;
		}
		case codeWrite:
		{
			eeprom_write_byte(((uint8_t *) 26), '1');
			for(int i = 0; i < count ; i++)
    1392:	fc d5       	rcall	.+3064   	; 0x1f8c <eeprom_write_byte>
    1394:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <intval.2272>
			{
				eeprom_write_byte(((uint8_t *) intval), number[i]);
    1398:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <intval.2272+0x1>
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <intval.2272+0x1>
    13a2:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <intval.2272>
    13a6:	21 96       	adiw	r28, 0x01	; 1
				//LCD_WriteData(eeprom_read_byte((uint8_t *) intval));
				intval++;
    13a8:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <count.2264>
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	c8 17       	cp	r28, r24
    13b0:	d9 07       	cpc	r29, r25
    13b2:	44 f3       	brlt	.-48     	; 0x1384 <setting+0x49a>
    13b4:	c4 e0       	ldi	r28, 0x04	; 4
    13b6:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		}
		case codeWrite:
		{
			eeprom_write_byte(((uint8_t *) 26), '1');
			for(int i = 0; i < count ; i++)
    13b8:	f5 c0       	rjmp	.+490    	; 0x15a4 <setting+0x6ba>
    13ba:	9f eb       	ldi	r25, 0xBF	; 191
    13bc:	98 0f       	add	r25, r24
    13be:	94 30       	cpi	r25, 0x04	; 4
    13c0:	a0 f0       	brcs	.+40     	; 0x13ea <setting+0x500>
    13c2:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_WriteData>
    13c6:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <key>
			break;
		}
		case priceSet:
		{
			key = GetKeypadKey();
			if(key !=  '\0' && key != 'A' && key != 'B' && key!= 'C' && key != 'D')
    13ca:	9e 32       	cpi	r25, 0x2E	; 46
    13cc:	21 f4       	brne	.+8      	; 0x13d6 <setting+0x4ec>
			{
				LCD_WriteData(key);
    13ce:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <count.2264>
				if (key == '.')
    13d2:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <place.2263>
    13d6:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <count.2264>
				{
					place = count;
    13da:	e8 2f       	mov	r30, r24
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
				}
				number[count] = key;
    13de:	e2 59       	subi	r30, 0x92	; 146
    13e0:	fd 4f       	sbci	r31, 0xFD	; 253
    13e2:	90 83       	st	Z, r25
    13e4:	8f 5f       	subi	r24, 0xFF	; 255
    13e6:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <count.2264>
    13ea:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <place.2263>
				count++;
    13ee:	81 50       	subi	r24, 0x01	; 1
    13f0:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <holder2.2267>
			}
			holder2 = place - 1;
    13f4:	c6 e0       	ldi	r28, 0x06	; 6
    13f6:	d0 e0       	ldi	r29, 0x00	; 0
    13f8:	d5 c0       	rjmp	.+426    	; 0x15a4 <setting+0x6ba>
    13fa:	f0 90 7a 02 	lds	r15, 0x027A	; 0x80027a <place.2263>
			holder = 0;
			break;
    13fe:	df ef       	ldi	r29, 0xFF	; 255
    1400:	df 0d       	add	r29, r15
		}
		case priceWrite:
		{
			//write to corresponding eeprom price
			holder2 = place - 1;
    1402:	cf 2c       	mov	r12, r15
    1404:	d1 2c       	mov	r13, r1
    1406:	1c 14       	cp	r1, r12
    1408:	1d 04       	cpc	r1, r13
			holder = 0;
			//LCD_DisplayString(1, "change:          ");
			for(int i = 0; i < place; i++)
    140a:	a4 f5       	brge	.+104    	; 0x1474 <setting+0x58a>
    140c:	c0 91 76 02 	lds	r28, 0x0276	; 0x800276 <num1.2269>
    1410:	0e e6       	ldi	r16, 0x6E	; 110
    1412:	12 e0       	ldi	r17, 0x02	; 2
    1414:	77 24       	eor	r7, r7
    1416:	7a 94       	dec	r7
    1418:	f8 01       	movw	r30, r16
    141a:	81 91       	ld	r24, Z+
    141c:	8f 01       	movw	r16, r30
    141e:	2c d8       	rcall	.-4008   	; 0x478 <changetoInteger>
			{
				//LCD_WriteData(number[i]);
				holder = changetoInteger(number[i]);
    1420:	e8 2e       	mov	r14, r24
    1422:	6d 2f       	mov	r22, r29
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	44 d3       	rcall	.+1672   	; 0x1ab4 <__floatunsisf>
				num1 = holder*pow(10, holder2) + num1;
    142c:	9b 01       	movw	r18, r22
    142e:	ac 01       	movw	r20, r24
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	80 e2       	ldi	r24, 0x20	; 32
    1436:	91 e4       	ldi	r25, 0x41	; 65
    1438:	2e d4       	rcall	.+2140   	; 0x1c96 <pow>
    143a:	4b 01       	movw	r8, r22
    143c:	5c 01       	movw	r10, r24
    143e:	6e 2d       	mov	r22, r14
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	38 d3       	rcall	.+1648   	; 0x1ab8 <__floatsisf>
    1448:	a5 01       	movw	r20, r10
    144a:	94 01       	movw	r18, r8
    144c:	c1 d3       	rcall	.+1922   	; 0x1bd0 <__mulsf3>
    144e:	4b 01       	movw	r8, r22
    1450:	5c 01       	movw	r10, r24
    1452:	6c 2f       	mov	r22, r28
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	2e d3       	rcall	.+1628   	; 0x1ab8 <__floatsisf>
    145c:	9b 01       	movw	r18, r22
    145e:	ac 01       	movw	r20, r24
    1460:	c5 01       	movw	r24, r10
    1462:	b4 01       	movw	r22, r8
    1464:	2a d2       	rcall	.+1108   	; 0x18ba <__addsf3>
    1466:	fa d2       	rcall	.+1524   	; 0x1a5c <__fixunssfsi>
    1468:	c6 2f       	mov	r28, r22
    146a:	d1 50       	subi	r29, 0x01	; 1
    146c:	d7 11       	cpse	r29, r7
    146e:	d4 cf       	rjmp	.-88     	; 0x1418 <setting+0x52e>
    1470:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <num1.2269>
				holder2--;
    1474:	81 e0       	ldi	r24, 0x01	; 1
		{
			//write to corresponding eeprom price
			holder2 = place - 1;
			holder = 0;
			//LCD_DisplayString(1, "change:          ");
			for(int i = 0; i < place; i++)
    1476:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <holder2.2267>
    147a:	80 90 79 02 	lds	r8, 0x0279	; 0x800279 <count.2264>
				holder = changetoInteger(number[i]);
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			//LCD_WriteData('.');
			holder2 = 1;
    147e:	ff ef       	ldi	r31, 0xFF	; 255
    1480:	cf 1a       	sub	r12, r31
    1482:	df 0a       	sbc	r13, r31
			for(int j = place+1; j < count-1; j++)
    1484:	88 2d       	mov	r24, r8
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	c8 16       	cp	r12, r24
    148c:	d9 06       	cpc	r13, r25
    148e:	0c f0       	brlt	.+2      	; 0x1492 <setting+0x5a8>
    1490:	40 c0       	rjmp	.+128    	; 0x1512 <setting+0x628>
    1492:	c0 91 75 02 	lds	r28, 0x0275	; 0x800275 <num2.2270>
    1496:	af 2c       	mov	r10, r15
    1498:	b1 2c       	mov	r11, r1
    149a:	85 01       	movw	r16, r10
    149c:	01 59       	subi	r16, 0x91	; 145
    149e:	1d 4f       	sbci	r17, 0xFD	; 253
    14a0:	83 e0       	ldi	r24, 0x03	; 3
    14a2:	8f 0d       	add	r24, r15
    14a4:	78 2e       	mov	r7, r24
    14a6:	78 18       	sub	r7, r8
    14a8:	d1 e0       	ldi	r29, 0x01	; 1
    14aa:	f8 01       	movw	r30, r16
			{
				//LCD_WriteData(number[j]);
				holder = changetoInteger(number[j]);
    14ac:	81 91       	ld	r24, Z+
    14ae:	8f 01       	movw	r16, r30
    14b0:	0e 94 3c 02 	call	0x478	; 0x478 <changetoInteger>
    14b4:	98 2e       	mov	r9, r24
				num2 = holder*pow(10, holder2) + num2;
    14b6:	6d 2f       	mov	r22, r29
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	fa d2       	rcall	.+1524   	; 0x1ab4 <__floatunsisf>
    14c0:	9b 01       	movw	r18, r22
    14c2:	ac 01       	movw	r20, r24
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	80 e2       	ldi	r24, 0x20	; 32
    14ca:	91 e4       	ldi	r25, 0x41	; 65
    14cc:	e4 d3       	rcall	.+1992   	; 0x1c96 <pow>
    14ce:	6b 01       	movw	r12, r22
    14d0:	7c 01       	movw	r14, r24
    14d2:	69 2d       	mov	r22, r9
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	ee d2       	rcall	.+1500   	; 0x1ab8 <__floatsisf>
    14dc:	a7 01       	movw	r20, r14
    14de:	96 01       	movw	r18, r12
    14e0:	77 d3       	rcall	.+1774   	; 0x1bd0 <__mulsf3>
    14e2:	6b 01       	movw	r12, r22
    14e4:	7c 01       	movw	r14, r24
    14e6:	6c 2f       	mov	r22, r28
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	e4 d2       	rcall	.+1480   	; 0x1ab8 <__floatsisf>
    14f0:	9b 01       	movw	r18, r22
    14f2:	ac 01       	movw	r20, r24
    14f4:	c7 01       	movw	r24, r14
    14f6:	b6 01       	movw	r22, r12
    14f8:	e0 d1       	rcall	.+960    	; 0x18ba <__addsf3>
    14fa:	b0 d2       	rcall	.+1376   	; 0x1a5c <__fixunssfsi>
    14fc:	c6 2f       	mov	r28, r22
    14fe:	d1 50       	subi	r29, 0x01	; 1
    1500:	d7 11       	cpse	r29, r7
    1502:	d3 cf       	rjmp	.-90     	; 0x14aa <setting+0x5c0>
    1504:	8a 2d       	mov	r24, r10
    1506:	88 19       	sub	r24, r8
    1508:	8d 5f       	subi	r24, 0xFD	; 253
				holder2--;
    150a:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <holder2.2267>
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			//LCD_WriteData('.');
			holder2 = 1;
			for(int j = place+1; j < count-1; j++)
    150e:	c0 93 75 02 	sts	0x0275, r28	; 0x800275 <num2.2270>
    1512:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <num2.2270>
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	cb d2       	rcall	.+1430   	; 0x1ab4 <__floatunsisf>
				holder = changetoInteger(number[j]);
				num2 = holder*pow(10, holder2) + num2;
				holder2--;
			}
			
			holderMoney = (float)num1 + ((float)num2/100);
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	48 ec       	ldi	r20, 0xC8	; 200
    1524:	52 e4       	ldi	r21, 0x42	; 66
    1526:	2d d2       	rcall	.+1114   	; 0x1982 <__divsf3>
    1528:	6b 01       	movw	r12, r22
    152a:	7c 01       	movw	r14, r24
    152c:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <num1.2269>
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	be d2       	rcall	.+1404   	; 0x1ab4 <__floatunsisf>
    1538:	9b 01       	movw	r18, r22
    153a:	ac 01       	movw	r20, r24
    153c:	c7 01       	movw	r24, r14
    153e:	b6 01       	movw	r22, r12
    1540:	bc d1       	rcall	.+888    	; 0x18ba <__addsf3>
    1542:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <whichAddr.2265>
    1546:	21 30       	cpi	r18, 0x01	; 1
    1548:	41 f4       	brne	.+16     	; 0x155a <setting+0x670>
    154a:	ab 01       	movw	r20, r22
    154c:	bc 01       	movw	r22, r24
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	2a d5       	rcall	.+2644   	; 0x1fa8 <eeprom_write_dword>
    1554:	c7 e0       	ldi	r28, 0x07	; 7
			if(whichAddr == 1)
    1556:	d0 e0       	ldi	r29, 0x00	; 0
    1558:	25 c0       	rjmp	.+74     	; 0x15a4 <setting+0x6ba>
    155a:	22 30       	cpi	r18, 0x02	; 2
    155c:	59 f4       	brne	.+22     	; 0x1574 <setting+0x68a>
			{
				eeprom_write_float((float *)1, holderMoney);
    155e:	ab 01       	movw	r20, r22
    1560:	bc 01       	movw	r22, r24
    1562:	8a e0       	ldi	r24, 0x0A	; 10
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	20 d5       	rcall	.+2624   	; 0x1fa8 <eeprom_write_dword>
    1568:	c7 e0       	ldi	r28, 0x07	; 7
    156a:	d0 e0       	ldi	r29, 0x00	; 0
    156c:	1b c0       	rjmp	.+54     	; 0x15a4 <setting+0x6ba>
    156e:	c1 e0       	ldi	r28, 0x01	; 1
			}	
			else if(whichAddr == 2)
    1570:	d0 e0       	ldi	r29, 0x00	; 0
    1572:	18 c0       	rjmp	.+48     	; 0x15a4 <setting+0x6ba>
			{
				eeprom_write_float((float *)10, holderMoney);
    1574:	c7 e0       	ldi	r28, 0x07	; 7
    1576:	d0 e0       	ldi	r29, 0x00	; 0
    1578:	15 c0       	rjmp	.+42     	; 0x15a4 <setting+0x6ba>
    157a:	0e 94 91 02 	call	0x522	; 0x522 <GetKeypadKey>
    157e:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <key>
    1582:	81 11       	cpse	r24, r1
    1584:	1a cf       	rjmp	.-460    	; 0x13ba <setting+0x4d0>
	
	switch(state)
	{
		case startS:
		{
			state = pauseS;
    1586:	31 cf       	rjmp	.-414    	; 0x13ea <setting+0x500>
    1588:	0e 94 91 02 	call	0x522	; 0x522 <GetKeypadKey>
    158c:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <key>
    1590:	81 11       	cpse	r24, r1
		{
			break;
		}
		case priceSet:
		{
			key = GetKeypadKey();
    1592:	e3 ce       	rjmp	.-570    	; 0x135a <setting+0x470>
    1594:	c3 e0       	ldi	r28, 0x03	; 3
    1596:	d0 e0       	ldi	r29, 0x00	; 0
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <setting+0x6ba>
			if(key !=  '\0' && key != 'A' && key != 'B' && key!= 'C' && key != 'D')
    159a:	c0 e0       	ldi	r28, 0x00	; 0
    159c:	d0 e0       	ldi	r29, 0x00	; 0
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <setting+0x6ba>
		{
			break;
		}
		case codeSet:
		{
			key = GetKeypadKey();
    15a0:	c1 e0       	ldi	r28, 0x01	; 1
    15a2:	d0 e0       	ldi	r29, 0x00	; 0
    15a4:	ce 01       	movw	r24, r28
    15a6:	df 91       	pop	r29
			if(key !=  '\0')
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
			}
			break;
		}
		default:
		{
			state = startS;
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	bf 90       	pop	r11
		
			if(key == '#')
			{
				if(holder2 == 1)
				{
					state = pauseS;
    15b8:	af 90       	pop	r10
    15ba:	9f 90       	pop	r9
		{
			break;
		}
	}
	return state;
}
    15bc:	8f 90       	pop	r8
    15be:	7f 90       	pop	r7
    15c0:	6f 90       	pop	r6
    15c2:	5f 90       	pop	r5
    15c4:	4f 90       	pop	r4
    15c6:	08 95       	ret

000015c8 <keypad>:
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	91 05       	cpc	r25, r1
    15cc:	69 f0       	breq	.+26     	; 0x15e8 <keypad+0x20>
    15ce:	1c f4       	brge	.+6      	; 0x15d6 <keypad+0xe>
    15d0:	89 2b       	or	r24, r25
    15d2:	39 f0       	breq	.+14     	; 0x15e2 <keypad+0x1a>
    15d4:	38 c0       	rjmp	.+112    	; 0x1646 <keypad+0x7e>
    15d6:	82 30       	cpi	r24, 0x02	; 2
    15d8:	91 05       	cpc	r25, r1
    15da:	69 f0       	breq	.+26     	; 0x15f6 <keypad+0x2e>
    15dc:	03 97       	sbiw	r24, 0x03	; 3
    15de:	91 f0       	breq	.+36     	; 0x1604 <keypad+0x3c>

unsigned char count, x, y;
int keypad(int state)
{
	switch(state)
    15e0:	32 c0       	rjmp	.+100    	; 0x1646 <keypad+0x7e>
	{
		case startK:
		{
			count = 0;
    15e2:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <count>
    15e6:	17 c0       	rjmp	.+46     	; 0x1616 <keypad+0x4e>
			state = wait;
			break;
		}
		case wait:
		{
			x = GetKeypadKey();
    15e8:	0e 94 91 02 	call	0x522	; 0x522 <GetKeypadKey>
    15ec:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <x>
			if(x != '\0')
    15f0:	81 11       	cpse	r24, r1
    15f2:	34 c0       	rjmp	.+104    	; 0x165c <keypad+0x94>
    15f4:	2e c0       	rjmp	.+92     	; 0x1652 <keypad+0x8a>
			}
			break;
		}
		case press:
		{
			y = GetKeypadKey();
    15f6:	0e 94 91 02 	call	0x522	; 0x522 <GetKeypadKey>
    15fa:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <y>
			if(y == '\0')
    15fe:	88 23       	and	r24, r24
    1600:	91 f1       	breq	.+100    	; 0x1666 <keypad+0x9e>
    1602:	36 c0       	rjmp	.+108    	; 0x1670 <keypad+0xa8>
			}
			break;
		}
		case unpress:
		{
			key2 = x;
    1604:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <x>
    1608:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <key2>
			if(count == 9)
    160c:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <count>
    1610:	89 30       	cpi	r24, 0x09	; 9
    1612:	89 f4       	brne	.+34     	; 0x1636 <keypad+0x6e>
    1614:	1b c0       	rjmp	.+54     	; 0x164c <keypad+0x84>
		{
			break;
		}
		case wait:
		{
			count++;
    1616:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <count>
    161a:	8f 5f       	subi	r24, 0xFF	; 255
    161c:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <count>
			break;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	08 95       	ret
		}
		case press:
		{
			count++;
    1626:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <count>
    162a:	8f 5f       	subi	r24, 0xFF	; 255
    162c:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <count>
			break;
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	08 95       	ret
		}
		case unpress:
		{
			count++;
    1636:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <count>
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <count>
			break;
    1640:	83 e0       	ldi	r24, 0x03	; 3
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	08 95       	ret
			}
			break;
		}
		default:
		{
			state = startK;
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	08 95       	ret
			break;
		}
		case unpress:
		{
			count++;
			break;
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
		default:
		{
			break;
		}
	}
	return state;
    1650:	08 95       	ret
			x = GetKeypadKey();
			if(x != '\0')
			{
				state = press;
			}
			if(count == 9)
    1652:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <count>
    1656:	89 30       	cpi	r24, 0x09	; 9
    1658:	c9 f3       	breq	.-14     	; 0x164c <keypad+0x84>
    165a:	dd cf       	rjmp	.-70     	; 0x1616 <keypad+0x4e>
    165c:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <count>
    1660:	89 30       	cpi	r24, 0x09	; 9
    1662:	09 f7       	brne	.-62     	; 0x1626 <keypad+0x5e>
    1664:	f3 cf       	rjmp	.-26     	; 0x164c <keypad+0x84>
			y = GetKeypadKey();
			if(y == '\0')
			{
				state = unpress;
			}
			if(count == 9)
    1666:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <count>
    166a:	89 30       	cpi	r24, 0x09	; 9
    166c:	79 f3       	breq	.-34     	; 0x164c <keypad+0x84>
    166e:	e3 cf       	rjmp	.-58     	; 0x1636 <keypad+0x6e>
    1670:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <count>
    1674:	89 30       	cpi	r24, 0x09	; 9
    1676:	b9 f6       	brne	.-82     	; 0x1626 <keypad+0x5e>
    1678:	e9 cf       	rjmp	.-46     	; 0x164c <keypad+0x84>

0000167a <ADC_init>:
	}
	return state;
}

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
    167a:	ea e7       	ldi	r30, 0x7A	; 122
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	80 6e       	ori	r24, 0xE0	; 224
    1682:	80 83       	st	Z, r24
    1684:	08 95       	ret

00001686 <ServoPWMinit>:
	// ADATE:AD Auto-Trigger enable. ADC will start conversion automatically on a positive edge of trigger signal
}

void ServoPWMinit()
{
	DDRD |= 0xFF;								/* Make OC1A pin as output */
    1686:	8a b1       	in	r24, 0x0a	; 10
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	8a b9       	out	0x0a, r24	; 10
	TCNT1 = 0;										/* Set timer1 count zero */
    168c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1690:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	ICR1 = 2499;									/* Set TOP count for timer1 in ICR1 register */
    1694:	83 ec       	ldi	r24, 0xC3	; 195
    1696:	99 e0       	ldi	r25, 0x09	; 9
    1698:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    169c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TCCR1A = (1<<WGM11)|(1<<COM1A1);				/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
    16a0:	82 e8       	ldi	r24, 0x82	; 130
    16a2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
    16a6:	8b e1       	ldi	r24, 0x1B	; 27
    16a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    16ac:	08 95       	ret

000016ae <main>:
}
	
int main()
{
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	6c 97       	sbiw	r28, 0x1c	; 28
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xFC; PORTA = 0x02;
    16c2:	8c ef       	ldi	r24, 0xFC	; 252
    16c4:	81 b9       	out	0x01, r24	; 1
    16c6:	82 e0       	ldi	r24, 0x02	; 2
    16c8:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF; PORTD = 0x00;
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	8a b9       	out	0x0a, r24	; 10
    16ce:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0xFF; PORTB = 0x00;
    16d0:	84 b9       	out	0x04, r24	; 4
    16d2:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F;
    16d4:	80 ef       	ldi	r24, 0xF0	; 240
    16d6:	87 b9       	out	0x07, r24	; 7
    16d8:	8f e0       	ldi	r24, 0x0F	; 15
    16da:	88 b9       	out	0x08, r24	; 8


	
	//Declare an array of tasks
	static task j,a,b,c,e,f;
	task *tasks[] = {&j, &a, &b, &c, &e, &f};
    16dc:	8c e0       	ldi	r24, 0x0C	; 12
    16de:	e4 e0       	ldi	r30, 0x04	; 4
    16e0:	f1 e0       	ldi	r31, 0x01	; 1
    16e2:	de 01       	movw	r26, r28
    16e4:	11 96       	adiw	r26, 0x01	; 1
    16e6:	01 90       	ld	r0, Z+
    16e8:	0d 92       	st	X+, r0
    16ea:	8a 95       	dec	r24
    16ec:	e1 f7       	brne	.-8      	; 0x16e6 <main+0x38>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	// Task 1
	j.state = startL;//Task initial state.
    16ee:	ef e5       	ldi	r30, 0x5F	; 95
    16f0:	f2 e0       	ldi	r31, 0x02	; 2
    16f2:	10 82       	st	Z, r1
	j.period = SMTick0_period;//Task Period.
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	a0 e0       	ldi	r26, 0x00	; 0
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	81 83       	std	Z+1, r24	; 0x01
    16fe:	92 83       	std	Z+2, r25	; 0x02
    1700:	a3 83       	std	Z+3, r26	; 0x03
    1702:	b4 83       	std	Z+4, r27	; 0x04
	j.elapsedTime = SMTick0_period;//Task current elapsed time.
    1704:	85 83       	std	Z+5, r24	; 0x05
    1706:	96 83       	std	Z+6, r25	; 0x06
    1708:	a7 83       	std	Z+7, r26	; 0x07
    170a:	b0 87       	std	Z+8, r27	; 0x08
	j.TickFct = &Lock;//Function pointer for the tick.
    170c:	8f ed       	ldi	r24, 0xDF	; 223
    170e:	92 e0       	ldi	r25, 0x02	; 2
    1710:	92 87       	std	Z+10, r25	; 0x0a
    1712:	81 87       	std	Z+9, r24	; 0x09
	
	a.state = startM;//Task initial state.
    1714:	e4 e5       	ldi	r30, 0x54	; 84
    1716:	f2 e0       	ldi	r31, 0x02	; 2
    1718:	10 82       	st	Z, r1
	a.period = SMTick1_period;//Task Period.
    171a:	8a e0       	ldi	r24, 0x0A	; 10
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 e0       	ldi	r26, 0x00	; 0
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	81 83       	std	Z+1, r24	; 0x01
    1724:	92 83       	std	Z+2, r25	; 0x02
    1726:	a3 83       	std	Z+3, r26	; 0x03
    1728:	b4 83       	std	Z+4, r27	; 0x04
	a.elapsedTime = SMTick1_period;//Task current elapsed time.
    172a:	85 83       	std	Z+5, r24	; 0x05
    172c:	96 83       	std	Z+6, r25	; 0x06
    172e:	a7 83       	std	Z+7, r26	; 0x07
    1730:	b0 87       	std	Z+8, r27	; 0x08
	a.TickFct = &Menu;//Function pointer for the tick.
    1732:	82 ee       	ldi	r24, 0xE2	; 226
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	92 87       	std	Z+10, r25	; 0x0a
    1738:	81 87       	std	Z+9, r24	; 0x09
	
	// Task 2
	b.state = startT;//Task initial state.
    173a:	e9 e4       	ldi	r30, 0x49	; 73
    173c:	f2 e0       	ldi	r31, 0x02	; 2
    173e:	10 82       	st	Z, r1
	b.period = SMTick2_period;//Task Period.
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e0       	ldi	r26, 0x00	; 0
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	81 83       	std	Z+1, r24	; 0x01
    174a:	92 83       	std	Z+2, r25	; 0x02
    174c:	a3 83       	std	Z+3, r26	; 0x03
    174e:	b4 83       	std	Z+4, r27	; 0x04
	b.elapsedTime = SMTick2_period;//Task current elapsed time.
    1750:	85 83       	std	Z+5, r24	; 0x05
    1752:	96 83       	std	Z+6, r25	; 0x06
    1754:	a7 83       	std	Z+7, r26	; 0x07
    1756:	b0 87       	std	Z+8, r27	; 0x08
	b.TickFct = &trans;//Function pointer for the tick.
    1758:	24 ea       	ldi	r18, 0xA4	; 164
    175a:	33 e0       	ldi	r19, 0x03	; 3
    175c:	32 87       	std	Z+10, r19	; 0x0a
    175e:	21 87       	std	Z+9, r18	; 0x09
	
	c.state = startS;//Task initial state.
    1760:	ee e3       	ldi	r30, 0x3E	; 62
    1762:	f2 e0       	ldi	r31, 0x02	; 2
    1764:	10 82       	st	Z, r1
	c.period = SMTick3_period;//Task Period.
    1766:	81 83       	std	Z+1, r24	; 0x01
    1768:	92 83       	std	Z+2, r25	; 0x02
    176a:	a3 83       	std	Z+3, r26	; 0x03
    176c:	b4 83       	std	Z+4, r27	; 0x04
	c.elapsedTime = SMTick3_period;//Task current elapsed time.
    176e:	85 83       	std	Z+5, r24	; 0x05
    1770:	96 83       	std	Z+6, r25	; 0x06
    1772:	a7 83       	std	Z+7, r26	; 0x07
    1774:	b0 87       	std	Z+8, r27	; 0x08
	c.TickFct = &setting;//Function pointer for the tick.
    1776:	85 e7       	ldi	r24, 0x75	; 117
    1778:	97 e0       	ldi	r25, 0x07	; 7
    177a:	92 87       	std	Z+10, r25	; 0x0a
    177c:	81 87       	std	Z+9, r24	; 0x09
	
	e.state = startK;//Task initial state.
    177e:	e3 e3       	ldi	r30, 0x33	; 51
    1780:	f2 e0       	ldi	r31, 0x02	; 2
    1782:	10 82       	st	Z, r1
	e.period = SMTick5_period;//Task Period.
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a0 e0       	ldi	r26, 0x00	; 0
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	81 83       	std	Z+1, r24	; 0x01
    178e:	92 83       	std	Z+2, r25	; 0x02
    1790:	a3 83       	std	Z+3, r26	; 0x03
    1792:	b4 83       	std	Z+4, r27	; 0x04
	e.elapsedTime = SMTick5_period;//Task current elapsed time.
    1794:	85 83       	std	Z+5, r24	; 0x05
    1796:	96 83       	std	Z+6, r25	; 0x06
    1798:	a7 83       	std	Z+7, r26	; 0x07
    179a:	b0 87       	std	Z+8, r27	; 0x08
	e.TickFct = &keypad;//Function pointer for the tick.
    179c:	24 ee       	ldi	r18, 0xE4	; 228
    179e:	3a e0       	ldi	r19, 0x0A	; 10
    17a0:	32 87       	std	Z+10, r19	; 0x0a
    17a2:	21 87       	std	Z+9, r18	; 0x09
	
	f.state = sample;//Task initial state.
    17a4:	e8 e2       	ldi	r30, 0x28	; 40
    17a6:	f2 e0       	ldi	r31, 0x02	; 2
    17a8:	10 82       	st	Z, r1
	f.period = SMTick6_period;//Task Period.
    17aa:	81 83       	std	Z+1, r24	; 0x01
    17ac:	92 83       	std	Z+2, r25	; 0x02
    17ae:	a3 83       	std	Z+3, r26	; 0x03
    17b0:	b4 83       	std	Z+4, r27	; 0x04
	f.elapsedTime = SMTick6_period;//Task current elapsed time.
    17b2:	85 83       	std	Z+5, r24	; 0x05
    17b4:	96 83       	std	Z+6, r25	; 0x06
    17b6:	a7 83       	std	Z+7, r26	; 0x07
    17b8:	b0 87       	std	Z+8, r27	; 0x08
	f.TickFct = &JoyTick;//Function pointer for the tick.
    17ba:	8d ec       	ldi	r24, 0xCD	; 205
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	92 87       	std	Z+10, r25	; 0x0a
    17c0:	81 87       	std	Z+9, r24	; 0x09
	
	unsigned char eruo[] = {0x00,0x0E,0x09,0x1E,0x1E,0x09,0x0E,0x00};
    17c2:	88 e0       	ldi	r24, 0x08	; 8
    17c4:	e0 e1       	ldi	r30, 0x10	; 16
    17c6:	f1 e0       	ldi	r31, 0x01	; 1
    17c8:	de 01       	movw	r26, r28
    17ca:	1d 96       	adiw	r26, 0x0d	; 13
    17cc:	01 90       	ld	r0, Z+
    17ce:	0d 92       	st	X+, r0
    17d0:	8a 95       	dec	r24
    17d2:	e1 f7       	brne	.-8      	; 0x17cc <main+0x11e>
	unsigned char arrow[] = {0x00, 0x04, 0x0E, 0x1F, 0x04, 0x04, 0x04, 0x00};
    17d4:	88 e0       	ldi	r24, 0x08	; 8
    17d6:	e8 e1       	ldi	r30, 0x18	; 24
    17d8:	f1 e0       	ldi	r31, 0x01	; 1
    17da:	de 01       	movw	r26, r28
    17dc:	55 96       	adiw	r26, 0x15	; 21
    17de:	01 90       	ld	r0, Z+
    17e0:	0d 92       	st	X+, r0
    17e2:	8a 95       	dec	r24
    17e4:	e1 f7       	brne	.-8      	; 0x17de <main+0x130>
 	
	LCDcustomChar(1, eruo);
    17e6:	be 01       	movw	r22, r28
    17e8:	63 5f       	subi	r22, 0xF3	; 243
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	0e 94 ae 01 	call	0x35c	; 0x35c <LCDcustomChar>
	LCDcustomChar(2, arrow);
    17f2:	be 01       	movw	r22, r28
    17f4:	6b 5e       	subi	r22, 0xEB	; 235
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	82 e0       	ldi	r24, 0x02	; 2
    17fa:	0e 94 ae 01 	call	0x35c	; 0x35c <LCDcustomChar>

	
	ADC_init();
    17fe:	3d df       	rcall	.-390    	; 0x167a <ADC_init>
	ServoPWMinit();
    1800:	42 df       	rcall	.-380    	; 0x1686 <ServoPWMinit>
    1802:	8f ea       	ldi	r24, 0xAF	; 175
	OCR1A = 175;
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    180a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    180e:	83 ed       	ldi	r24, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1810:	90 e3       	ldi	r25, 0x30	; 48
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <main+0x164>
    1816:	00 c0       	rjmp	.+0      	; 0x1818 <main+0x16a>
    1818:	00 00       	nop
    181a:	64 e6       	ldi	r22, 0x64	; 100
	_delay_ms(50);
	
	// Set the timer and turn it on
	TimerSet(100);
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TimerSet>
    1826:	0e 94 0f 01 	call	0x21e	; 0x21e <TimerOn>
	TimerOn();
    182a:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_init>
	
	LCD_init();
    182e:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_ClearScreen>
	LCD_ClearScreen();
    1832:	6e 01       	movw	r12, r28
    1834:	9d e0       	ldi	r25, 0x0D	; 13
    1836:	c9 0e       	add	r12, r25
    1838:	d1 1c       	adc	r13, r1
    183a:	de 01       	movw	r26, r28
    183c:	11 96       	adiw	r26, 0x01	; 1
    183e:	7d 01       	movw	r14, r26
    1840:	f7 01       	movw	r30, r14
	while(1) {
		
				// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
    1842:	01 91       	ld	r16, Z+
    1844:	11 91       	ld	r17, Z+
    1846:	7f 01       	movw	r14, r30
    1848:	d8 01       	movw	r26, r16
    184a:	15 96       	adiw	r26, 0x05	; 5
    184c:	4d 91       	ld	r20, X+
    184e:	5d 91       	ld	r21, X+
    1850:	6d 91       	ld	r22, X+
    1852:	7c 91       	ld	r23, X
    1854:	18 97       	sbiw	r26, 0x08	; 8
    1856:	11 96       	adiw	r26, 0x01	; 1
    1858:	8d 91       	ld	r24, X+
    185a:	9d 91       	ld	r25, X+
    185c:	0d 90       	ld	r0, X+
    185e:	bc 91       	ld	r27, X
    1860:	a0 2d       	mov	r26, r0
    1862:	48 17       	cp	r20, r24
    1864:	59 07       	cpc	r21, r25
    1866:	6a 07       	cpc	r22, r26
    1868:	7b 07       	cpc	r23, r27
    186a:	81 f4       	brne	.+32     	; 0x188c <main+0x1de>
    186c:	f8 01       	movw	r30, r16
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
    186e:	80 81       	ld	r24, Z
    1870:	01 84       	ldd	r0, Z+9	; 0x09
    1872:	f2 85       	ldd	r31, Z+10	; 0x0a
    1874:	e0 2d       	mov	r30, r0
    1876:	08 2e       	mov	r0, r24
    1878:	00 0c       	add	r0, r0
    187a:	99 0b       	sbc	r25, r25
    187c:	09 95       	icall
    187e:	d8 01       	movw	r26, r16
    1880:	8c 93       	st	X, r24
    1882:	f8 01       	movw	r30, r16
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
    1884:	15 82       	std	Z+5, r1	; 0x05
    1886:	16 82       	std	Z+6, r1	; 0x06
    1888:	17 82       	std	Z+7, r1	; 0x07
    188a:	10 86       	std	Z+8, r1	; 0x08
    188c:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 1;
    188e:	85 81       	ldd	r24, Z+5	; 0x05
    1890:	96 81       	ldd	r25, Z+6	; 0x06
    1892:	a7 81       	ldd	r26, Z+7	; 0x07
    1894:	b0 85       	ldd	r27, Z+8	; 0x08
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	a1 1d       	adc	r26, r1
    189a:	b1 1d       	adc	r27, r1
    189c:	85 83       	std	Z+5, r24	; 0x05
    189e:	96 83       	std	Z+6, r25	; 0x06
    18a0:	a7 83       	std	Z+7, r26	; 0x07
    18a2:	b0 87       	std	Z+8, r27	; 0x08
    18a4:	ec 14       	cp	r14, r12
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		
				// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
    18a6:	fd 04       	cpc	r15, r13
    18a8:	59 f6       	brne	.-106    	; 0x1840 <main+0x192>
    18aa:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <TimerFlag>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
    18ae:	88 23       	and	r24, r24
    18b0:	e1 f3       	breq	.-8      	; 0x18aa <main+0x1fc>
    18b2:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <TimerFlag>
		TimerFlag = 0;
    18b6:	c1 cf       	rjmp	.-126    	; 0x183a <main+0x18c>

000018b8 <__subsf3>:
	}
    18b8:	50 58       	subi	r21, 0x80	; 128

000018ba <__addsf3>:
    18ba:	bb 27       	eor	r27, r27
    18bc:	aa 27       	eor	r26, r26
    18be:	0e d0       	rcall	.+28     	; 0x18dc <__addsf3x>
    18c0:	4d c1       	rjmp	.+666    	; 0x1b5c <__fp_round>
    18c2:	3e d1       	rcall	.+636    	; 0x1b40 <__fp_pscA>
    18c4:	30 f0       	brcs	.+12     	; 0x18d2 <__addsf3+0x18>
    18c6:	43 d1       	rcall	.+646    	; 0x1b4e <__fp_pscB>
    18c8:	20 f0       	brcs	.+8      	; 0x18d2 <__addsf3+0x18>
    18ca:	31 f4       	brne	.+12     	; 0x18d8 <__addsf3+0x1e>
    18cc:	9f 3f       	cpi	r25, 0xFF	; 255
    18ce:	11 f4       	brne	.+4      	; 0x18d4 <__addsf3+0x1a>
    18d0:	1e f4       	brtc	.+6      	; 0x18d8 <__addsf3+0x1e>
    18d2:	33 c1       	rjmp	.+614    	; 0x1b3a <__fp_nan>
    18d4:	0e f4       	brtc	.+2      	; 0x18d8 <__addsf3+0x1e>
    18d6:	e0 95       	com	r30
    18d8:	e7 fb       	bst	r30, 7
    18da:	29 c1       	rjmp	.+594    	; 0x1b2e <__fp_inf>

000018dc <__addsf3x>:
    18dc:	e9 2f       	mov	r30, r25
    18de:	4f d1       	rcall	.+670    	; 0x1b7e <__fp_split3>
    18e0:	80 f3       	brcs	.-32     	; 0x18c2 <__addsf3+0x8>
    18e2:	ba 17       	cp	r27, r26
    18e4:	62 07       	cpc	r22, r18
    18e6:	73 07       	cpc	r23, r19
    18e8:	84 07       	cpc	r24, r20
    18ea:	95 07       	cpc	r25, r21
    18ec:	18 f0       	brcs	.+6      	; 0x18f4 <__addsf3x+0x18>
    18ee:	71 f4       	brne	.+28     	; 0x190c <__addsf3x+0x30>
    18f0:	9e f5       	brtc	.+102    	; 0x1958 <__addsf3x+0x7c>
    18f2:	67 c1       	rjmp	.+718    	; 0x1bc2 <__fp_zero>
    18f4:	0e f4       	brtc	.+2      	; 0x18f8 <__addsf3x+0x1c>
    18f6:	e0 95       	com	r30
    18f8:	0b 2e       	mov	r0, r27
    18fa:	ba 2f       	mov	r27, r26
    18fc:	a0 2d       	mov	r26, r0
    18fe:	0b 01       	movw	r0, r22
    1900:	b9 01       	movw	r22, r18
    1902:	90 01       	movw	r18, r0
    1904:	0c 01       	movw	r0, r24
    1906:	ca 01       	movw	r24, r20
    1908:	a0 01       	movw	r20, r0
    190a:	11 24       	eor	r1, r1
    190c:	ff 27       	eor	r31, r31
    190e:	59 1b       	sub	r21, r25
    1910:	99 f0       	breq	.+38     	; 0x1938 <__addsf3x+0x5c>
    1912:	59 3f       	cpi	r21, 0xF9	; 249
    1914:	50 f4       	brcc	.+20     	; 0x192a <__addsf3x+0x4e>
    1916:	50 3e       	cpi	r21, 0xE0	; 224
    1918:	68 f1       	brcs	.+90     	; 0x1974 <__addsf3x+0x98>
    191a:	1a 16       	cp	r1, r26
    191c:	f0 40       	sbci	r31, 0x00	; 0
    191e:	a2 2f       	mov	r26, r18
    1920:	23 2f       	mov	r18, r19
    1922:	34 2f       	mov	r19, r20
    1924:	44 27       	eor	r20, r20
    1926:	58 5f       	subi	r21, 0xF8	; 248
    1928:	f3 cf       	rjmp	.-26     	; 0x1910 <__addsf3x+0x34>
    192a:	46 95       	lsr	r20
    192c:	37 95       	ror	r19
    192e:	27 95       	ror	r18
    1930:	a7 95       	ror	r26
    1932:	f0 40       	sbci	r31, 0x00	; 0
    1934:	53 95       	inc	r21
    1936:	c9 f7       	brne	.-14     	; 0x192a <__addsf3x+0x4e>
    1938:	7e f4       	brtc	.+30     	; 0x1958 <__addsf3x+0x7c>
    193a:	1f 16       	cp	r1, r31
    193c:	ba 0b       	sbc	r27, r26
    193e:	62 0b       	sbc	r22, r18
    1940:	73 0b       	sbc	r23, r19
    1942:	84 0b       	sbc	r24, r20
    1944:	ba f0       	brmi	.+46     	; 0x1974 <__addsf3x+0x98>
    1946:	91 50       	subi	r25, 0x01	; 1
    1948:	a1 f0       	breq	.+40     	; 0x1972 <__addsf3x+0x96>
    194a:	ff 0f       	add	r31, r31
    194c:	bb 1f       	adc	r27, r27
    194e:	66 1f       	adc	r22, r22
    1950:	77 1f       	adc	r23, r23
    1952:	88 1f       	adc	r24, r24
    1954:	c2 f7       	brpl	.-16     	; 0x1946 <__addsf3x+0x6a>
    1956:	0e c0       	rjmp	.+28     	; 0x1974 <__addsf3x+0x98>
    1958:	ba 0f       	add	r27, r26
    195a:	62 1f       	adc	r22, r18
    195c:	73 1f       	adc	r23, r19
    195e:	84 1f       	adc	r24, r20
    1960:	48 f4       	brcc	.+18     	; 0x1974 <__addsf3x+0x98>
    1962:	87 95       	ror	r24
    1964:	77 95       	ror	r23
    1966:	67 95       	ror	r22
    1968:	b7 95       	ror	r27
    196a:	f7 95       	ror	r31
    196c:	9e 3f       	cpi	r25, 0xFE	; 254
    196e:	08 f0       	brcs	.+2      	; 0x1972 <__addsf3x+0x96>
    1970:	b3 cf       	rjmp	.-154    	; 0x18d8 <__addsf3+0x1e>
    1972:	93 95       	inc	r25
    1974:	88 0f       	add	r24, r24
    1976:	08 f0       	brcs	.+2      	; 0x197a <__addsf3x+0x9e>
    1978:	99 27       	eor	r25, r25
    197a:	ee 0f       	add	r30, r30
    197c:	97 95       	ror	r25
    197e:	87 95       	ror	r24
    1980:	08 95       	ret

00001982 <__divsf3>:
    1982:	0c d0       	rcall	.+24     	; 0x199c <__divsf3x>
    1984:	eb c0       	rjmp	.+470    	; 0x1b5c <__fp_round>
    1986:	e3 d0       	rcall	.+454    	; 0x1b4e <__fp_pscB>
    1988:	40 f0       	brcs	.+16     	; 0x199a <__divsf3+0x18>
    198a:	da d0       	rcall	.+436    	; 0x1b40 <__fp_pscA>
    198c:	30 f0       	brcs	.+12     	; 0x199a <__divsf3+0x18>
    198e:	21 f4       	brne	.+8      	; 0x1998 <__divsf3+0x16>
    1990:	5f 3f       	cpi	r21, 0xFF	; 255
    1992:	19 f0       	breq	.+6      	; 0x199a <__divsf3+0x18>
    1994:	cc c0       	rjmp	.+408    	; 0x1b2e <__fp_inf>
    1996:	51 11       	cpse	r21, r1
    1998:	15 c1       	rjmp	.+554    	; 0x1bc4 <__fp_szero>
    199a:	cf c0       	rjmp	.+414    	; 0x1b3a <__fp_nan>

0000199c <__divsf3x>:
    199c:	f0 d0       	rcall	.+480    	; 0x1b7e <__fp_split3>
    199e:	98 f3       	brcs	.-26     	; 0x1986 <__divsf3+0x4>

000019a0 <__divsf3_pse>:
    19a0:	99 23       	and	r25, r25
    19a2:	c9 f3       	breq	.-14     	; 0x1996 <__divsf3+0x14>
    19a4:	55 23       	and	r21, r21
    19a6:	b1 f3       	breq	.-20     	; 0x1994 <__divsf3+0x12>
    19a8:	95 1b       	sub	r25, r21
    19aa:	55 0b       	sbc	r21, r21
    19ac:	bb 27       	eor	r27, r27
    19ae:	aa 27       	eor	r26, r26
    19b0:	62 17       	cp	r22, r18
    19b2:	73 07       	cpc	r23, r19
    19b4:	84 07       	cpc	r24, r20
    19b6:	38 f0       	brcs	.+14     	; 0x19c6 <__divsf3_pse+0x26>
    19b8:	9f 5f       	subi	r25, 0xFF	; 255
    19ba:	5f 4f       	sbci	r21, 0xFF	; 255
    19bc:	22 0f       	add	r18, r18
    19be:	33 1f       	adc	r19, r19
    19c0:	44 1f       	adc	r20, r20
    19c2:	aa 1f       	adc	r26, r26
    19c4:	a9 f3       	breq	.-22     	; 0x19b0 <__divsf3_pse+0x10>
    19c6:	33 d0       	rcall	.+102    	; 0x1a2e <__divsf3_pse+0x8e>
    19c8:	0e 2e       	mov	r0, r30
    19ca:	3a f0       	brmi	.+14     	; 0x19da <__divsf3_pse+0x3a>
    19cc:	e0 e8       	ldi	r30, 0x80	; 128
    19ce:	30 d0       	rcall	.+96     	; 0x1a30 <__divsf3_pse+0x90>
    19d0:	91 50       	subi	r25, 0x01	; 1
    19d2:	50 40       	sbci	r21, 0x00	; 0
    19d4:	e6 95       	lsr	r30
    19d6:	00 1c       	adc	r0, r0
    19d8:	ca f7       	brpl	.-14     	; 0x19cc <__divsf3_pse+0x2c>
    19da:	29 d0       	rcall	.+82     	; 0x1a2e <__divsf3_pse+0x8e>
    19dc:	fe 2f       	mov	r31, r30
    19de:	27 d0       	rcall	.+78     	; 0x1a2e <__divsf3_pse+0x8e>
    19e0:	66 0f       	add	r22, r22
    19e2:	77 1f       	adc	r23, r23
    19e4:	88 1f       	adc	r24, r24
    19e6:	bb 1f       	adc	r27, r27
    19e8:	26 17       	cp	r18, r22
    19ea:	37 07       	cpc	r19, r23
    19ec:	48 07       	cpc	r20, r24
    19ee:	ab 07       	cpc	r26, r27
    19f0:	b0 e8       	ldi	r27, 0x80	; 128
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <__divsf3_pse+0x56>
    19f4:	bb 0b       	sbc	r27, r27
    19f6:	80 2d       	mov	r24, r0
    19f8:	bf 01       	movw	r22, r30
    19fa:	ff 27       	eor	r31, r31
    19fc:	93 58       	subi	r25, 0x83	; 131
    19fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1a00:	2a f0       	brmi	.+10     	; 0x1a0c <__divsf3_pse+0x6c>
    1a02:	9e 3f       	cpi	r25, 0xFE	; 254
    1a04:	51 05       	cpc	r21, r1
    1a06:	68 f0       	brcs	.+26     	; 0x1a22 <__divsf3_pse+0x82>
    1a08:	92 c0       	rjmp	.+292    	; 0x1b2e <__fp_inf>
    1a0a:	dc c0       	rjmp	.+440    	; 0x1bc4 <__fp_szero>
    1a0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0e:	ec f3       	brlt	.-6      	; 0x1a0a <__divsf3_pse+0x6a>
    1a10:	98 3e       	cpi	r25, 0xE8	; 232
    1a12:	dc f3       	brlt	.-10     	; 0x1a0a <__divsf3_pse+0x6a>
    1a14:	86 95       	lsr	r24
    1a16:	77 95       	ror	r23
    1a18:	67 95       	ror	r22
    1a1a:	b7 95       	ror	r27
    1a1c:	f7 95       	ror	r31
    1a1e:	9f 5f       	subi	r25, 0xFF	; 255
    1a20:	c9 f7       	brne	.-14     	; 0x1a14 <__divsf3_pse+0x74>
    1a22:	88 0f       	add	r24, r24
    1a24:	91 1d       	adc	r25, r1
    1a26:	96 95       	lsr	r25
    1a28:	87 95       	ror	r24
    1a2a:	97 f9       	bld	r25, 7
    1a2c:	08 95       	ret
    1a2e:	e1 e0       	ldi	r30, 0x01	; 1
    1a30:	66 0f       	add	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	88 1f       	adc	r24, r24
    1a36:	bb 1f       	adc	r27, r27
    1a38:	62 17       	cp	r22, r18
    1a3a:	73 07       	cpc	r23, r19
    1a3c:	84 07       	cpc	r24, r20
    1a3e:	ba 07       	cpc	r27, r26
    1a40:	20 f0       	brcs	.+8      	; 0x1a4a <__divsf3_pse+0xaa>
    1a42:	62 1b       	sub	r22, r18
    1a44:	73 0b       	sbc	r23, r19
    1a46:	84 0b       	sbc	r24, r20
    1a48:	ba 0b       	sbc	r27, r26
    1a4a:	ee 1f       	adc	r30, r30
    1a4c:	88 f7       	brcc	.-30     	; 0x1a30 <__divsf3_pse+0x90>
    1a4e:	e0 95       	com	r30
    1a50:	08 95       	ret

00001a52 <__fixsfsi>:
    1a52:	04 d0       	rcall	.+8      	; 0x1a5c <__fixunssfsi>
    1a54:	68 94       	set
    1a56:	b1 11       	cpse	r27, r1
    1a58:	b5 c0       	rjmp	.+362    	; 0x1bc4 <__fp_szero>
    1a5a:	08 95       	ret

00001a5c <__fixunssfsi>:
    1a5c:	98 d0       	rcall	.+304    	; 0x1b8e <__fp_splitA>
    1a5e:	88 f0       	brcs	.+34     	; 0x1a82 <__fixunssfsi+0x26>
    1a60:	9f 57       	subi	r25, 0x7F	; 127
    1a62:	90 f0       	brcs	.+36     	; 0x1a88 <__fixunssfsi+0x2c>
    1a64:	b9 2f       	mov	r27, r25
    1a66:	99 27       	eor	r25, r25
    1a68:	b7 51       	subi	r27, 0x17	; 23
    1a6a:	a0 f0       	brcs	.+40     	; 0x1a94 <__fixunssfsi+0x38>
    1a6c:	d1 f0       	breq	.+52     	; 0x1aa2 <__fixunssfsi+0x46>
    1a6e:	66 0f       	add	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	88 1f       	adc	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	1a f0       	brmi	.+6      	; 0x1a7e <__fixunssfsi+0x22>
    1a78:	ba 95       	dec	r27
    1a7a:	c9 f7       	brne	.-14     	; 0x1a6e <__fixunssfsi+0x12>
    1a7c:	12 c0       	rjmp	.+36     	; 0x1aa2 <__fixunssfsi+0x46>
    1a7e:	b1 30       	cpi	r27, 0x01	; 1
    1a80:	81 f0       	breq	.+32     	; 0x1aa2 <__fixunssfsi+0x46>
    1a82:	9f d0       	rcall	.+318    	; 0x1bc2 <__fp_zero>
    1a84:	b1 e0       	ldi	r27, 0x01	; 1
    1a86:	08 95       	ret
    1a88:	9c c0       	rjmp	.+312    	; 0x1bc2 <__fp_zero>
    1a8a:	67 2f       	mov	r22, r23
    1a8c:	78 2f       	mov	r23, r24
    1a8e:	88 27       	eor	r24, r24
    1a90:	b8 5f       	subi	r27, 0xF8	; 248
    1a92:	39 f0       	breq	.+14     	; 0x1aa2 <__fixunssfsi+0x46>
    1a94:	b9 3f       	cpi	r27, 0xF9	; 249
    1a96:	cc f3       	brlt	.-14     	; 0x1a8a <__fixunssfsi+0x2e>
    1a98:	86 95       	lsr	r24
    1a9a:	77 95       	ror	r23
    1a9c:	67 95       	ror	r22
    1a9e:	b3 95       	inc	r27
    1aa0:	d9 f7       	brne	.-10     	; 0x1a98 <__fixunssfsi+0x3c>
    1aa2:	3e f4       	brtc	.+14     	; 0x1ab2 <__fixunssfsi+0x56>
    1aa4:	90 95       	com	r25
    1aa6:	80 95       	com	r24
    1aa8:	70 95       	com	r23
    1aaa:	61 95       	neg	r22
    1aac:	7f 4f       	sbci	r23, 0xFF	; 255
    1aae:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab2:	08 95       	ret

00001ab4 <__floatunsisf>:
    1ab4:	e8 94       	clt
    1ab6:	09 c0       	rjmp	.+18     	; 0x1aca <__floatsisf+0x12>

00001ab8 <__floatsisf>:
    1ab8:	97 fb       	bst	r25, 7
    1aba:	3e f4       	brtc	.+14     	; 0x1aca <__floatsisf+0x12>
    1abc:	90 95       	com	r25
    1abe:	80 95       	com	r24
    1ac0:	70 95       	com	r23
    1ac2:	61 95       	neg	r22
    1ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aca:	99 23       	and	r25, r25
    1acc:	a9 f0       	breq	.+42     	; 0x1af8 <__floatsisf+0x40>
    1ace:	f9 2f       	mov	r31, r25
    1ad0:	96 e9       	ldi	r25, 0x96	; 150
    1ad2:	bb 27       	eor	r27, r27
    1ad4:	93 95       	inc	r25
    1ad6:	f6 95       	lsr	r31
    1ad8:	87 95       	ror	r24
    1ada:	77 95       	ror	r23
    1adc:	67 95       	ror	r22
    1ade:	b7 95       	ror	r27
    1ae0:	f1 11       	cpse	r31, r1
    1ae2:	f8 cf       	rjmp	.-16     	; 0x1ad4 <__floatsisf+0x1c>
    1ae4:	fa f4       	brpl	.+62     	; 0x1b24 <__floatsisf+0x6c>
    1ae6:	bb 0f       	add	r27, r27
    1ae8:	11 f4       	brne	.+4      	; 0x1aee <__floatsisf+0x36>
    1aea:	60 ff       	sbrs	r22, 0
    1aec:	1b c0       	rjmp	.+54     	; 0x1b24 <__floatsisf+0x6c>
    1aee:	6f 5f       	subi	r22, 0xFF	; 255
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	8f 4f       	sbci	r24, 0xFF	; 255
    1af4:	9f 4f       	sbci	r25, 0xFF	; 255
    1af6:	16 c0       	rjmp	.+44     	; 0x1b24 <__floatsisf+0x6c>
    1af8:	88 23       	and	r24, r24
    1afa:	11 f0       	breq	.+4      	; 0x1b00 <__floatsisf+0x48>
    1afc:	96 e9       	ldi	r25, 0x96	; 150
    1afe:	11 c0       	rjmp	.+34     	; 0x1b22 <__floatsisf+0x6a>
    1b00:	77 23       	and	r23, r23
    1b02:	21 f0       	breq	.+8      	; 0x1b0c <__floatsisf+0x54>
    1b04:	9e e8       	ldi	r25, 0x8E	; 142
    1b06:	87 2f       	mov	r24, r23
    1b08:	76 2f       	mov	r23, r22
    1b0a:	05 c0       	rjmp	.+10     	; 0x1b16 <__floatsisf+0x5e>
    1b0c:	66 23       	and	r22, r22
    1b0e:	71 f0       	breq	.+28     	; 0x1b2c <__floatsisf+0x74>
    1b10:	96 e8       	ldi	r25, 0x86	; 134
    1b12:	86 2f       	mov	r24, r22
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	2a f0       	brmi	.+10     	; 0x1b24 <__floatsisf+0x6c>
    1b1a:	9a 95       	dec	r25
    1b1c:	66 0f       	add	r22, r22
    1b1e:	77 1f       	adc	r23, r23
    1b20:	88 1f       	adc	r24, r24
    1b22:	da f7       	brpl	.-10     	; 0x1b1a <__floatsisf+0x62>
    1b24:	88 0f       	add	r24, r24
    1b26:	96 95       	lsr	r25
    1b28:	87 95       	ror	r24
    1b2a:	97 f9       	bld	r25, 7
    1b2c:	08 95       	ret

00001b2e <__fp_inf>:
    1b2e:	97 f9       	bld	r25, 7
    1b30:	9f 67       	ori	r25, 0x7F	; 127
    1b32:	80 e8       	ldi	r24, 0x80	; 128
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	08 95       	ret

00001b3a <__fp_nan>:
    1b3a:	9f ef       	ldi	r25, 0xFF	; 255
    1b3c:	80 ec       	ldi	r24, 0xC0	; 192
    1b3e:	08 95       	ret

00001b40 <__fp_pscA>:
    1b40:	00 24       	eor	r0, r0
    1b42:	0a 94       	dec	r0
    1b44:	16 16       	cp	r1, r22
    1b46:	17 06       	cpc	r1, r23
    1b48:	18 06       	cpc	r1, r24
    1b4a:	09 06       	cpc	r0, r25
    1b4c:	08 95       	ret

00001b4e <__fp_pscB>:
    1b4e:	00 24       	eor	r0, r0
    1b50:	0a 94       	dec	r0
    1b52:	12 16       	cp	r1, r18
    1b54:	13 06       	cpc	r1, r19
    1b56:	14 06       	cpc	r1, r20
    1b58:	05 06       	cpc	r0, r21
    1b5a:	08 95       	ret

00001b5c <__fp_round>:
    1b5c:	09 2e       	mov	r0, r25
    1b5e:	03 94       	inc	r0
    1b60:	00 0c       	add	r0, r0
    1b62:	11 f4       	brne	.+4      	; 0x1b68 <__fp_round+0xc>
    1b64:	88 23       	and	r24, r24
    1b66:	52 f0       	brmi	.+20     	; 0x1b7c <__fp_round+0x20>
    1b68:	bb 0f       	add	r27, r27
    1b6a:	40 f4       	brcc	.+16     	; 0x1b7c <__fp_round+0x20>
    1b6c:	bf 2b       	or	r27, r31
    1b6e:	11 f4       	brne	.+4      	; 0x1b74 <__fp_round+0x18>
    1b70:	60 ff       	sbrs	r22, 0
    1b72:	04 c0       	rjmp	.+8      	; 0x1b7c <__fp_round+0x20>
    1b74:	6f 5f       	subi	r22, 0xFF	; 255
    1b76:	7f 4f       	sbci	r23, 0xFF	; 255
    1b78:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7c:	08 95       	ret

00001b7e <__fp_split3>:
    1b7e:	57 fd       	sbrc	r21, 7
    1b80:	90 58       	subi	r25, 0x80	; 128
    1b82:	44 0f       	add	r20, r20
    1b84:	55 1f       	adc	r21, r21
    1b86:	59 f0       	breq	.+22     	; 0x1b9e <__fp_splitA+0x10>
    1b88:	5f 3f       	cpi	r21, 0xFF	; 255
    1b8a:	71 f0       	breq	.+28     	; 0x1ba8 <__fp_splitA+0x1a>
    1b8c:	47 95       	ror	r20

00001b8e <__fp_splitA>:
    1b8e:	88 0f       	add	r24, r24
    1b90:	97 fb       	bst	r25, 7
    1b92:	99 1f       	adc	r25, r25
    1b94:	61 f0       	breq	.+24     	; 0x1bae <__fp_splitA+0x20>
    1b96:	9f 3f       	cpi	r25, 0xFF	; 255
    1b98:	79 f0       	breq	.+30     	; 0x1bb8 <__fp_splitA+0x2a>
    1b9a:	87 95       	ror	r24
    1b9c:	08 95       	ret
    1b9e:	12 16       	cp	r1, r18
    1ba0:	13 06       	cpc	r1, r19
    1ba2:	14 06       	cpc	r1, r20
    1ba4:	55 1f       	adc	r21, r21
    1ba6:	f2 cf       	rjmp	.-28     	; 0x1b8c <__fp_split3+0xe>
    1ba8:	46 95       	lsr	r20
    1baa:	f1 df       	rcall	.-30     	; 0x1b8e <__fp_splitA>
    1bac:	08 c0       	rjmp	.+16     	; 0x1bbe <__fp_splitA+0x30>
    1bae:	16 16       	cp	r1, r22
    1bb0:	17 06       	cpc	r1, r23
    1bb2:	18 06       	cpc	r1, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	f1 cf       	rjmp	.-30     	; 0x1b9a <__fp_splitA+0xc>
    1bb8:	86 95       	lsr	r24
    1bba:	71 05       	cpc	r23, r1
    1bbc:	61 05       	cpc	r22, r1
    1bbe:	08 94       	sec
    1bc0:	08 95       	ret

00001bc2 <__fp_zero>:
    1bc2:	e8 94       	clt

00001bc4 <__fp_szero>:
    1bc4:	bb 27       	eor	r27, r27
    1bc6:	66 27       	eor	r22, r22
    1bc8:	77 27       	eor	r23, r23
    1bca:	cb 01       	movw	r24, r22
    1bcc:	97 f9       	bld	r25, 7
    1bce:	08 95       	ret

00001bd0 <__mulsf3>:
    1bd0:	0b d0       	rcall	.+22     	; 0x1be8 <__mulsf3x>
    1bd2:	c4 cf       	rjmp	.-120    	; 0x1b5c <__fp_round>
    1bd4:	b5 df       	rcall	.-150    	; 0x1b40 <__fp_pscA>
    1bd6:	28 f0       	brcs	.+10     	; 0x1be2 <__mulsf3+0x12>
    1bd8:	ba df       	rcall	.-140    	; 0x1b4e <__fp_pscB>
    1bda:	18 f0       	brcs	.+6      	; 0x1be2 <__mulsf3+0x12>
    1bdc:	95 23       	and	r25, r21
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <__mulsf3+0x12>
    1be0:	a6 cf       	rjmp	.-180    	; 0x1b2e <__fp_inf>
    1be2:	ab cf       	rjmp	.-170    	; 0x1b3a <__fp_nan>
    1be4:	11 24       	eor	r1, r1
    1be6:	ee cf       	rjmp	.-36     	; 0x1bc4 <__fp_szero>

00001be8 <__mulsf3x>:
    1be8:	ca df       	rcall	.-108    	; 0x1b7e <__fp_split3>
    1bea:	a0 f3       	brcs	.-24     	; 0x1bd4 <__mulsf3+0x4>

00001bec <__mulsf3_pse>:
    1bec:	95 9f       	mul	r25, r21
    1bee:	d1 f3       	breq	.-12     	; 0x1be4 <__mulsf3+0x14>
    1bf0:	95 0f       	add	r25, r21
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	55 1f       	adc	r21, r21
    1bf6:	62 9f       	mul	r22, r18
    1bf8:	f0 01       	movw	r30, r0
    1bfa:	72 9f       	mul	r23, r18
    1bfc:	bb 27       	eor	r27, r27
    1bfe:	f0 0d       	add	r31, r0
    1c00:	b1 1d       	adc	r27, r1
    1c02:	63 9f       	mul	r22, r19
    1c04:	aa 27       	eor	r26, r26
    1c06:	f0 0d       	add	r31, r0
    1c08:	b1 1d       	adc	r27, r1
    1c0a:	aa 1f       	adc	r26, r26
    1c0c:	64 9f       	mul	r22, r20
    1c0e:	66 27       	eor	r22, r22
    1c10:	b0 0d       	add	r27, r0
    1c12:	a1 1d       	adc	r26, r1
    1c14:	66 1f       	adc	r22, r22
    1c16:	82 9f       	mul	r24, r18
    1c18:	22 27       	eor	r18, r18
    1c1a:	b0 0d       	add	r27, r0
    1c1c:	a1 1d       	adc	r26, r1
    1c1e:	62 1f       	adc	r22, r18
    1c20:	73 9f       	mul	r23, r19
    1c22:	b0 0d       	add	r27, r0
    1c24:	a1 1d       	adc	r26, r1
    1c26:	62 1f       	adc	r22, r18
    1c28:	83 9f       	mul	r24, r19
    1c2a:	a0 0d       	add	r26, r0
    1c2c:	61 1d       	adc	r22, r1
    1c2e:	22 1f       	adc	r18, r18
    1c30:	74 9f       	mul	r23, r20
    1c32:	33 27       	eor	r19, r19
    1c34:	a0 0d       	add	r26, r0
    1c36:	61 1d       	adc	r22, r1
    1c38:	23 1f       	adc	r18, r19
    1c3a:	84 9f       	mul	r24, r20
    1c3c:	60 0d       	add	r22, r0
    1c3e:	21 1d       	adc	r18, r1
    1c40:	82 2f       	mov	r24, r18
    1c42:	76 2f       	mov	r23, r22
    1c44:	6a 2f       	mov	r22, r26
    1c46:	11 24       	eor	r1, r1
    1c48:	9f 57       	subi	r25, 0x7F	; 127
    1c4a:	50 40       	sbci	r21, 0x00	; 0
    1c4c:	8a f0       	brmi	.+34     	; 0x1c70 <__mulsf3_pse+0x84>
    1c4e:	e1 f0       	breq	.+56     	; 0x1c88 <__mulsf3_pse+0x9c>
    1c50:	88 23       	and	r24, r24
    1c52:	4a f0       	brmi	.+18     	; 0x1c66 <__mulsf3_pse+0x7a>
    1c54:	ee 0f       	add	r30, r30
    1c56:	ff 1f       	adc	r31, r31
    1c58:	bb 1f       	adc	r27, r27
    1c5a:	66 1f       	adc	r22, r22
    1c5c:	77 1f       	adc	r23, r23
    1c5e:	88 1f       	adc	r24, r24
    1c60:	91 50       	subi	r25, 0x01	; 1
    1c62:	50 40       	sbci	r21, 0x00	; 0
    1c64:	a9 f7       	brne	.-22     	; 0x1c50 <__mulsf3_pse+0x64>
    1c66:	9e 3f       	cpi	r25, 0xFE	; 254
    1c68:	51 05       	cpc	r21, r1
    1c6a:	70 f0       	brcs	.+28     	; 0x1c88 <__mulsf3_pse+0x9c>
    1c6c:	60 cf       	rjmp	.-320    	; 0x1b2e <__fp_inf>
    1c6e:	aa cf       	rjmp	.-172    	; 0x1bc4 <__fp_szero>
    1c70:	5f 3f       	cpi	r21, 0xFF	; 255
    1c72:	ec f3       	brlt	.-6      	; 0x1c6e <__mulsf3_pse+0x82>
    1c74:	98 3e       	cpi	r25, 0xE8	; 232
    1c76:	dc f3       	brlt	.-10     	; 0x1c6e <__mulsf3_pse+0x82>
    1c78:	86 95       	lsr	r24
    1c7a:	77 95       	ror	r23
    1c7c:	67 95       	ror	r22
    1c7e:	b7 95       	ror	r27
    1c80:	f7 95       	ror	r31
    1c82:	e7 95       	ror	r30
    1c84:	9f 5f       	subi	r25, 0xFF	; 255
    1c86:	c1 f7       	brne	.-16     	; 0x1c78 <__mulsf3_pse+0x8c>
    1c88:	fe 2b       	or	r31, r30
    1c8a:	88 0f       	add	r24, r24
    1c8c:	91 1d       	adc	r25, r1
    1c8e:	96 95       	lsr	r25
    1c90:	87 95       	ror	r24
    1c92:	97 f9       	bld	r25, 7
    1c94:	08 95       	ret

00001c96 <pow>:
    1c96:	fa 01       	movw	r30, r20
    1c98:	ee 0f       	add	r30, r30
    1c9a:	ff 1f       	adc	r31, r31
    1c9c:	30 96       	adiw	r30, 0x00	; 0
    1c9e:	21 05       	cpc	r18, r1
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	99 f1       	breq	.+102    	; 0x1d0a <pow+0x74>
    1ca4:	61 15       	cp	r22, r1
    1ca6:	71 05       	cpc	r23, r1
    1ca8:	61 f4       	brne	.+24     	; 0x1cc2 <pow+0x2c>
    1caa:	80 38       	cpi	r24, 0x80	; 128
    1cac:	bf e3       	ldi	r27, 0x3F	; 63
    1cae:	9b 07       	cpc	r25, r27
    1cb0:	49 f1       	breq	.+82     	; 0x1d04 <pow+0x6e>
    1cb2:	68 94       	set
    1cb4:	90 38       	cpi	r25, 0x80	; 128
    1cb6:	81 05       	cpc	r24, r1
    1cb8:	61 f0       	breq	.+24     	; 0x1cd2 <pow+0x3c>
    1cba:	80 38       	cpi	r24, 0x80	; 128
    1cbc:	bf ef       	ldi	r27, 0xFF	; 255
    1cbe:	9b 07       	cpc	r25, r27
    1cc0:	41 f0       	breq	.+16     	; 0x1cd2 <pow+0x3c>
    1cc2:	99 23       	and	r25, r25
    1cc4:	42 f5       	brpl	.+80     	; 0x1d16 <pow+0x80>
    1cc6:	ff 3f       	cpi	r31, 0xFF	; 255
    1cc8:	e1 05       	cpc	r30, r1
    1cca:	31 05       	cpc	r19, r1
    1ccc:	21 05       	cpc	r18, r1
    1cce:	11 f1       	breq	.+68     	; 0x1d14 <pow+0x7e>
    1cd0:	e8 94       	clt
    1cd2:	08 94       	sec
    1cd4:	e7 95       	ror	r30
    1cd6:	d9 01       	movw	r26, r18
    1cd8:	aa 23       	and	r26, r26
    1cda:	29 f4       	brne	.+10     	; 0x1ce6 <pow+0x50>
    1cdc:	ab 2f       	mov	r26, r27
    1cde:	be 2f       	mov	r27, r30
    1ce0:	f8 5f       	subi	r31, 0xF8	; 248
    1ce2:	d0 f3       	brcs	.-12     	; 0x1cd8 <pow+0x42>
    1ce4:	10 c0       	rjmp	.+32     	; 0x1d06 <pow+0x70>
    1ce6:	ff 5f       	subi	r31, 0xFF	; 255
    1ce8:	70 f4       	brcc	.+28     	; 0x1d06 <pow+0x70>
    1cea:	a6 95       	lsr	r26
    1cec:	e0 f7       	brcc	.-8      	; 0x1ce6 <pow+0x50>
    1cee:	f7 39       	cpi	r31, 0x97	; 151
    1cf0:	50 f0       	brcs	.+20     	; 0x1d06 <pow+0x70>
    1cf2:	19 f0       	breq	.+6      	; 0x1cfa <pow+0x64>
    1cf4:	ff 3a       	cpi	r31, 0xAF	; 175
    1cf6:	38 f4       	brcc	.+14     	; 0x1d06 <pow+0x70>
    1cf8:	9f 77       	andi	r25, 0x7F	; 127
    1cfa:	9f 93       	push	r25
    1cfc:	0c d0       	rcall	.+24     	; 0x1d16 <pow+0x80>
    1cfe:	0f 90       	pop	r0
    1d00:	07 fc       	sbrc	r0, 7
    1d02:	90 58       	subi	r25, 0x80	; 128
    1d04:	08 95       	ret
    1d06:	3e f0       	brts	.+14     	; 0x1d16 <pow+0x80>
    1d08:	18 cf       	rjmp	.-464    	; 0x1b3a <__fp_nan>
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	80 e8       	ldi	r24, 0x80	; 128
    1d10:	9f e3       	ldi	r25, 0x3F	; 63
    1d12:	08 95       	ret
    1d14:	4f e7       	ldi	r20, 0x7F	; 127
    1d16:	9f 77       	andi	r25, 0x7F	; 127
    1d18:	5f 93       	push	r21
    1d1a:	4f 93       	push	r20
    1d1c:	3f 93       	push	r19
    1d1e:	2f 93       	push	r18
    1d20:	9e d0       	rcall	.+316    	; 0x1e5e <log>
    1d22:	2f 91       	pop	r18
    1d24:	3f 91       	pop	r19
    1d26:	4f 91       	pop	r20
    1d28:	5f 91       	pop	r21
    1d2a:	52 df       	rcall	.-348    	; 0x1bd0 <__mulsf3>
    1d2c:	05 c0       	rjmp	.+10     	; 0x1d38 <exp>
    1d2e:	19 f4       	brne	.+6      	; 0x1d36 <pow+0xa0>
    1d30:	0e f0       	brts	.+2      	; 0x1d34 <pow+0x9e>
    1d32:	fd ce       	rjmp	.-518    	; 0x1b2e <__fp_inf>
    1d34:	46 cf       	rjmp	.-372    	; 0x1bc2 <__fp_zero>
    1d36:	01 cf       	rjmp	.-510    	; 0x1b3a <__fp_nan>

00001d38 <exp>:
    1d38:	2a df       	rcall	.-428    	; 0x1b8e <__fp_splitA>
    1d3a:	c8 f3       	brcs	.-14     	; 0x1d2e <pow+0x98>
    1d3c:	96 38       	cpi	r25, 0x86	; 134
    1d3e:	c0 f7       	brcc	.-16     	; 0x1d30 <pow+0x9a>
    1d40:	07 f8       	bld	r0, 7
    1d42:	0f 92       	push	r0
    1d44:	e8 94       	clt
    1d46:	2b e3       	ldi	r18, 0x3B	; 59
    1d48:	3a ea       	ldi	r19, 0xAA	; 170
    1d4a:	48 eb       	ldi	r20, 0xB8	; 184
    1d4c:	5f e7       	ldi	r21, 0x7F	; 127
    1d4e:	4e df       	rcall	.-356    	; 0x1bec <__mulsf3_pse>
    1d50:	0f 92       	push	r0
    1d52:	0f 92       	push	r0
    1d54:	0f 92       	push	r0
    1d56:	4d b7       	in	r20, 0x3d	; 61
    1d58:	5e b7       	in	r21, 0x3e	; 62
    1d5a:	0f 92       	push	r0
    1d5c:	c0 d0       	rcall	.+384    	; 0x1ede <modf>
    1d5e:	e8 ed       	ldi	r30, 0xD8	; 216
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	16 d0       	rcall	.+44     	; 0x1d90 <__fp_powser>
    1d64:	4f 91       	pop	r20
    1d66:	5f 91       	pop	r21
    1d68:	ef 91       	pop	r30
    1d6a:	ff 91       	pop	r31
    1d6c:	e5 95       	asr	r30
    1d6e:	ee 1f       	adc	r30, r30
    1d70:	ff 1f       	adc	r31, r31
    1d72:	49 f0       	breq	.+18     	; 0x1d86 <exp+0x4e>
    1d74:	fe 57       	subi	r31, 0x7E	; 126
    1d76:	e0 68       	ori	r30, 0x80	; 128
    1d78:	44 27       	eor	r20, r20
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	44 1f       	adc	r20, r20
    1d7e:	fa 95       	dec	r31
    1d80:	e1 f7       	brne	.-8      	; 0x1d7a <exp+0x42>
    1d82:	41 95       	neg	r20
    1d84:	55 0b       	sbc	r21, r21
    1d86:	32 d0       	rcall	.+100    	; 0x1dec <ldexp>
    1d88:	0f 90       	pop	r0
    1d8a:	07 fe       	sbrs	r0, 7
    1d8c:	26 c0       	rjmp	.+76     	; 0x1dda <inverse>
    1d8e:	08 95       	ret

00001d90 <__fp_powser>:
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	1f 93       	push	r17
    1d96:	0f 93       	push	r16
    1d98:	ff 92       	push	r15
    1d9a:	ef 92       	push	r14
    1d9c:	df 92       	push	r13
    1d9e:	7b 01       	movw	r14, r22
    1da0:	8c 01       	movw	r16, r24
    1da2:	68 94       	set
    1da4:	05 c0       	rjmp	.+10     	; 0x1db0 <__fp_powser+0x20>
    1da6:	da 2e       	mov	r13, r26
    1da8:	ef 01       	movw	r28, r30
    1daa:	1e df       	rcall	.-452    	; 0x1be8 <__mulsf3x>
    1dac:	fe 01       	movw	r30, r28
    1dae:	e8 94       	clt
    1db0:	a5 91       	lpm	r26, Z+
    1db2:	25 91       	lpm	r18, Z+
    1db4:	35 91       	lpm	r19, Z+
    1db6:	45 91       	lpm	r20, Z+
    1db8:	55 91       	lpm	r21, Z+
    1dba:	ae f3       	brts	.-22     	; 0x1da6 <__fp_powser+0x16>
    1dbc:	ef 01       	movw	r28, r30
    1dbe:	8e dd       	rcall	.-1252   	; 0x18dc <__addsf3x>
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	97 01       	movw	r18, r14
    1dc4:	a8 01       	movw	r20, r16
    1dc6:	da 94       	dec	r13
    1dc8:	79 f7       	brne	.-34     	; 0x1da8 <__fp_powser+0x18>
    1dca:	df 90       	pop	r13
    1dcc:	ef 90       	pop	r14
    1dce:	ff 90       	pop	r15
    1dd0:	0f 91       	pop	r16
    1dd2:	1f 91       	pop	r17
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <inverse>:
    1dda:	9b 01       	movw	r18, r22
    1ddc:	ac 01       	movw	r20, r24
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	80 e8       	ldi	r24, 0x80	; 128
    1de4:	9f e3       	ldi	r25, 0x3F	; 63
    1de6:	cd cd       	rjmp	.-1126   	; 0x1982 <__divsf3>
    1de8:	a2 ce       	rjmp	.-700    	; 0x1b2e <__fp_inf>
    1dea:	ac c0       	rjmp	.+344    	; 0x1f44 <__fp_mpack>

00001dec <ldexp>:
    1dec:	d0 de       	rcall	.-608    	; 0x1b8e <__fp_splitA>
    1dee:	e8 f3       	brcs	.-6      	; 0x1dea <inverse+0x10>
    1df0:	99 23       	and	r25, r25
    1df2:	d9 f3       	breq	.-10     	; 0x1dea <inverse+0x10>
    1df4:	94 0f       	add	r25, r20
    1df6:	51 1d       	adc	r21, r1
    1df8:	bb f3       	brvs	.-18     	; 0x1de8 <inverse+0xe>
    1dfa:	91 50       	subi	r25, 0x01	; 1
    1dfc:	50 40       	sbci	r21, 0x00	; 0
    1dfe:	94 f0       	brlt	.+36     	; 0x1e24 <ldexp+0x38>
    1e00:	59 f0       	breq	.+22     	; 0x1e18 <ldexp+0x2c>
    1e02:	88 23       	and	r24, r24
    1e04:	32 f0       	brmi	.+12     	; 0x1e12 <ldexp+0x26>
    1e06:	66 0f       	add	r22, r22
    1e08:	77 1f       	adc	r23, r23
    1e0a:	88 1f       	adc	r24, r24
    1e0c:	91 50       	subi	r25, 0x01	; 1
    1e0e:	50 40       	sbci	r21, 0x00	; 0
    1e10:	c1 f7       	brne	.-16     	; 0x1e02 <ldexp+0x16>
    1e12:	9e 3f       	cpi	r25, 0xFE	; 254
    1e14:	51 05       	cpc	r21, r1
    1e16:	44 f7       	brge	.-48     	; 0x1de8 <inverse+0xe>
    1e18:	88 0f       	add	r24, r24
    1e1a:	91 1d       	adc	r25, r1
    1e1c:	96 95       	lsr	r25
    1e1e:	87 95       	ror	r24
    1e20:	97 f9       	bld	r25, 7
    1e22:	08 95       	ret
    1e24:	5f 3f       	cpi	r21, 0xFF	; 255
    1e26:	ac f0       	brlt	.+42     	; 0x1e52 <ldexp+0x66>
    1e28:	98 3e       	cpi	r25, 0xE8	; 232
    1e2a:	9c f0       	brlt	.+38     	; 0x1e52 <ldexp+0x66>
    1e2c:	bb 27       	eor	r27, r27
    1e2e:	86 95       	lsr	r24
    1e30:	77 95       	ror	r23
    1e32:	67 95       	ror	r22
    1e34:	b7 95       	ror	r27
    1e36:	08 f4       	brcc	.+2      	; 0x1e3a <ldexp+0x4e>
    1e38:	b1 60       	ori	r27, 0x01	; 1
    1e3a:	93 95       	inc	r25
    1e3c:	c1 f7       	brne	.-16     	; 0x1e2e <ldexp+0x42>
    1e3e:	bb 0f       	add	r27, r27
    1e40:	58 f7       	brcc	.-42     	; 0x1e18 <ldexp+0x2c>
    1e42:	11 f4       	brne	.+4      	; 0x1e48 <ldexp+0x5c>
    1e44:	60 ff       	sbrs	r22, 0
    1e46:	e8 cf       	rjmp	.-48     	; 0x1e18 <ldexp+0x2c>
    1e48:	6f 5f       	subi	r22, 0xFF	; 255
    1e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e50:	e3 cf       	rjmp	.-58     	; 0x1e18 <ldexp+0x2c>
    1e52:	b8 ce       	rjmp	.-656    	; 0x1bc4 <__fp_szero>
    1e54:	0e f0       	brts	.+2      	; 0x1e58 <ldexp+0x6c>
    1e56:	76 c0       	rjmp	.+236    	; 0x1f44 <__fp_mpack>
    1e58:	70 ce       	rjmp	.-800    	; 0x1b3a <__fp_nan>
    1e5a:	68 94       	set
    1e5c:	68 ce       	rjmp	.-816    	; 0x1b2e <__fp_inf>

00001e5e <log>:
    1e5e:	97 de       	rcall	.-722    	; 0x1b8e <__fp_splitA>
    1e60:	c8 f3       	brcs	.-14     	; 0x1e54 <ldexp+0x68>
    1e62:	99 23       	and	r25, r25
    1e64:	d1 f3       	breq	.-12     	; 0x1e5a <ldexp+0x6e>
    1e66:	c6 f3       	brts	.-16     	; 0x1e58 <ldexp+0x6c>
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	1f 93       	push	r17
    1e6e:	0f 93       	push	r16
    1e70:	ff 92       	push	r15
    1e72:	c9 2f       	mov	r28, r25
    1e74:	dd 27       	eor	r29, r29
    1e76:	88 23       	and	r24, r24
    1e78:	2a f0       	brmi	.+10     	; 0x1e84 <log+0x26>
    1e7a:	21 97       	sbiw	r28, 0x01	; 1
    1e7c:	66 0f       	add	r22, r22
    1e7e:	77 1f       	adc	r23, r23
    1e80:	88 1f       	adc	r24, r24
    1e82:	da f7       	brpl	.-10     	; 0x1e7a <log+0x1c>
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f eb       	ldi	r21, 0xBF	; 191
    1e8c:	9f e3       	ldi	r25, 0x3F	; 63
    1e8e:	88 39       	cpi	r24, 0x98	; 152
    1e90:	20 f0       	brcs	.+8      	; 0x1e9a <log+0x3c>
    1e92:	80 3e       	cpi	r24, 0xE0	; 224
    1e94:	30 f0       	brcs	.+12     	; 0x1ea2 <log+0x44>
    1e96:	21 96       	adiw	r28, 0x01	; 1
    1e98:	8f 77       	andi	r24, 0x7F	; 127
    1e9a:	0f dd       	rcall	.-1506   	; 0x18ba <__addsf3>
    1e9c:	e0 e0       	ldi	r30, 0x00	; 0
    1e9e:	f1 e0       	ldi	r31, 0x01	; 1
    1ea0:	03 c0       	rjmp	.+6      	; 0x1ea8 <log+0x4a>
    1ea2:	0b dd       	rcall	.-1514   	; 0x18ba <__addsf3>
    1ea4:	ed e2       	ldi	r30, 0x2D	; 45
    1ea6:	f1 e0       	ldi	r31, 0x01	; 1
    1ea8:	73 df       	rcall	.-282    	; 0x1d90 <__fp_powser>
    1eaa:	8b 01       	movw	r16, r22
    1eac:	be 01       	movw	r22, r28
    1eae:	ec 01       	movw	r28, r24
    1eb0:	fb 2e       	mov	r15, r27
    1eb2:	6f 57       	subi	r22, 0x7F	; 127
    1eb4:	71 09       	sbc	r23, r1
    1eb6:	75 95       	asr	r23
    1eb8:	77 1f       	adc	r23, r23
    1eba:	88 0b       	sbc	r24, r24
    1ebc:	99 0b       	sbc	r25, r25
    1ebe:	fc dd       	rcall	.-1032   	; 0x1ab8 <__floatsisf>
    1ec0:	28 e1       	ldi	r18, 0x18	; 24
    1ec2:	32 e7       	ldi	r19, 0x72	; 114
    1ec4:	41 e3       	ldi	r20, 0x31	; 49
    1ec6:	5f e3       	ldi	r21, 0x3F	; 63
    1ec8:	8f de       	rcall	.-738    	; 0x1be8 <__mulsf3x>
    1eca:	af 2d       	mov	r26, r15
    1ecc:	98 01       	movw	r18, r16
    1ece:	ae 01       	movw	r20, r28
    1ed0:	ff 90       	pop	r15
    1ed2:	0f 91       	pop	r16
    1ed4:	1f 91       	pop	r17
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	00 dd       	rcall	.-1536   	; 0x18dc <__addsf3x>
    1edc:	3f ce       	rjmp	.-898    	; 0x1b5c <__fp_round>

00001ede <modf>:
    1ede:	fa 01       	movw	r30, r20
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	aa 0f       	add	r26, r26
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	9b 01       	movw	r18, r22
    1ee8:	ac 01       	movw	r20, r24
    1eea:	bf 57       	subi	r27, 0x7F	; 127
    1eec:	28 f4       	brcc	.+10     	; 0x1ef8 <modf+0x1a>
    1eee:	22 27       	eor	r18, r18
    1ef0:	33 27       	eor	r19, r19
    1ef2:	44 27       	eor	r20, r20
    1ef4:	50 78       	andi	r21, 0x80	; 128
    1ef6:	1f c0       	rjmp	.+62     	; 0x1f36 <modf+0x58>
    1ef8:	b7 51       	subi	r27, 0x17	; 23
    1efa:	88 f4       	brcc	.+34     	; 0x1f1e <modf+0x40>
    1efc:	ab 2f       	mov	r26, r27
    1efe:	00 24       	eor	r0, r0
    1f00:	46 95       	lsr	r20
    1f02:	37 95       	ror	r19
    1f04:	27 95       	ror	r18
    1f06:	01 1c       	adc	r0, r1
    1f08:	a3 95       	inc	r26
    1f0a:	d2 f3       	brmi	.-12     	; 0x1f00 <modf+0x22>
    1f0c:	00 20       	and	r0, r0
    1f0e:	69 f0       	breq	.+26     	; 0x1f2a <modf+0x4c>
    1f10:	22 0f       	add	r18, r18
    1f12:	33 1f       	adc	r19, r19
    1f14:	44 1f       	adc	r20, r20
    1f16:	b3 95       	inc	r27
    1f18:	da f3       	brmi	.-10     	; 0x1f10 <modf+0x32>
    1f1a:	0d d0       	rcall	.+26     	; 0x1f36 <modf+0x58>
    1f1c:	cd cc       	rjmp	.-1638   	; 0x18b8 <__subsf3>
    1f1e:	61 30       	cpi	r22, 0x01	; 1
    1f20:	71 05       	cpc	r23, r1
    1f22:	a0 e8       	ldi	r26, 0x80	; 128
    1f24:	8a 07       	cpc	r24, r26
    1f26:	b9 46       	sbci	r27, 0x69	; 105
    1f28:	30 f4       	brcc	.+12     	; 0x1f36 <modf+0x58>
    1f2a:	9b 01       	movw	r18, r22
    1f2c:	ac 01       	movw	r20, r24
    1f2e:	66 27       	eor	r22, r22
    1f30:	77 27       	eor	r23, r23
    1f32:	88 27       	eor	r24, r24
    1f34:	90 78       	andi	r25, 0x80	; 128
    1f36:	30 96       	adiw	r30, 0x00	; 0
    1f38:	21 f0       	breq	.+8      	; 0x1f42 <modf+0x64>
    1f3a:	20 83       	st	Z, r18
    1f3c:	31 83       	std	Z+1, r19	; 0x01
    1f3e:	42 83       	std	Z+2, r20	; 0x02
    1f40:	53 83       	std	Z+3, r21	; 0x03
    1f42:	08 95       	ret

00001f44 <__fp_mpack>:
    1f44:	9f 3f       	cpi	r25, 0xFF	; 255
    1f46:	31 f0       	breq	.+12     	; 0x1f54 <__fp_mpack_finite+0xc>

00001f48 <__fp_mpack_finite>:
    1f48:	91 50       	subi	r25, 0x01	; 1
    1f4a:	20 f4       	brcc	.+8      	; 0x1f54 <__fp_mpack_finite+0xc>
    1f4c:	87 95       	ror	r24
    1f4e:	77 95       	ror	r23
    1f50:	67 95       	ror	r22
    1f52:	b7 95       	ror	r27
    1f54:	88 0f       	add	r24, r24
    1f56:	91 1d       	adc	r25, r1
    1f58:	96 95       	lsr	r25
    1f5a:	87 95       	ror	r24
    1f5c:	97 f9       	bld	r25, 7
    1f5e:	08 95       	ret

00001f60 <__tablejump2__>:
    1f60:	ee 0f       	add	r30, r30
    1f62:	ff 1f       	adc	r31, r31
    1f64:	00 24       	eor	r0, r0
    1f66:	00 1c       	adc	r0, r0
    1f68:	0b be       	out	0x3b, r0	; 59
    1f6a:	07 90       	elpm	r0, Z+
    1f6c:	f6 91       	elpm	r31, Z
    1f6e:	e0 2d       	mov	r30, r0
    1f70:	09 94       	ijmp

00001f72 <eeprom_read_byte>:
    1f72:	f9 99       	sbic	0x1f, 1	; 31
    1f74:	fe cf       	rjmp	.-4      	; 0x1f72 <eeprom_read_byte>
    1f76:	92 bd       	out	0x22, r25	; 34
    1f78:	81 bd       	out	0x21, r24	; 33
    1f7a:	f8 9a       	sbi	0x1f, 0	; 31
    1f7c:	99 27       	eor	r25, r25
    1f7e:	80 b5       	in	r24, 0x20	; 32
    1f80:	08 95       	ret

00001f82 <eeprom_read_dword>:
    1f82:	a6 e1       	ldi	r26, 0x16	; 22
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	44 e0       	ldi	r20, 0x04	; 4
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	18 c0       	rjmp	.+48     	; 0x1fbc <eeprom_read_blraw>

00001f8c <eeprom_write_byte>:
    1f8c:	26 2f       	mov	r18, r22

00001f8e <eeprom_write_r18>:
    1f8e:	f9 99       	sbic	0x1f, 1	; 31
    1f90:	fe cf       	rjmp	.-4      	; 0x1f8e <eeprom_write_r18>
    1f92:	1f ba       	out	0x1f, r1	; 31
    1f94:	92 bd       	out	0x22, r25	; 34
    1f96:	81 bd       	out	0x21, r24	; 33
    1f98:	20 bd       	out	0x20, r18	; 32
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	fa 9a       	sbi	0x1f, 2	; 31
    1fa0:	f9 9a       	sbi	0x1f, 1	; 31
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	08 95       	ret

00001fa8 <eeprom_write_dword>:
    1fa8:	24 2f       	mov	r18, r20
    1faa:	f1 df       	rcall	.-30     	; 0x1f8e <eeprom_write_r18>
    1fac:	25 2f       	mov	r18, r21
    1fae:	ef df       	rcall	.-34     	; 0x1f8e <eeprom_write_r18>
    1fb0:	00 c0       	rjmp	.+0      	; 0x1fb2 <eeprom_write_word>

00001fb2 <eeprom_write_word>:
    1fb2:	ec df       	rcall	.-40     	; 0x1f8c <eeprom_write_byte>
    1fb4:	27 2f       	mov	r18, r23
    1fb6:	eb cf       	rjmp	.-42     	; 0x1f8e <eeprom_write_r18>

00001fb8 <eeprom_read_block>:
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22

00001fbc <eeprom_read_blraw>:
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	f9 99       	sbic	0x1f, 1	; 31
    1fc0:	fe cf       	rjmp	.-4      	; 0x1fbe <eeprom_read_blraw+0x2>
    1fc2:	06 c0       	rjmp	.+12     	; 0x1fd0 <eeprom_read_blraw+0x14>
    1fc4:	f2 bd       	out	0x22, r31	; 34
    1fc6:	e1 bd       	out	0x21, r30	; 33
    1fc8:	f8 9a       	sbi	0x1f, 0	; 31
    1fca:	31 96       	adiw	r30, 0x01	; 1
    1fcc:	00 b4       	in	r0, 0x20	; 32
    1fce:	0d 92       	st	X+, r0
    1fd0:	41 50       	subi	r20, 0x01	; 1
    1fd2:	50 40       	sbci	r21, 0x00	; 0
    1fd4:	b8 f7       	brcc	.-18     	; 0x1fc4 <eeprom_read_blraw+0x8>
    1fd6:	08 95       	ret

00001fd8 <_exit>:
    1fd8:	f8 94       	cli

00001fda <__stop_program>:
    1fda:	ff cf       	rjmp	.-2      	; 0x1fda <__stop_program>
