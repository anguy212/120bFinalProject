
joystickworking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080015a  0080015a  000003c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4f  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000955  00000000  00000000  0000132f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000665  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000022ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000567  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046e  00000000  00000000  000029cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002e3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 35       	cpi	r26, 0x5A	; 90
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e5       	ldi	r26, 0x5A	; 90
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 35       	cpi	r26, 0x5F	; 95
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d1 d0       	rcall	.+418    	; 0x266 <main>
  c4:	08 c1       	rjmp	.+528    	; 0x2d6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
		LCD_DisplayString(1, "PUSHED UP");

	}
	else
	{
		LCD_DisplayString(1, "NO MOVEMENT");
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <__data_end>
  dc:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <__data_end+0x1>
  e0:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end+0x2>
  e4:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
 11e:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <__data_end+0x1>
 122:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <__data_end+0x2>
 126:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <__data_end+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__data_end>
 148:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <__data_end+0x1>
 14c:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <__data_end+0x2>
 150:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <__data_end+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
 15e:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <__data_end+0x1>
 162:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <__data_end+0x2>
 166:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <__data_end+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
 18c:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <__data_end+0x1>
 190:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <__data_end+0x2>
 194:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <__data_end+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
 1d0:	58 98       	cbi	0x0b, 0	; 11
 1d2:	85 b9       	out	0x05, r24	; 5
 1d4:	59 9a       	sbi	0x0b, 1	; 11
 1d6:	00 00       	nop
 1d8:	59 98       	cbi	0x0b, 1	; 11
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <LCD_Cursor>:
 1e8:	81 31       	cpi	r24, 0x11	; 17
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <LCD_Cursor+0xa>
 1ec:	81 58       	subi	r24, 0x81	; 129
 1ee:	f0 cf       	rjmp	.-32     	; 0x1d0 <LCD_WriteCommand>
 1f0:	08 95       	ret
 1f2:	81 55       	subi	r24, 0x51	; 81
 1f4:	ed cf       	rjmp	.-38     	; 0x1d0 <LCD_WriteCommand>
 1f6:	08 95       	ret

000001f8 <LCD_init>:
 1f8:	84 e6       	ldi	r24, 0x64	; 100
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	d6 df       	rcall	.-84     	; 0x1aa <delay_ms>
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	e7 df       	rcall	.-50     	; 0x1d0 <LCD_WriteCommand>
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	e5 df       	rcall	.-54     	; 0x1d0 <LCD_WriteCommand>
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	e3 df       	rcall	.-58     	; 0x1d0 <LCD_WriteCommand>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	e1 df       	rcall	.-62     	; 0x1d0 <LCD_WriteCommand>
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	cb cf       	rjmp	.-106    	; 0x1aa <delay_ms>
 214:	08 95       	ret

00000216 <LCD_WriteData>:
 216:	58 9a       	sbi	0x0b, 0	; 11
 218:	85 b9       	out	0x05, r24	; 5
 21a:	59 9a       	sbi	0x0b, 1	; 11
 21c:	00 00       	nop
 21e:	59 98       	cbi	0x0b, 1	; 11
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	c2 cf       	rjmp	.-124    	; 0x1aa <delay_ms>
 226:	08 95       	ret

00000228 <LCD_DisplayString>:
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	18 2f       	mov	r17, r24
 232:	eb 01       	movw	r28, r22
 234:	d6 df       	rcall	.-84     	; 0x1e2 <LCD_ClearScreen>
 236:	88 81       	ld	r24, Y
 238:	88 23       	and	r24, r24
 23a:	51 f0       	breq	.+20     	; 0x250 <LCD_DisplayString+0x28>
 23c:	01 e0       	ldi	r16, 0x01	; 1
 23e:	01 0f       	add	r16, r17
 240:	81 2f       	mov	r24, r17
 242:	d2 df       	rcall	.-92     	; 0x1e8 <LCD_Cursor>
 244:	89 91       	ld	r24, Y+
 246:	e7 df       	rcall	.-50     	; 0x216 <LCD_WriteData>
 248:	10 2f       	mov	r17, r16
 24a:	88 81       	ld	r24, Y
 24c:	81 11       	cpse	r24, r1
 24e:	f6 cf       	rjmp	.-20     	; 0x23c <LCD_DisplayString+0x14>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <ADC_init>:
 25a:	ea e7       	ldi	r30, 0x7A	; 122
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 6e       	ori	r24, 0xE0	; 224
 262:	80 83       	st	Z, r24
 264:	08 95       	ret

00000266 <main>:
}


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 266:	11 b8       	out	0x01, r1	; 1
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF; PORTD = 0x00;
 26c:	8a b9       	out	0x0a, r24	; 10
 26e:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0xFF; PORTB = 0x00;
 270:	84 b9       	out	0x04, r24	; 4
 272:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F;
 274:	80 ef       	ldi	r24, 0xF0	; 240
 276:	87 b9       	out	0x07, r24	; 7
 278:	8f e0       	ldi	r24, 0x0F	; 15
 27a:	88 b9       	out	0x08, r24	; 8

	ADC_init();
 27c:	ee df       	rcall	.-36     	; 0x25a <ADC_init>

	LCD_init();
 27e:	bc df       	rcall	.-136    	; 0x1f8 <LCD_init>
 280:	68 ee       	ldi	r22, 0xE8	; 232

	TimerSet(1000);
 282:	73 e0       	ldi	r23, 0x03	; 3
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	1f df       	rcall	.-450    	; 0xc8 <TimerSet>
	TimerOn();
 28a:	2f df       	rcall	.-418    	; 0xea <TimerOn>
 28c:	90 e0       	ldi	r25, 0x00	; 0
	
	unsigned char count = 0;
 28e:	c0 e0       	ldi	r28, 0x00	; 0
			LCD_Cursor(33);
			count++;
		}
		else if(count == 2)
		{
			count = 0;
 290:	d2 e0       	ldi	r29, 0x02	; 2
		else if(count == 1)
		{
			LCD_DisplayString(1, " settings | menu      ");
			LCD_WriteData('|');
			LCD_Cursor(33);
			count++;
 292:	91 11       	cpse	r25, r1
	unsigned char count = 0;
	
    /* Replace with your application code */
    while (1) 
    {
		if(count == 0)
 294:	0a c0       	rjmp	.+20     	; 0x2aa <main+0x44>
		{
			LCD_DisplayString(1, " settings | menu            ");
 296:	66 e2       	ldi	r22, 0x26	; 38
 298:	71 e0       	ldi	r23, 0x01	; 1
 29a:	81 e0       	ldi	r24, 0x01	; 1
			LCD_WriteData('|');
 29c:	c5 df       	rcall	.-118    	; 0x228 <LCD_DisplayString>
 29e:	8c e7       	ldi	r24, 0x7C	; 124
 2a0:	ba df       	rcall	.-140    	; 0x216 <LCD_WriteData>
			LCD_Cursor(33);
 2a2:	81 e2       	ldi	r24, 0x21	; 33
 2a4:	a1 df       	rcall	.-190    	; 0x1e8 <LCD_Cursor>
 2a6:	91 e0       	ldi	r25, 0x01	; 1
			count++;
 2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <main+0x62>
		}
		else if(count == 1)
 2aa:	91 30       	cpi	r25, 0x01	; 1
		{
			LCD_DisplayString(1, " settings | menu      ");
 2ac:	51 f4       	brne	.+20     	; 0x2c2 <main+0x5c>
 2ae:	63 e4       	ldi	r22, 0x43	; 67
 2b0:	71 e0       	ldi	r23, 0x01	; 1
 2b2:	81 e0       	ldi	r24, 0x01	; 1
			LCD_WriteData('|');
 2b4:	b9 df       	rcall	.-142    	; 0x228 <LCD_DisplayString>
 2b6:	8c e7       	ldi	r24, 0x7C	; 124
 2b8:	ae df       	rcall	.-164    	; 0x216 <LCD_WriteData>
			LCD_Cursor(33);
 2ba:	81 e2       	ldi	r24, 0x21	; 33
 2bc:	95 df       	rcall	.-214    	; 0x1e8 <LCD_Cursor>
 2be:	9d 2f       	mov	r25, r29
			count++;
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <main+0x62>
 2c2:	92 30       	cpi	r25, 0x02	; 2
		}
		else if(count == 2)
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <main+0x62>
 2c6:	9c 2f       	mov	r25, r28
		{
			count = 0;
 2c8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <TimerFlag>
		}	
		while(!TimerFlag);
 2cc:	88 23       	and	r24, r24
 2ce:	e1 f3       	breq	.-8      	; 0x2c8 <main+0x62>
 2d0:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <TimerFlag>
		TimerFlag = 0;
 2d4:	de cf       	rjmp	.-68     	; 0x292 <main+0x2c>

000002d6 <_exit>:
    }
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
