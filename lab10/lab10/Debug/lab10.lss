
lab10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00001f40  00001fd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  0080020c  0080020c  000020e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002110  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00002150  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027b1  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b52  00000000  00000000  00004aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000148f  00000000  00000000  000055fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00006a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000827  00000000  00000000  00006d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001317  00000000  00000000  0000757f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00008896  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ac c0       	rjmp	.+344    	; 0x15a <__ctors_end>
       2:	00 00       	nop
       4:	c9 c0       	rjmp	.+402    	; 0x198 <__bad_interrupt>
       6:	00 00       	nop
       8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
       a:	00 00       	nop
       c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
       e:	00 00       	nop
      10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
      12:	00 00       	nop
      14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
      16:	00 00       	nop
      18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
      26:	00 00       	nop
      28:	b7 c0       	rjmp	.+366    	; 0x198 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b5 c0       	rjmp	.+362    	; 0x198 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
      32:	00 00       	nop
      34:	e7 c0       	rjmp	.+462    	; 0x204 <__vector_13>
      36:	00 00       	nop
      38:	af c0       	rjmp	.+350    	; 0x198 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
      42:	00 00       	nop
      44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
      46:	00 00       	nop
      48:	a7 c0       	rjmp	.+334    	; 0x198 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a5 c0       	rjmp	.+330    	; 0x198 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
      52:	00 00       	nop
      54:	a1 c0       	rjmp	.+322    	; 0x198 <__bad_interrupt>
      56:	00 00       	nop
      58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
      62:	00 00       	nop
      64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
      66:	00 00       	nop
      68:	97 c0       	rjmp	.+302    	; 0x198 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	95 c0       	rjmp	.+298    	; 0x198 <__bad_interrupt>
      6e:	00 00       	nop
      70:	93 c0       	rjmp	.+294    	; 0x198 <__bad_interrupt>
      72:	00 00       	nop
      74:	91 c0       	rjmp	.+290    	; 0x198 <__bad_interrupt>
      76:	00 00       	nop
      78:	8f c0       	rjmp	.+286    	; 0x198 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8d c0       	rjmp	.+282    	; 0x198 <__bad_interrupt>
      7e:	00 00       	nop
      80:	8b c0       	rjmp	.+278    	; 0x198 <__bad_interrupt>
      82:	00 00       	nop
      84:	89 c0       	rjmp	.+274    	; 0x198 <__bad_interrupt>
      86:	00 00       	nop
      88:	87 c0       	rjmp	.+270    	; 0x198 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	15 02       	muls	r17, r21
      8e:	17 02       	muls	r17, r23
      90:	19 02       	muls	r17, r25
      92:	1b 02       	muls	r17, r27
      94:	1d 02       	muls	r17, r29
      96:	1f 02       	muls	r17, r31
      98:	21 02       	muls	r18, r17
      9a:	23 02       	muls	r18, r19
      9c:	25 02       	muls	r18, r21
      9e:	46 02       	muls	r20, r22
      a0:	32 02       	muls	r19, r18
      a2:	34 02       	muls	r19, r20
      a4:	36 02       	muls	r19, r22
      a6:	38 02       	muls	r19, r24
      a8:	3a 02       	muls	r19, r26
      aa:	3c 02       	muls	r19, r28
      ac:	3e 02       	muls	r19, r30
      ae:	40 02       	muls	r20, r16
      b0:	42 02       	muls	r20, r18
      b2:	2d 07       	cpc	r18, r29
      b4:	8e 03       	fmulsu	r16, r22
      b6:	30 07       	cpc	r19, r16
      b8:	aa 03       	fmulsu	r18, r18
      ba:	8b 03       	fmulsu	r16, r19
      bc:	e4 03       	fmuls	r22, r20
      be:	8f 05       	cpc	r24, r15
      c0:	ee 03       	fmulsu	r22, r22
      c2:	f4 03       	fmuls	r23, r20
      c4:	f4 03       	fmuls	r23, r20
      c6:	b0 0a       	sbc	r11, r16
      c8:	8f 07       	cpc	r24, r31
      ca:	ab 07       	cpc	r26, r27
      cc:	4d 09       	sbc	r20, r13
      ce:	63 09       	sbc	r22, r3
      d0:	6a 09       	sbc	r22, r10
      d2:	81 09       	sbc	r24, r1
      d4:	87 09       	sbc	r24, r7
      d6:	8e 09       	sbc	r24, r14
      d8:	07 63       	ori	r16, 0x37	; 55
      da:	42 36       	cpi	r20, 0x62	; 98
      dc:	b7 9b       	sbis	0x16, 7	; 22
      de:	d8 a7       	std	Y+40, r29	; 0x28
      e0:	1a 39       	cpi	r17, 0x9A	; 154
      e2:	68 56       	subi	r22, 0x68	; 104
      e4:	18 ae       	std	Y+56, r1	; 0x38
      e6:	ba ab       	std	Y+50, r27	; 0x32
      e8:	55 8c       	ldd	r5, Z+29	; 0x1d
      ea:	1d 3c       	cpi	r17, 0xCD	; 205
      ec:	b7 cc       	rjmp	.-1682   	; 0xfffffa5c <__eeprom_end+0xff7efa5c>
      ee:	57 63       	ori	r21, 0x37	; 55
      f0:	bd 6d       	ori	r27, 0xDD	; 221
      f2:	ed fd       	.word	0xfded	; ????
      f4:	75 3e       	cpi	r23, 0xE5	; 229
      f6:	f6 17       	cp	r31, r22
      f8:	72 31       	cpi	r23, 0x12	; 18
      fa:	bf 00       	.word	0x00bf	; ????
      fc:	00 00       	nop
      fe:	80 3f       	cpi	r24, 0xF0	; 240
     100:	08 00       	.word	0x0008	; ????
     102:	00 00       	nop
     104:	be 92       	st	-X, r11
     106:	24 49       	sbci	r18, 0x94	; 148
     108:	12 3e       	cpi	r17, 0xE2	; 226
     10a:	ab aa       	std	Y+51, r10	; 0x33
     10c:	aa 2a       	or	r10, r26
     10e:	be cd       	rjmp	.-1156   	; 0xfffffc8c <__eeprom_end+0xff7efc8c>
     110:	cc cc       	rjmp	.-1640   	; 0xfffffaaa <__eeprom_end+0xff7efaaa>
     112:	4c 3e       	cpi	r20, 0xEC	; 236
     114:	00 00       	nop
     116:	00 80       	ld	r0, Z
     118:	be ab       	std	Y+54, r27	; 0x36
     11a:	aa aa       	std	Y+50, r10	; 0x32
     11c:	aa 3e       	cpi	r26, 0xEA	; 234
     11e:	00 00       	nop
     120:	00 00       	nop
     122:	bf 00       	.word	0x00bf	; ????
     124:	00 00       	nop
     126:	80 3f       	cpi	r24, 0xF0	; 240
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	00 08       	sbc	r0, r0
     12e:	41 78       	andi	r20, 0x81	; 129
     130:	d3 bb       	out	0x13, r29	; 19
     132:	43 87       	std	Z+11, r20	; 0x0b
     134:	d1 13       	cpse	r29, r17
     136:	3d 19       	sub	r19, r13
     138:	0e 3c       	cpi	r16, 0xCE	; 206
     13a:	c3 bd       	out	0x23, r28	; 35
     13c:	42 82       	std	Z+2, r4	; 0x02
     13e:	ad 2b       	or	r26, r29
     140:	3e 68       	ori	r19, 0x8E	; 142
     142:	ec 82       	std	Y+4, r14	; 0x04
     144:	76 be       	out	0x36, r7	; 54
     146:	d9 8f       	std	Y+25, r29	; 0x19
     148:	e1 a9       	ldd	r30, Z+49	; 0x31
     14a:	3e 4c       	sbci	r19, 0xCE	; 206
     14c:	80 ef       	ldi	r24, 0xF0	; 240
     14e:	ff be       	out	0x3f, r15	; 63
     150:	01 c4       	rjmp	.+2050   	; 0x954 <trans+0x26e>
     152:	ff 7f       	andi	r31, 0xFF	; 255
     154:	3f 00       	.word	0x003f	; ????
     156:	00 00       	nop
	...

0000015a <__ctors_end>:
     15a:	11 24       	eor	r1, r1
     15c:	1f be       	out	0x3f, r1	; 63
     15e:	cf ef       	ldi	r28, 0xFF	; 255
     160:	d0 e4       	ldi	r29, 0x40	; 64
     162:	de bf       	out	0x3e, r29	; 62
     164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_copy_data>:
     166:	12 e0       	ldi	r17, 0x02	; 2
     168:	a0 e0       	ldi	r26, 0x00	; 0
     16a:	b1 e0       	ldi	r27, 0x01	; 1
     16c:	e0 e4       	ldi	r30, 0x40	; 64
     16e:	ff e1       	ldi	r31, 0x1F	; 31
     170:	00 e0       	ldi	r16, 0x00	; 0
     172:	0b bf       	out	0x3b, r16	; 59
     174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x14>
     176:	07 90       	elpm	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	ac 30       	cpi	r26, 0x0C	; 12
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0x10>

00000180 <__do_clear_bss>:
     180:	22 e0       	ldi	r18, 0x02	; 2
     182:	ac e0       	ldi	r26, 0x0C	; 12
     184:	b2 e0       	ldi	r27, 0x02	; 2
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	a8 37       	cpi	r26, 0x78	; 120
     18c:	b2 07       	cpc	r27, r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 37 0b 	call	0x166e	; 0x166e <main>
     194:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <_exit>

00000198 <__bad_interrupt>:
     198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <TimerSet>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
     19a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     19e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     1a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     1a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     1aa:	60 93 6d 02 	sts	0x026D, r22	; 0x80026d <_avr_timer_cntcurr>
     1ae:	70 93 6e 02 	sts	0x026E, r23	; 0x80026e <_avr_timer_cntcurr+0x1>
     1b2:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_avr_timer_cntcurr+0x2>
     1b6:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <_avr_timer_cntcurr+0x3>
     1ba:	08 95       	ret

000001bc <TimerOn>:
     1bc:	8b e0       	ldi	r24, 0x0B	; 11
     1be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     1c2:	8d e7       	ldi	r24, 0x7D	; 125
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     1ce:	82 e0       	ldi	r24, 0x02	; 2
     1d0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     1d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     1d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     1dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     1e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     1e4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     1e8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     1ec:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <_avr_timer_cntcurr>
     1f0:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <_avr_timer_cntcurr+0x1>
     1f4:	a0 93 6f 02 	sts	0x026F, r26	; 0x80026f <_avr_timer_cntcurr+0x2>
     1f8:	b0 93 70 02 	sts	0x0270, r27	; 0x800270 <_avr_timer_cntcurr+0x3>
     1fc:	8f b7       	in	r24, 0x3f	; 63
     1fe:	80 68       	ori	r24, 0x80	; 128
     200:	8f bf       	out	0x3f, r24	; 63
     202:	08 95       	ret

00000204 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     204:	1f 92       	push	r1
     206:	0f 92       	push	r0
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	0f 92       	push	r0
     20c:	11 24       	eor	r1, r1
     20e:	8f 93       	push	r24
     210:	9f 93       	push	r25
     212:	af 93       	push	r26
     214:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     216:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <_avr_timer_cntcurr>
     21a:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <_avr_timer_cntcurr+0x1>
     21e:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <_avr_timer_cntcurr+0x2>
     222:	b0 91 70 02 	lds	r27, 0x0270	; 0x800270 <_avr_timer_cntcurr+0x3>
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	a1 09       	sbc	r26, r1
     22a:	b1 09       	sbc	r27, r1
     22c:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <_avr_timer_cntcurr>
     230:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <_avr_timer_cntcurr+0x1>
     234:	a0 93 6f 02 	sts	0x026F, r26	; 0x80026f <_avr_timer_cntcurr+0x2>
     238:	b0 93 70 02 	sts	0x0270, r27	; 0x800270 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     23c:	89 2b       	or	r24, r25
     23e:	8a 2b       	or	r24, r26
     240:	8b 2b       	or	r24, r27
     242:	99 f4       	brne	.+38     	; 0x26a <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
     24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     24e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     252:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     256:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     25a:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <_avr_timer_cntcurr>
     25e:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <_avr_timer_cntcurr+0x1>
     262:	a0 93 6f 02 	sts	0x026F, r26	; 0x80026f <_avr_timer_cntcurr+0x2>
     266:	b0 93 70 02 	sts	0x0270, r27	; 0x800270 <_avr_timer_cntcurr+0x3>
	}
}
     26a:	bf 91       	pop	r27
     26c:	af 91       	pop	r26
     26e:	9f 91       	pop	r25
     270:	8f 91       	pop	r24
     272:	0f 90       	pop	r0
     274:	0f be       	out	0x3f, r0	; 63
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <delay_ms>:
}

void delay_ms(int miliSec) //for 8 Mhz crystal
{
	int i,j;
	for(i=0;i<miliSec;i++)
     27c:	18 16       	cp	r1, r24
     27e:	19 06       	cpc	r1, r25
     280:	5c f0       	brlt	.+22     	; 0x298 <delay_ms+0x1c>
     282:	08 95       	ret
	for(j=0;j<775;j++)
	{
		asm("nop");
     284:	00 00       	nop
     286:	21 50       	subi	r18, 0x01	; 1
     288:	31 09       	sbc	r19, r1

void delay_ms(int miliSec) //for 8 Mhz crystal
{
	int i,j;
	for(i=0;i<miliSec;i++)
	for(j=0;j<775;j++)
     28a:	e1 f7       	brne	.-8      	; 0x284 <delay_ms+0x8>
}

void delay_ms(int miliSec) //for 8 Mhz crystal
{
	int i,j;
	for(i=0;i<miliSec;i++)
     28c:	4f 5f       	subi	r20, 0xFF	; 255
     28e:	5f 4f       	sbci	r21, 0xFF	; 255
     290:	84 17       	cp	r24, r20
     292:	95 07       	cpc	r25, r21
     294:	19 f4       	brne	.+6      	; 0x29c <delay_ms+0x20>
     296:	08 95       	ret
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
		// 16x2 LCD: column - 9
	}
}

void delay_ms(int miliSec) //for 8 Mhz crystal
{
     29c:	27 e0       	ldi	r18, 0x07	; 7
     29e:	33 e0       	ldi	r19, 0x03	; 3
     2a0:	f1 cf       	rjmp	.-30     	; 0x284 <delay_ms+0x8>

000002a2 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);
}

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
     2a2:	10 98       	cbi	0x02, 0	; 2
	DATA_BUS = Command;
     2a4:	85 b9       	out	0x05, r24	; 5
	SET_BIT(CONTROL_BUS,E);
     2a6:	11 9a       	sbi	0x02, 1	; 2
	asm("nop");
     2a8:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
     2aa:	11 98       	cbi	0x02, 1	; 2
	delay_ms(2); // ClearScreen requires 1.52ms to execute
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	e5 cf       	rjmp	.-54     	; 0x27c <delay_ms>
     2b2:	08 95       	ret

000002b4 <LCD_ClearScreen>:
#define E 1			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	f5 cf       	rjmp	.-22     	; 0x2a2 <LCD_WriteCommand>
     2b8:	08 95       	ret

000002ba <LCD_Cursor>:
	}
	LCD_WriteCommand(0x80); //shift back to DDRAM location 0
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x1 LCD: column < 9
     2ba:	81 31       	cpi	r24, 0x11	; 17
     2bc:	18 f4       	brcc	.+6      	; 0x2c4 <LCD_Cursor+0xa>
		// 16x2 LCD: column < 17
		LCD_WriteCommand(0x80 + column - 1);
     2be:	81 58       	subi	r24, 0x81	; 129
     2c0:	f0 cf       	rjmp	.-32     	; 0x2a2 <LCD_WriteCommand>
     2c2:	08 95       	ret
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
     2c4:	81 55       	subi	r24, 0x51	; 81
     2c6:	ed cf       	rjmp	.-38     	; 0x2a2 <LCD_WriteCommand>
     2c8:	08 95       	ret

000002ca <LCD_init>:
}

void LCD_init(void) {

	//wait for 100 ms.
	delay_ms(100);
     2ca:	84 e6       	ldi	r24, 0x64	; 100
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	d6 df       	rcall	.-84     	; 0x27c <delay_ms>
	LCD_WriteCommand(0x38);
     2d0:	88 e3       	ldi	r24, 0x38	; 56
     2d2:	e7 df       	rcall	.-50     	; 0x2a2 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
     2d4:	86 e0       	ldi	r24, 0x06	; 6
     2d6:	e5 df       	rcall	.-54     	; 0x2a2 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
     2d8:	8f e0       	ldi	r24, 0x0F	; 15
     2da:	e3 df       	rcall	.-58     	; 0x2a2 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	e1 df       	rcall	.-62     	; 0x2a2 <LCD_WriteCommand>
	delay_ms(10);
     2e0:	8a e0       	ldi	r24, 0x0A	; 10
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	cb cf       	rjmp	.-106    	; 0x27c <delay_ms>
     2e6:	08 95       	ret

000002e8 <LCD_WriteData>:
     2e8:	10 9a       	sbi	0x02, 0	; 2
	delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
     2ea:	85 b9       	out	0x05, r24	; 5
	SET_BIT(CONTROL_BUS,E);
     2ec:	11 9a       	sbi	0x02, 1	; 2
	asm("nop");
     2ee:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
     2f0:	11 98       	cbi	0x02, 1	; 2
	delay_ms(1);
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	c2 cf       	rjmp	.-124    	; 0x27c <delay_ms>
     2f8:	08 95       	ret

000002fa <LCDcustomChar>:
}

void LCDcustomChar(unsigned char column, unsigned char *p)
{
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	8b 01       	movw	r16, r22
	unsigned char i;
	if(column<8) //If valid address
     304:	88 30       	cpi	r24, 0x08	; 8
     306:	68 f4       	brcc	.+26     	; 0x322 <LCDcustomChar+0x28>
	{
		LCD_WriteCommand(0x40+(column*8)); //Write to CGRAM
     308:	88 0f       	add	r24, r24
     30a:	88 0f       	add	r24, r24
     30c:	88 0f       	add	r24, r24
     30e:	80 5c       	subi	r24, 0xC0	; 192
     310:	c8 df       	rcall	.-112    	; 0x2a2 <LCD_WriteCommand>
     312:	e8 01       	movw	r28, r16
     314:	08 5f       	subi	r16, 0xF8	; 248
     316:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
     318:	89 91       	ld	r24, Y+
     31a:	e6 df       	rcall	.-52     	; 0x2e8 <LCD_WriteData>
{
	unsigned char i;
	if(column<8) //If valid address
	{
		LCD_WriteCommand(0x40+(column*8)); //Write to CGRAM
		for(i=0;i<8;i++)
     31c:	c0 17       	cp	r28, r16
     31e:	d1 07       	cpc	r29, r17
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
	}
	LCD_WriteCommand(0x80); //shift back to DDRAM location 0
     320:	d9 f7       	brne	.-10     	; 0x318 <LCDcustomChar+0x1e>
     322:	80 e8       	ldi	r24, 0x80	; 128
     324:	be df       	rcall	.-132    	; 0x2a2 <LCD_WriteCommand>
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	08 95       	ret

00000330 <LCD_DisplayString>:
	{
		asm("nop");
	}
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	18 2f       	mov	r17, r24
     33a:	eb 01       	movw	r28, r22
	LCD_ClearScreen();
     33c:	bb df       	rcall	.-138    	; 0x2b4 <LCD_ClearScreen>
	unsigned char c = column;
	while(*string) {
     33e:	88 81       	ld	r24, Y
     340:	88 23       	and	r24, r24
     342:	51 f0       	breq	.+20     	; 0x358 <LCD_DisplayString+0x28>
		LCD_Cursor(c++);
     344:	01 e0       	ldi	r16, 0x01	; 1
     346:	01 0f       	add	r16, r17
     348:	81 2f       	mov	r24, r17
     34a:	b7 df       	rcall	.-146    	; 0x2ba <LCD_Cursor>
		LCD_WriteData(*string++);
     34c:	89 91       	ld	r24, Y+
     34e:	cc df       	rcall	.-104    	; 0x2e8 <LCD_WriteData>
     350:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
     352:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
     354:	81 11       	cpse	r24, r1
     356:	f6 cf       	rjmp	.-20     	; 0x344 <LCD_DisplayString+0x14>
     358:	df 91       	pop	r29
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	08 95       	ret

00000362 <Menu>:
     362:	81 30       	cpi	r24, 0x01	; 1
	return state;
}

int Menu(int state)
{
	switch(state)
     364:	91 05       	cpc	r25, r1
     366:	59 f0       	breq	.+22     	; 0x37e <Menu+0x1c>
     368:	24 f4       	brge	.+8      	; 0x372 <Menu+0x10>
     36a:	89 2b       	or	r24, r25
     36c:	09 f4       	brne	.+2      	; 0x370 <Menu+0xe>
     36e:	44 c0       	rjmp	.+136    	; 0x3f8 <Menu+0x96>
     370:	4c c0       	rjmp	.+152    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	91 05       	cpc	r25, r1
     376:	49 f0       	breq	.+18     	; 0x38a <Menu+0x28>
     378:	03 97       	sbiw	r24, 0x03	; 3
     37a:	71 f0       	breq	.+28     	; 0x398 <Menu+0x36>
     37c:	46 c0       	rjmp	.+140    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			state = pauseM;
			break;
		}
		case pauseM:
		{
			if(pos == 1)
     37e:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <pos>
     382:	21 30       	cpi	r18, 0x01	; 1
     384:	09 f0       	breq	.+2      	; 0x388 <Menu+0x26>
     386:	46 c0       	rjmp	.+140    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     388:	0b c0       	rjmp	.+22     	; 0x3a0 <Menu+0x3e>
			}
			break;
		}
		case transaction:
		{
			if(pos == 1)
     38a:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <pos>
     38e:	81 30       	cpi	r24, 0x01	; 1
     390:	e9 f0       	breq	.+58     	; 0x3cc <Menu+0x6a>
			{
				state = settings;
			}
			else
			{
				state = pauseM;
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	08 95       	ret
			}
			break;
		}
		case settings:
		{
			if(pos == 1)
     398:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <pos>
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	c1 f5       	brne	.+112    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		{
			break;
		}
		case transaction:
		{
			LCD_DisplayString(1, "A. Transactions");
     3a0:	66 e1       	ldi	r22, 0x16	; 22
     3a2:	71 e0       	ldi	r23, 0x01	; 1
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	c4 df       	rcall	.-120    	; 0x330 <LCD_DisplayString>
			if(key2 == 'A')
     3a8:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <key2>
     3ac:	81 34       	cpi	r24, 0x41	; 65
     3ae:	31 f4       	brne	.+12     	; 0x3bc <Menu+0x5a>
			{
				pos = 2;
     3b0:	82 e0       	ldi	r24, 0x02	; 2
     3b2:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <pos>
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	08 95       	ret
			}
			else if(key2 == 'B')
     3bc:	82 34       	cpi	r24, 0x42	; 66
     3be:	f9 f4       	brne	.+62     	; 0x3fe <Menu+0x9c>
			{
				pos = 4;
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <pos>
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	08 95       	ret
			}
			break;
		}
		case settings:
		{
			LCD_DisplayString(1, "B. Settings");
     3cc:	66 e2       	ldi	r22, 0x26	; 38
     3ce:	71 e0       	ldi	r23, 0x01	; 1
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	ae df       	rcall	.-164    	; 0x330 <LCD_DisplayString>
			if(key2 == 'A')
     3d4:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <key2>
     3d8:	81 34       	cpi	r24, 0x41	; 65
     3da:	31 f4       	brne	.+12     	; 0x3e8 <Menu+0x86>
			{
				pos = 2;
     3dc:	82 e0       	ldi	r24, 0x02	; 2
     3de:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <pos>
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	08 95       	ret
			}
			else if(key2 == 'B')
     3e8:	82 34       	cpi	r24, 0x42	; 66
     3ea:	61 f4       	brne	.+24     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			{
				pos = 4;
     3ec:	84 e0       	ldi	r24, 0x04	; 4
     3ee:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <pos>
     3f2:	83 e0       	ldi	r24, 0x03	; 3
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	08 95       	ret
	switch(state)
	{
		case startM:
		{
			//pos = 3;
			state = pauseM;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	08 95       	ret
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	08 95       	ret
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	08 95       	ret
			}
			break;
		}
		default:
		{
			state = startM;
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	08 95       	ret
			{
				state = transaction;
			}
			else
			{
				state = pauseM;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
		{
			break;
		}
	}
	return state;
}
     414:	08 95       	ret

00000416 <changetoInteger>:
#include "io.c"
#include "io.h"

unsigned char changetoInteger(unsigned char var)
{
	switch(var)
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	fc 01       	movw	r30, r24
     41a:	f1 97       	sbiw	r30, 0x31	; 49
     41c:	e9 30       	cpi	r30, 0x09	; 9
     41e:	f1 05       	cpc	r31, r1
     420:	b0 f4       	brcc	.+44     	; 0x44e <changetoInteger+0x38>
     422:	ea 5b       	subi	r30, 0xBA	; 186
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__tablejump2__>
	{
		case '0': return 0;
		case '1': return 1;
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	08 95       	ret
		case '2': return 2;
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	08 95       	ret
		case '3': return 3;
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	08 95       	ret
		case '4': return 4;
     436:	84 e0       	ldi	r24, 0x04	; 4
     438:	08 95       	ret
		case '5': return 5;
     43a:	85 e0       	ldi	r24, 0x05	; 5
     43c:	08 95       	ret
		case '6': return 6;
     43e:	86 e0       	ldi	r24, 0x06	; 6
     440:	08 95       	ret
		case '7': return 7;
     442:	87 e0       	ldi	r24, 0x07	; 7
     444:	08 95       	ret
		case '8': return 8;
     446:	88 e0       	ldi	r24, 0x08	; 8
     448:	08 95       	ret
		case '9': return 9;
     44a:	89 e0       	ldi	r24, 0x09	; 9
     44c:	08 95       	ret

unsigned char changetoInteger(unsigned char var)
{
	switch(var)
	{
		case '0': return 0;
     44e:	80 e0       	ldi	r24, 0x00	; 0
		case '7': return 7;
		case '8': return 8;
		case '9': return 9;
		default: return 0;
	}
}
     450:	08 95       	ret

00000452 <changetoChar>:
char changetoChar(unsigned char num)
{
	switch(num)
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	8a 30       	cpi	r24, 0x0A	; 10
     456:	91 05       	cpc	r25, r1
     458:	b8 f4       	brcc	.+46     	; 0x488 <changetoChar+0x36>
     45a:	fc 01       	movw	r30, r24
     45c:	e1 5b       	subi	r30, 0xB1	; 177
     45e:	ff 4f       	sbci	r31, 0xFF	; 255
     460:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__tablejump2__>
	{
		case 0: return '0';
		case 1: return '1';
     464:	81 e3       	ldi	r24, 0x31	; 49
     466:	08 95       	ret
		case 2: return '2';
     468:	82 e3       	ldi	r24, 0x32	; 50
     46a:	08 95       	ret
		case 3: return '3';
     46c:	83 e3       	ldi	r24, 0x33	; 51
     46e:	08 95       	ret
		case 4: return '4';
     470:	84 e3       	ldi	r24, 0x34	; 52
     472:	08 95       	ret
		case 5: return '5';
     474:	85 e3       	ldi	r24, 0x35	; 53
     476:	08 95       	ret
		case 6: return '6';
     478:	86 e3       	ldi	r24, 0x36	; 54
     47a:	08 95       	ret
		case 7: return '7';
     47c:	87 e3       	ldi	r24, 0x37	; 55
     47e:	08 95       	ret
		case 8: return '8';
     480:	88 e3       	ldi	r24, 0x38	; 56
     482:	08 95       	ret
		case 9: return '9';
     484:	89 e3       	ldi	r24, 0x39	; 57
     486:	08 95       	ret
		default: return '\0';
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	08 95       	ret
}
char changetoChar(unsigned char num)
{
	switch(num)
	{
		case 0: return '0';
     48c:	80 e3       	ldi	r24, 0x30	; 48
		case 8: return '8';
		case 9: return '9';
		default: return '\0';

	}
}
     48e:	08 95       	ret

00000490 <findHowManyB4Dec>:
unsigned char findHowManyB4Dec(unsigned char num)
{
	if(num >= 100)
     490:	84 36       	cpi	r24, 0x64	; 100
     492:	38 f4       	brcc	.+14     	; 0x4a2 <findHowManyB4Dec+0x12>
	{
		return 3;
	}
	else if(num >= 10)
     494:	8a 30       	cpi	r24, 0x0A	; 10
     496:	38 f4       	brcc	.+14     	; 0x4a6 <findHowManyB4Dec+0x16>
}
unsigned char findHowManyB4Dec(unsigned char num)
{
	if(num >= 100)
	{
		return 3;
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	81 11       	cpse	r24, r1
     49c:	05 c0       	rjmp	.+10     	; 0x4a8 <findHowManyB4Dec+0x18>
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <findHowManyB4Dec+0x18>
     4a2:	93 e0       	ldi	r25, 0x03	; 3
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <findHowManyB4Dec+0x18>
	}
	else if(num >= 10)
	{
		return 2;
     4a6:	92 e0       	ldi	r25, 0x02	; 2
	else
	{
		return 0;
	}
	
}
     4a8:	89 2f       	mov	r24, r25
     4aa:	08 95       	ret

000004ac <clearArray>:

void clearArray(unsigned char *a, unsigned char size)
{
	for(int i = 0; i < size; i++)
     4ac:	66 23       	and	r22, r22
     4ae:	39 f0       	breq	.+14     	; 0x4be <clearArray+0x12>
     4b0:	fc 01       	movw	r30, r24
     4b2:	86 0f       	add	r24, r22
     4b4:	91 1d       	adc	r25, r1
	{
		a[i] = 0;
     4b6:	11 92       	st	Z+, r1
	
}

void clearArray(unsigned char *a, unsigned char size)
{
	for(int i = 0; i < size; i++)
     4b8:	e8 17       	cp	r30, r24
     4ba:	f9 07       	cpc	r31, r25
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <clearArray+0xa>
     4be:	08 95       	ret

000004c0 <GetKeypadKey>:
}

// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
     4c0:	8f ee       	ldi	r24, 0xEF	; 239
     4c2:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
     4c4:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('1'); }
     4c6:	30 9b       	sbis	0x06, 0	; 6
     4c8:	29 c0       	rjmp	.+82     	; 0x51c <GetKeypadKey+0x5c>
    if (GetBit(PINC,1)==0) { return('4'); }
     4ca:	31 9b       	sbis	0x06, 1	; 6
     4cc:	29 c0       	rjmp	.+82     	; 0x520 <GetKeypadKey+0x60>
    if (GetBit(PINC,2)==0) { return('7'); }
     4ce:	32 9b       	sbis	0x06, 2	; 6
     4d0:	29 c0       	rjmp	.+82     	; 0x524 <GetKeypadKey+0x64>
    if (GetBit(PINC,3)==0) { return('.'); }
     4d2:	33 9b       	sbis	0x06, 3	; 6
     4d4:	29 c0       	rjmp	.+82     	; 0x528 <GetKeypadKey+0x68>
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
     4d6:	8f ed       	ldi	r24, 0xDF	; 223
     4d8:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
     4da:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('2'); }
     4dc:	30 9b       	sbis	0x06, 0	; 6
     4de:	26 c0       	rjmp	.+76     	; 0x52c <GetKeypadKey+0x6c>
    if (GetBit(PINC,1)==0) { return('5'); }
     4e0:	31 9b       	sbis	0x06, 1	; 6
     4e2:	26 c0       	rjmp	.+76     	; 0x530 <GetKeypadKey+0x70>
    if (GetBit(PINC,2)==0) { return('8'); }
     4e4:	32 9b       	sbis	0x06, 2	; 6
     4e6:	26 c0       	rjmp	.+76     	; 0x534 <GetKeypadKey+0x74>
    if (GetBit(PINC,3)==0) { return('0'); }
     4e8:	33 9b       	sbis	0x06, 3	; 6
     4ea:	26 c0       	rjmp	.+76     	; 0x538 <GetKeypadKey+0x78>
    // ... *****FINISH*****
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
     4ec:	8f eb       	ldi	r24, 0xBF	; 191
     4ee:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
     4f0:	00 00       	nop
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
     4f2:	30 9b       	sbis	0x06, 0	; 6
     4f4:	23 c0       	rjmp	.+70     	; 0x53c <GetKeypadKey+0x7c>
    if (GetBit(PINC,1)==0) { return('6'); }
     4f6:	31 9b       	sbis	0x06, 1	; 6
     4f8:	23 c0       	rjmp	.+70     	; 0x540 <GetKeypadKey+0x80>
    if (GetBit(PINC,2)==0) { return('9'); }
     4fa:	32 9b       	sbis	0x06, 2	; 6
     4fc:	23 c0       	rjmp	.+70     	; 0x544 <GetKeypadKey+0x84>
    if (GetBit(PINC,3)==0) { return('#'); }
     4fe:	33 9b       	sbis	0x06, 3	; 6
     500:	23 c0       	rjmp	.+70     	; 0x548 <GetKeypadKey+0x88>
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
     502:	8f e7       	ldi	r24, 0x7F	; 127
     504:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
     506:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('A'); }
     508:	30 9b       	sbis	0x06, 0	; 6
     50a:	20 c0       	rjmp	.+64     	; 0x54c <GetKeypadKey+0x8c>
    if (GetBit(PINC,1)==0) { return('B'); }
     50c:	31 9b       	sbis	0x06, 1	; 6
     50e:	20 c0       	rjmp	.+64     	; 0x550 <GetKeypadKey+0x90>
    if (GetBit(PINC,2)==0) { return('C'); }
     510:	32 9b       	sbis	0x06, 2	; 6
     512:	20 c0       	rjmp	.+64     	; 0x554 <GetKeypadKey+0x94>
    if (GetBit(PINC,3)==0) { return('D'); }
     514:	33 9b       	sbis	0x06, 3	; 6
     516:	20 c0       	rjmp	.+64     	; 0x558 <GetKeypadKey+0x98>
    
    return('\0'); // default value
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	08 95       	ret
// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('1'); }
     51c:	81 e3       	ldi	r24, 0x31	; 49
     51e:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('4'); }
     520:	84 e3       	ldi	r24, 0x34	; 52
     522:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('7'); }
     524:	87 e3       	ldi	r24, 0x37	; 55
     526:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('.'); }
     528:	8e e2       	ldi	r24, 0x2E	; 46
     52a:	08 95       	ret
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('2'); }
     52c:	82 e3       	ldi	r24, 0x32	; 50
     52e:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('5'); }
     530:	85 e3       	ldi	r24, 0x35	; 53
     532:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('8'); }
     534:	88 e3       	ldi	r24, 0x38	; 56
     536:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('0'); }
     538:	80 e3       	ldi	r24, 0x30	; 48
     53a:	08 95       	ret
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
     53c:	83 e3       	ldi	r24, 0x33	; 51
     53e:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('6'); }
     540:	86 e3       	ldi	r24, 0x36	; 54
     542:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('9'); }
     544:	89 e3       	ldi	r24, 0x39	; 57
     546:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('#'); }
     548:	83 e2       	ldi	r24, 0x23	; 35
     54a:	08 95       	ret
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('A'); }
     54c:	81 e4       	ldi	r24, 0x41	; 65
     54e:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('B'); }
     550:	82 e4       	ldi	r24, 0x42	; 66
     552:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('C'); }
     554:	83 e4       	ldi	r24, 0x43	; 67
     556:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('D'); }
     558:	84 e4       	ldi	r24, 0x44	; 68
    
    return('\0'); // default value
    
}
     55a:	08 95       	ret

0000055c <Lock>:
enum SettingStates{startS, pauseS, opt, codeSet, codeWrite, pricePick, priceSet, priceWrite, done};
enum Keypad500states{startK, wait, press, unpress};
enum LockStates{startL, pauseL, enterPin, checkPin};

int Lock(int state)
{
     55c:	cf 92       	push	r12
     55e:	df 92       	push	r13
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	ec 01       	movw	r28, r24
	static unsigned char count;
	static unsigned char numbers[7] = {0};
	static int address;
	static unsigned char holder;
	
	switch(state)
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	91 05       	cpc	r25, r1
     572:	69 f1       	breq	.+90     	; 0x5ce <Lock+0x72>
     574:	1c f4       	brge	.+6      	; 0x57c <Lock+0x20>
     576:	89 2b       	or	r24, r25
     578:	49 f0       	breq	.+18     	; 0x58c <Lock+0x30>
     57a:	9e c0       	rjmp	.+316    	; 0x6b8 <Lock+0x15c>
     57c:	82 30       	cpi	r24, 0x02	; 2
     57e:	91 05       	cpc	r25, r1
     580:	09 f4       	brne	.+2      	; 0x584 <Lock+0x28>
     582:	3d c0       	rjmp	.+122    	; 0x5fe <Lock+0xa2>
     584:	03 97       	sbiw	r24, 0x03	; 3
     586:	09 f4       	brne	.+2      	; 0x58a <Lock+0x2e>
     588:	91 c0       	rjmp	.+290    	; 0x6ac <Lock+0x150>
     58a:	96 c0       	rjmp	.+300    	; 0x6b8 <Lock+0x15c>
	{
		case startL:
		{
			pos = 3;
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <pos>
			if(eeprom_read_byte((uint8_t *) 26) != '1')
     592:	8a e1       	ldi	r24, 0x1A	; 26
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <eeprom_read_byte>
     59a:	81 33       	cpi	r24, 0x31	; 49
     59c:	09 f4       	brne	.+2      	; 0x5a0 <Lock+0x44>
     59e:	8f c0       	rjmp	.+286    	; 0x6be <Lock+0x162>
			{
				eeprom_write_byte((uint8_t *) 20, '0');
     5a0:	60 e3       	ldi	r22, 0x30	; 48
     5a2:	84 e1       	ldi	r24, 0x14	; 20
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <eeprom_write_byte>
				eeprom_write_byte((uint8_t *) 21, '0');
     5aa:	60 e3       	ldi	r22, 0x30	; 48
     5ac:	85 e1       	ldi	r24, 0x15	; 21
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <eeprom_write_byte>
				eeprom_write_byte((uint8_t *) 22, '0');
     5b4:	60 e3       	ldi	r22, 0x30	; 48
     5b6:	86 e1       	ldi	r24, 0x16	; 22
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <eeprom_write_byte>
				eeprom_write_byte((uint8_t *) 23, '0');
     5be:	60 e3       	ldi	r22, 0x30	; 48
     5c0:	87 e1       	ldi	r24, 0x17	; 23
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <eeprom_write_byte>
			}
			state = pauseL;
     5c8:	c1 e0       	ldi	r28, 0x01	; 1
     5ca:	d0 e0       	ldi	r29, 0x00	; 0
     5cc:	82 c0       	rjmp	.+260    	; 0x6d2 <Lock+0x176>
			break;
		}
		case pauseL:
		{
			count = 0;
     5ce:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <count.2020>
			address = 20;
     5d2:	84 e1       	ldi	r24, 0x14	; 20
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <address.2022+0x1>
     5da:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <address.2022>
			holder = 0;
     5de:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <holder.2023>
			clearArray(numbers, 7);
     5e2:	67 e0       	ldi	r22, 0x07	; 7
     5e4:	82 e6       	ldi	r24, 0x62	; 98
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	61 df       	rcall	.-318    	; 0x4ac <clearArray>
			if(pos == 3)
     5ea:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <pos>
     5ee:	83 30       	cpi	r24, 0x03	; 3
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <Lock+0x98>
     5f2:	6f c0       	rjmp	.+222    	; 0x6d2 <Lock+0x176>
			{
				state = enterPin;
				LCD_DisplayString(1, "enter pin: ");
     5f4:	62 e3       	ldi	r22, 0x32	; 50
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	9a de       	rcall	.-716    	; 0x330 <LCD_DisplayString>
     5fc:	63 c0       	rjmp	.+198    	; 0x6c4 <Lock+0x168>
			}
			break;
		}
		case enterPin:
		{
			if(key == '#')
     5fe:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <key>
     602:	83 32       	cpi	r24, 0x23	; 35
     604:	09 f0       	breq	.+2      	; 0x608 <Lock+0xac>
     606:	5e c0       	rjmp	.+188    	; 0x6c4 <Lock+0x168>
		case enterPin:
		{
			key = GetKeypadKey();
			if(key != '\0')
			{
				LCD_WriteData(key);
     608:	10 c0       	rjmp	.+32     	; 0x62a <Lock+0xce>
     60a:	6e de       	rcall	.-804    	; 0x2e8 <LCD_WriteData>
				numbers[count] = key;
     60c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <count.2020>
     610:	e8 2f       	mov	r30, r24
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	ee 59       	subi	r30, 0x9E	; 158
     616:	fd 4f       	sbci	r31, 0xFD	; 253
     618:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <key>
     61c:	90 83       	st	Z, r25
				count++;
     61e:	8f 5f       	subi	r24, 0xFF	; 255
     620:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <count.2020>
     624:	c2 e0       	ldi	r28, 0x02	; 2
     626:	d0 e0       	ldi	r29, 0x00	; 0
     628:	54 c0       	rjmp	.+168    	; 0x6d2 <Lock+0x176>
			}
			break;
		}
		case checkPin:
		{
			holder = 0;
     62a:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <holder.2023>
			address = 20;
     62e:	84 e1       	ldi	r24, 0x14	; 20
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <address.2022+0x1>
     636:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <address.2022>
			LCD_WriteData(' ');
     63a:	80 e2       	ldi	r24, 0x20	; 32
     63c:	55 de       	rcall	.-854    	; 0x2e8 <LCD_WriteData>
			for(int i = 0; i < count-1 ; i++)
     63e:	c0 90 6c 02 	lds	r12, 0x026C	; 0x80026c <count.2020>
     642:	8c 2d       	mov	r24, r12
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	18 16       	cp	r1, r24
     64a:	19 06       	cpc	r1, r25
     64c:	1c f5       	brge	.+70     	; 0x694 <Lock+0x138>
     64e:	02 e6       	ldi	r16, 0x62	; 98
     650:	12 e0       	ldi	r17, 0x02	; 2
     652:	8c 2d       	mov	r24, r12
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	9c 01       	movw	r18, r24
     658:	2f 59       	subi	r18, 0x9F	; 159
     65a:	3d 4f       	sbci	r19, 0xFD	; 253
     65c:	79 01       	movw	r14, r18
			{
				//LCD_WriteData(numbers[i]);
				//LCD_WriteData(eeprom_read_byte((uint8_t *) address));
				if(eeprom_read_byte((uint8_t *) address) != numbers[i])
				{
					holder = 1;
     65e:	dd 24       	eor	r13, r13
     660:	d3 94       	inc	r13
			LCD_WriteData(' ');
			for(int i = 0; i < count-1 ; i++)
			{
				//LCD_WriteData(numbers[i]);
				//LCD_WriteData(eeprom_read_byte((uint8_t *) address));
				if(eeprom_read_byte((uint8_t *) address) != numbers[i])
     662:	c0 91 6a 02 	lds	r28, 0x026A	; 0x80026a <address.2022>
     666:	d0 91 6b 02 	lds	r29, 0x026B	; 0x80026b <address.2022+0x1>
     66a:	ce 01       	movw	r24, r28
     66c:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <eeprom_read_byte>
     670:	f8 01       	movw	r30, r16
     672:	91 91       	ld	r25, Z+
     674:	8f 01       	movw	r16, r30
     676:	89 13       	cpse	r24, r25
				{
					holder = 1;
     678:	d0 92 69 02 	sts	0x0269, r13	; 0x800269 <holder.2023>
					//LCD_WriteData(numbers[i]);
				}
				address++;
     67c:	21 96       	adiw	r28, 0x01	; 1
     67e:	d0 93 6b 02 	sts	0x026B, r29	; 0x80026b <address.2022+0x1>
     682:	c0 93 6a 02 	sts	0x026A, r28	; 0x80026a <address.2022>
		case checkPin:
		{
			holder = 0;
			address = 20;
			LCD_WriteData(' ');
			for(int i = 0; i < count-1 ; i++)
     686:	0e 15       	cp	r16, r14
     688:	1f 05       	cpc	r17, r15
     68a:	59 f7       	brne	.-42     	; 0x662 <Lock+0x106>
					//LCD_WriteData(numbers[i]);
				}
				address++;
			}
			
			if(holder == 0)
     68c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <holder.2023>
     690:	81 11       	cpse	r24, r1
     692:	03 c0       	rjmp	.+6      	; 0x69a <Lock+0x13e>
			{
				pos = 1;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <pos>
			}
			
			if(count == 1)
     69a:	f1 e0       	ldi	r31, 0x01	; 1
     69c:	cf 12       	cpse	r12, r31
     69e:	09 c0       	rjmp	.+18     	; 0x6b2 <Lock+0x156>
			{
				pos = 3;
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <pos>
     6a6:	c3 e0       	ldi	r28, 0x03	; 3
     6a8:	d0 e0       	ldi	r29, 0x00	; 0
     6aa:	13 c0       	rjmp	.+38     	; 0x6d2 <Lock+0x176>
			}
			break;
		}
		case checkPin:
		{
			state = pauseL;
     6ac:	c1 e0       	ldi	r28, 0x01	; 1
     6ae:	d0 e0       	ldi	r29, 0x00	; 0
     6b0:	10 c0       	rjmp	.+32     	; 0x6d2 <Lock+0x176>
     6b2:	c3 e0       	ldi	r28, 0x03	; 3
     6b4:	d0 e0       	ldi	r29, 0x00	; 0
     6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <Lock+0x176>
			break;
		}
		default:
		{
			state = startL;
     6b8:	c0 e0       	ldi	r28, 0x00	; 0
     6ba:	d0 e0       	ldi	r29, 0x00	; 0
				eeprom_write_byte((uint8_t *) 20, '0');
				eeprom_write_byte((uint8_t *) 21, '0');
				eeprom_write_byte((uint8_t *) 22, '0');
				eeprom_write_byte((uint8_t *) 23, '0');
			}
			state = pauseL;
     6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <Lock+0x176>
     6be:	c1 e0       	ldi	r28, 0x01	; 1
     6c0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
		case enterPin:
		{
			key = GetKeypadKey();
     6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <Lock+0x176>
     6c4:	fd de       	rcall	.-518    	; 0x4c0 <GetKeypadKey>
     6c6:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <key>
			if(key != '\0')
     6ca:	81 11       	cpse	r24, r1
     6cc:	9e cf       	rjmp	.-196    	; 0x60a <Lock+0xae>
     6ce:	c2 e0       	ldi	r28, 0x02	; 2
     6d0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
	}
	return state;
}
     6d2:	ce 01       	movw	r24, r28
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	df 90       	pop	r13
     6e2:	cf 90       	pop	r12
     6e4:	08 95       	ret

000006e6 <trans>:
	return state;
}


int trans(int state)
{
     6e6:	4f 92       	push	r4
     6e8:	5f 92       	push	r5
     6ea:	6f 92       	push	r6
     6ec:	7f 92       	push	r7
     6ee:	8f 92       	push	r8
     6f0:	9f 92       	push	r9
     6f2:	af 92       	push	r10
     6f4:	bf 92       	push	r11
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	ec 01       	movw	r28, r24
	static unsigned char place;
	static unsigned char count;
	static unsigned char holder, holder2, holder3, num1, num2;
	static int decval, intval;
	
	switch (state)
     704:	8a 30       	cpi	r24, 0x0A	; 10
     706:	91 05       	cpc	r25, r1
     708:	08 f0       	brcs	.+2      	; 0x70c <trans+0x26>
     70a:	ad c3       	rjmp	.+1882   	; 0xe66 <trans+0x780>
     70c:	fc 01       	movw	r30, r24
     70e:	e7 5a       	subi	r30, 0xA7	; 167
     710:	ff 4f       	sbci	r31, 0xFF	; 255
     712:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__tablejump2__>
			}
			break;
		}
		case picked:
		{
			state = picked1;
     716:	c5 e0       	ldi	r28, 0x05	; 5
     718:	d0 e0       	ldi	r29, 0x00	; 0
     71a:	d8 c3       	rjmp	.+1968   	; 0xecc <trans+0x7e6>
			state = pauseT;
			break;
		}
		case pauseT:
		{
			totalMoney = 0;
     71c:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <totalMoney.2058>
     720:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <totalMoney.2058+0x1>
     724:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <totalMoney.2058+0x2>
     728:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <totalMoney.2058+0x3>
			changeMoney = 0;
			holderMoney = 0;
			place = 0;
     72c:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <place.2062>
			count = 0;
     730:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <count.2063>
			holder = 0;
			holder2 = 0;
     734:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <holder2.2065>
			holder3 = 0;
			num1 = 0;
     738:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <num1.2067>
			num2 = 0;
     73c:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <num2.2068>
			clearArray(number, 7);
     740:	67 e0       	ldi	r22, 0x07	; 7
     742:	82 e5       	ldi	r24, 0x52	; 82
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	b2 de       	rcall	.-668    	; 0x4ac <clearArray>
			
			if(pos == 2)
     748:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <pos>
     74c:	82 30       	cpi	r24, 0x02	; 2
     74e:	09 f0       	breq	.+2      	; 0x752 <trans+0x6c>
     750:	bd c3       	rjmp	.+1914   	; 0xecc <trans+0x7e6>
			state = options1;
			break;
		}
		case options1:
		{
			key = GetKeypadKey();
     752:	96 c3       	rjmp	.+1836   	; 0xe80 <trans+0x79a>
     754:	b5 de       	rcall	.-662    	; 0x4c0 <GetKeypadKey>
     756:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <key>
			if(key == 'A')
     75a:	81 34       	cpi	r24, 0x41	; 65
     75c:	c9 f4       	brne	.+50     	; 0x790 <trans+0xaa>
			{
				state = picked;
				totalMoney += eeprom_read_float((float *)1);
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <eeprom_read_dword>
     766:	9b 01       	movw	r18, r22
     768:	ac 01       	movw	r20, r24
     76a:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <totalMoney.2058>
     76e:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <totalMoney.2058+0x1>
     772:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <totalMoney.2058+0x2>
     776:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <totalMoney.2058+0x3>
     77a:	0e 94 0f 0c 	call	0x181e	; 0x181e <__addsf3>
     77e:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <totalMoney.2058>
     782:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <totalMoney.2058+0x1>
     786:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <totalMoney.2058+0x2>
     78a:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <totalMoney.2058+0x3>
     78e:	71 c3       	rjmp	.+1762   	; 0xe72 <trans+0x78c>
			}
			else if(key == 'B')
     790:	82 34       	cpi	r24, 0x42	; 66
     792:	09 f0       	breq	.+2      	; 0x796 <trans+0xb0>
     794:	9b c3       	rjmp	.+1846   	; 0xecc <trans+0x7e6>
			{
				state = picked;
				totalMoney += eeprom_read_float((float *)10);
     796:	8a e0       	ldi	r24, 0x0A	; 10
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <eeprom_read_dword>
     79e:	9b 01       	movw	r18, r22
     7a0:	ac 01       	movw	r20, r24
     7a2:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <totalMoney.2058>
     7a6:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <totalMoney.2058+0x1>
     7aa:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <totalMoney.2058+0x2>
     7ae:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <totalMoney.2058+0x3>
     7b2:	0e 94 0f 0c 	call	0x181e	; 0x181e <__addsf3>
     7b6:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <totalMoney.2058>
     7ba:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <totalMoney.2058+0x1>
     7be:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <totalMoney.2058+0x2>
     7c2:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <totalMoney.2058+0x3>
			state = picked1;
			break;
		}
		case picked1:
		{
			key = GetKeypadKey();
     7c6:	55 c3       	rjmp	.+1706   	; 0xe72 <trans+0x78c>
     7c8:	7b de       	rcall	.-778    	; 0x4c0 <GetKeypadKey>
     7ca:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <key>
			if(key == 'A')
     7ce:	81 34       	cpi	r24, 0x41	; 65
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <trans+0xee>
     7d2:	9e c1       	rjmp	.+828    	; 0xb10 <trans+0x42a>
			{
				state = payment;
			}
			else if(key == 'B')
     7d4:	82 34       	cpi	r24, 0x42	; 66
     7d6:	09 f0       	breq	.+2      	; 0x7da <trans+0xf4>
     7d8:	79 c3       	rjmp	.+1778   	; 0xecc <trans+0x7e6>
     7da:	52 c3       	rjmp	.+1700   	; 0xe80 <trans+0x79a>
			state = payment1;
			break;
		}
		case payment1:
		{
			if(key == '#')
     7dc:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <key>
     7e0:	83 32       	cpi	r24, 0x23	; 35
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <trans+0x100>
     7e4:	9c c1       	rjmp	.+824    	; 0xb1e <trans+0x438>
		{
			state = change1;
		}
		case change1:
		{
			key = GetKeypadKey();
     7e6:	bf c1       	rjmp	.+894    	; 0xb66 <trans+0x480>
     7e8:	6b de       	rcall	.-810    	; 0x4c0 <GetKeypadKey>
     7ea:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <key>
			if(key == '#')
     7ee:	83 32       	cpi	r24, 0x23	; 35
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <trans+0x10e>
     7f2:	3c c3       	rjmp	.+1656   	; 0xe6c <trans+0x786>
			{
				pos = 3;
     7f4:	83 e0       	ldi	r24, 0x03	; 3
     7f6:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <pos>
				state = pauseT;
     7fa:	c1 e0       	ldi	r28, 0x01	; 1
     7fc:	d0 e0       	ldi	r29, 0x00	; 0
     7fe:	66 c3       	rjmp	.+1740   	; 0xecc <trans+0x7e6>
			num2 = (unsigned char)decval;
			
			
			if(num1 >= 99)
			{
				num1++;
     800:	83 94       	inc	r8
     802:	80 92 5a 02 	sts	0x025A, r8	; 0x80025a <num1.2067>
			}
			place = findHowManyB4Dec(num1);
     806:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <num1.2067>
     80a:	42 de       	rcall	.-892    	; 0x490 <findHowManyB4Dec>
     80c:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <place.2062>
			
			holder2 = place - 1;
     810:	9f ef       	ldi	r25, 0xFF	; 255
     812:	98 0f       	add	r25, r24
     814:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <holder2.2065>
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     818:	e8 2e       	mov	r14, r24
     81a:	f1 2c       	mov	r15, r1
     81c:	1e 14       	cp	r1, r14
     81e:	1f 04       	cpc	r1, r15
     820:	0c f0       	brlt	.+2      	; 0x824 <trans+0x13e>
     822:	4f c0       	rjmp	.+158    	; 0x8c2 <trans+0x1dc>
     824:	00 e0       	ldi	r16, 0x00	; 0
     826:	10 e0       	ldi	r17, 0x00	; 0
			{
				holder3 = num1/(pow(10,holder2));
     828:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <num1.2067>
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__floatsisf>
     836:	2b 01       	movw	r4, r22
     838:	3c 01       	movw	r6, r24
     83a:	c0 91 5b 02 	lds	r28, 0x025B	; 0x80025b <holder2.2065>
     83e:	6c 2f       	mov	r22, r28
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__floatunsisf>
     84a:	4b 01       	movw	r8, r22
     84c:	5c 01       	movw	r10, r24
     84e:	9b 01       	movw	r18, r22
     850:	ac 01       	movw	r20, r24
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	80 e2       	ldi	r24, 0x20	; 32
     858:	91 e4       	ldi	r25, 0x41	; 65
     85a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pow>
     85e:	9b 01       	movw	r18, r22
     860:	ac 01       	movw	r20, r24
     862:	c3 01       	movw	r24, r6
     864:	b2 01       	movw	r22, r4
     866:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__divsf3>
     86a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__fixunssfsi>
     86e:	d6 2f       	mov	r29, r22
				num1 = num1 - (holder3 * pow(10, holder2));
     870:	a5 01       	movw	r20, r10
     872:	94 01       	movw	r18, r8
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	80 e2       	ldi	r24, 0x20	; 32
     87a:	91 e4       	ldi	r25, 0x41	; 65
     87c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pow>
     880:	4b 01       	movw	r8, r22
     882:	5c 01       	movw	r10, r24
     884:	6d 2f       	mov	r22, r29
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__floatsisf>
     890:	a5 01       	movw	r20, r10
     892:	94 01       	movw	r18, r8
     894:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__mulsf3>
     898:	9b 01       	movw	r18, r22
     89a:	ac 01       	movw	r20, r24
     89c:	c3 01       	movw	r24, r6
     89e:	b2 01       	movw	r22, r4
     8a0:	bd d7       	rcall	.+3962   	; 0x181c <__subsf3>
     8a2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__fixunssfsi>
				LCD_WriteData(changetoChar(holder3));
     8a6:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <num1.2067>
     8aa:	8d 2f       	mov	r24, r29
     8ac:	d2 dd       	rcall	.-1116   	; 0x452 <changetoChar>
     8ae:	1c dd       	rcall	.-1480   	; 0x2e8 <LCD_WriteData>
				holder2--;
     8b0:	c1 50       	subi	r28, 0x01	; 1
     8b2:	c0 93 5b 02 	sts	0x025B, r28	; 0x80025b <holder2.2065>
			
			holder2 = place - 1;
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     8b6:	0f 5f       	subi	r16, 0xFF	; 255
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	0e 15       	cp	r16, r14
     8bc:	1f 05       	cpc	r17, r15
     8be:	09 f0       	breq	.+2      	; 0x8c2 <trans+0x1dc>
				num1 = num1 - (holder3 * pow(10, holder2));
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			
			holder2 = 1;
     8c0:	b3 cf       	rjmp	.-154    	; 0x828 <trans+0x142>
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <holder2.2065>
			LCD_WriteData('.');
     8c8:	8e e2       	ldi	r24, 0x2E	; 46
     8ca:	0e dd       	rcall	.-1508   	; 0x2e8 <LCD_WriteData>
     8cc:	02 e0       	ldi	r16, 0x02	; 2
     8ce:	10 e0       	ldi	r17, 0x00	; 0
			for(int i = 0; i < 2; i++)
			{
				holder3 = num2/(pow(10,holder2));
     8d0:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <num2.2068>
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__floatsisf>
     8de:	4b 01       	movw	r8, r22
     8e0:	5c 01       	movw	r10, r24
     8e2:	c0 91 5b 02 	lds	r28, 0x025B	; 0x80025b <holder2.2065>
     8e6:	6c 2f       	mov	r22, r28
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__floatunsisf>
     8f2:	2b 01       	movw	r4, r22
     8f4:	3c 01       	movw	r6, r24
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	80 e2       	ldi	r24, 0x20	; 32
     900:	91 e4       	ldi	r25, 0x41	; 65
     902:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pow>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	c5 01       	movw	r24, r10
     90c:	b4 01       	movw	r22, r8
     90e:	eb d7       	rcall	.+4054   	; 0x18e6 <__divsf3>
     910:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__fixunssfsi>
     914:	d6 2f       	mov	r29, r22
				num2 = num2 - (holder3 * pow(10, holder2));
     916:	a3 01       	movw	r20, r6
     918:	92 01       	movw	r18, r4
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	80 e2       	ldi	r24, 0x20	; 32
     920:	91 e4       	ldi	r25, 0x41	; 65
     922:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pow>
     926:	2b 01       	movw	r4, r22
     928:	3c 01       	movw	r6, r24
     92a:	6d 2f       	mov	r22, r29
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__floatsisf>
     936:	a3 01       	movw	r20, r6
     938:	92 01       	movw	r18, r4
     93a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__mulsf3>
     93e:	9b 01       	movw	r18, r22
     940:	ac 01       	movw	r20, r24
     942:	c5 01       	movw	r24, r10
     944:	b4 01       	movw	r22, r8
     946:	6a d7       	rcall	.+3796   	; 0x181c <__subsf3>
     948:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__fixunssfsi>
				LCD_WriteData(changetoChar(holder3));
     94c:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <num2.2068>
     950:	8d 2f       	mov	r24, r29
     952:	7f dd       	rcall	.-1282   	; 0x452 <changetoChar>
     954:	c9 dc       	rcall	.-1646   	; 0x2e8 <LCD_WriteData>
				holder2--;
     956:	c1 50       	subi	r28, 0x01	; 1
     958:	c0 93 5b 02 	sts	0x025B, r28	; 0x80025b <holder2.2065>
     95c:	01 50       	subi	r16, 0x01	; 1
     95e:	11 09       	sbc	r17, r1
				holder2--;
			}
			
			holder2 = 1;
			LCD_WriteData('.');
			for(int i = 0; i < 2; i++)
     960:	09 f0       	breq	.+2      	; 0x964 <trans+0x27e>
     962:	b6 cf       	rjmp	.-148    	; 0x8d0 <trans+0x1ea>
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			
			//writing $$ of B
			holderMoney = eeprom_read_float((float *)10);
     964:	8a e0       	ldi	r24, 0x0A	; 10
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <eeprom_read_dword>
     96c:	2b 01       	movw	r4, r22
     96e:	3c 01       	movw	r6, r24
			
			intval = (int)holderMoney;
     970:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__fixsfsi>
     974:	4b 01       	movw	r8, r22
     976:	5c 01       	movw	r10, r24
			holderMoney = (holderMoney - (int)holderMoney) * 100;
			decval = (int)holderMoney;
			
			num1 = (unsigned char)intval;
     978:	c6 2f       	mov	r28, r22
     97a:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <num1.2067>
			num2 = (unsigned char)decval;
     97e:	07 2e       	mov	r0, r23
     980:	00 0c       	add	r0, r0
     982:	88 0b       	sbc	r24, r24
     984:	99 0b       	sbc	r25, r25
     986:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__floatsisf>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
     98e:	c3 01       	movw	r24, r6
     990:	b2 01       	movw	r22, r4
     992:	44 d7       	rcall	.+3720   	; 0x181c <__subsf3>
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	48 ec       	ldi	r20, 0xC8	; 200
     99a:	52 e4       	ldi	r21, 0x42	; 66
     99c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__mulsf3>
     9a0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__fixsfsi>
			
			LCD_WriteData(' ');
     9a4:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <num2.2068>
			LCD_WriteData(' ');
     9a8:	80 e2       	ldi	r24, 0x20	; 32
     9aa:	9e dc       	rcall	.-1732   	; 0x2e8 <LCD_WriteData>
			LCD_WriteData(' ');
     9ac:	80 e2       	ldi	r24, 0x20	; 32
     9ae:	9c dc       	rcall	.-1736   	; 0x2e8 <LCD_WriteData>
     9b0:	80 e2       	ldi	r24, 0x20	; 32
			
			
			if(num1 >= 99)
     9b2:	9a dc       	rcall	.-1740   	; 0x2e8 <LCD_WriteData>
     9b4:	c3 36       	cpi	r28, 0x63	; 99
			{
				num1++;
     9b6:	18 f0       	brcs	.+6      	; 0x9be <trans+0x2d8>
     9b8:	83 94       	inc	r8
     9ba:	80 92 5a 02 	sts	0x025A, r8	; 0x80025a <num1.2067>
			}
			place = findHowManyB4Dec(num1);
     9be:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <num1.2067>
     9c2:	66 dd       	rcall	.-1332   	; 0x490 <findHowManyB4Dec>
     9c4:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <place.2062>
			
			holder2 = place - 1;
     9c8:	9f ef       	ldi	r25, 0xFF	; 255
     9ca:	98 0f       	add	r25, r24
     9cc:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <holder2.2065>
			
			for(int i = 0; i < place; i++)
     9d0:	e8 2e       	mov	r14, r24
     9d2:	f1 2c       	mov	r15, r1
     9d4:	1e 14       	cp	r1, r14
     9d6:	1f 04       	cpc	r1, r15
     9d8:	0c f0       	brlt	.+2      	; 0x9dc <trans+0x2f6>
     9da:	4b c0       	rjmp	.+150    	; 0xa72 <trans+0x38c>
     9dc:	00 e0       	ldi	r16, 0x00	; 0
     9de:	10 e0       	ldi	r17, 0x00	; 0
			{
				holder3 = num1/(pow(10,holder2));
     9e0:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <num1.2067>
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__floatsisf>
     9ee:	2b 01       	movw	r4, r22
     9f0:	3c 01       	movw	r6, r24
     9f2:	c0 91 5b 02 	lds	r28, 0x025B	; 0x80025b <holder2.2065>
     9f6:	6c 2f       	mov	r22, r28
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__floatunsisf>
     a02:	4b 01       	movw	r8, r22
     a04:	5c 01       	movw	r10, r24
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	80 e2       	ldi	r24, 0x20	; 32
     a10:	91 e4       	ldi	r25, 0x41	; 65
     a12:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pow>
     a16:	9b 01       	movw	r18, r22
     a18:	ac 01       	movw	r20, r24
     a1a:	c3 01       	movw	r24, r6
     a1c:	b2 01       	movw	r22, r4
     a1e:	63 d7       	rcall	.+3782   	; 0x18e6 <__divsf3>
     a20:	cf d7       	rcall	.+3998   	; 0x19c0 <__fixunssfsi>
				num1 = num1 - (holder3 * pow(10, holder2));
     a22:	d6 2f       	mov	r29, r22
     a24:	a5 01       	movw	r20, r10
     a26:	94 01       	movw	r18, r8
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	80 e2       	ldi	r24, 0x20	; 32
     a2e:	91 e4       	ldi	r25, 0x41	; 65
     a30:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pow>
     a34:	4b 01       	movw	r8, r22
     a36:	5c 01       	movw	r10, r24
     a38:	6d 2f       	mov	r22, r29
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	ed d7       	rcall	.+4058   	; 0x1a1c <__floatsisf>
     a42:	a5 01       	movw	r20, r10
     a44:	94 01       	movw	r18, r8
     a46:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__mulsf3>
     a4a:	9b 01       	movw	r18, r22
     a4c:	ac 01       	movw	r20, r24
     a4e:	c3 01       	movw	r24, r6
     a50:	b2 01       	movw	r22, r4
     a52:	e4 d6       	rcall	.+3528   	; 0x181c <__subsf3>
     a54:	b5 d7       	rcall	.+3946   	; 0x19c0 <__fixunssfsi>
				LCD_WriteData(changetoChar(holder3));
     a56:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <num1.2067>
     a5a:	8d 2f       	mov	r24, r29
				holder2--;
     a5c:	fa dc       	rcall	.-1548   	; 0x452 <changetoChar>
     a5e:	44 dc       	rcall	.-1912   	; 0x2e8 <LCD_WriteData>
     a60:	c1 50       	subi	r28, 0x01	; 1
			}
			place = findHowManyB4Dec(num1);
			
			holder2 = place - 1;
			
			for(int i = 0; i < place; i++)
     a62:	c0 93 5b 02 	sts	0x025B, r28	; 0x80025b <holder2.2065>
     a66:	0f 5f       	subi	r16, 0xFF	; 255
     a68:	1f 4f       	sbci	r17, 0xFF	; 255
     a6a:	e0 16       	cp	r14, r16
				num1 = num1 - (holder3 * pow(10, holder2));
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			
			holder2 = 1;
     a6c:	f1 06       	cpc	r15, r17
     a6e:	09 f0       	breq	.+2      	; 0xa72 <trans+0x38c>
     a70:	b7 cf       	rjmp	.-146    	; 0x9e0 <trans+0x2fa>
			LCD_WriteData('.');
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <holder2.2065>
     a78:	8e e2       	ldi	r24, 0x2E	; 46
     a7a:	36 dc       	rcall	.-1940   	; 0x2e8 <LCD_WriteData>
			for(int i = 0; i < 2; i++)
			{
				holder3 = num2/(pow(10,holder2));
     a7c:	02 e0       	ldi	r16, 0x02	; 2
     a7e:	10 e0       	ldi	r17, 0x00	; 0
     a80:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <num2.2068>
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	c8 d7       	rcall	.+3984   	; 0x1a1c <__floatsisf>
     a8c:	4b 01       	movw	r8, r22
     a8e:	5c 01       	movw	r10, r24
     a90:	c0 91 5b 02 	lds	r28, 0x025B	; 0x80025b <holder2.2065>
     a94:	6c 2f       	mov	r22, r28
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	bd d7       	rcall	.+3962   	; 0x1a18 <__floatunsisf>
     a9e:	2b 01       	movw	r4, r22
     aa0:	3c 01       	movw	r6, r24
     aa2:	9b 01       	movw	r18, r22
     aa4:	ac 01       	movw	r20, r24
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	80 e2       	ldi	r24, 0x20	; 32
     aac:	91 e4       	ldi	r25, 0x41	; 65
     aae:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pow>
     ab2:	9b 01       	movw	r18, r22
     ab4:	ac 01       	movw	r20, r24
     ab6:	c5 01       	movw	r24, r10
     ab8:	b4 01       	movw	r22, r8
     aba:	15 d7       	rcall	.+3626   	; 0x18e6 <__divsf3>
				num2 = num2 - (holder3 * pow(10, holder2));
     abc:	81 d7       	rcall	.+3842   	; 0x19c0 <__fixunssfsi>
     abe:	d6 2f       	mov	r29, r22
     ac0:	a3 01       	movw	r20, r6
     ac2:	92 01       	movw	r18, r4
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	80 e2       	ldi	r24, 0x20	; 32
     aca:	91 e4       	ldi	r25, 0x41	; 65
     acc:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pow>
     ad0:	2b 01       	movw	r4, r22
     ad2:	3c 01       	movw	r6, r24
     ad4:	6d 2f       	mov	r22, r29
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	9f d7       	rcall	.+3902   	; 0x1a1c <__floatsisf>
     ade:	a3 01       	movw	r20, r6
     ae0:	92 01       	movw	r18, r4
     ae2:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__mulsf3>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	c5 01       	movw	r24, r10
     aec:	b4 01       	movw	r22, r8
     aee:	96 d6       	rcall	.+3372   	; 0x181c <__subsf3>
				LCD_WriteData(changetoChar(holder3));
     af0:	67 d7       	rcall	.+3790   	; 0x19c0 <__fixunssfsi>
     af2:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <num2.2068>
     af6:	8d 2f       	mov	r24, r29
				holder2--;
     af8:	ac dc       	rcall	.-1704   	; 0x452 <changetoChar>
     afa:	f6 db       	rcall	.-2068   	; 0x2e8 <LCD_WriteData>
     afc:	c1 50       	subi	r28, 0x01	; 1
     afe:	c0 93 5b 02 	sts	0x025B, r28	; 0x80025b <holder2.2065>
				holder2--;
			}
			
			holder2 = 1;
			LCD_WriteData('.');
			for(int i = 0; i < 2; i++)
     b02:	01 50       	subi	r16, 0x01	; 1
     b04:	11 09       	sbc	r17, r1
     b06:	09 f0       	breq	.+2      	; 0xb0a <trans+0x424>
     b08:	bb cf       	rjmp	.-138    	; 0xa80 <trans+0x39a>
		{
			break;
		}
		case payment:
		{
			LCD_DisplayString(1, "Enter Payment:   ");
     b0a:	c2 e0       	ldi	r28, 0x02	; 2
     b0c:	d0 e0       	ldi	r29, 0x00	; 0
     b0e:	de c1       	rjmp	.+956    	; 0xecc <trans+0x7e6>
     b10:	6e e3       	ldi	r22, 0x3E	; 62
     b12:	71 e0       	ldi	r23, 0x01	; 1
			break;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	0c dc       	rcall	.-2024   	; 0x330 <LCD_DisplayString>
     b18:	c6 e0       	ldi	r28, 0x06	; 6
		}
		case payment1:
		{
			key = GetKeypadKey();
     b1a:	d0 e0       	ldi	r29, 0x00	; 0
     b1c:	d7 c1       	rjmp	.+942    	; 0xecc <trans+0x7e6>
     b1e:	d0 dc       	rcall	.-1632   	; 0x4c0 <GetKeypadKey>
     b20:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <key>
			if(key !=  '\0' && key != 'A' && key != 'B' && key!= 'C' && key != 'D')
     b24:	88 23       	and	r24, r24
     b26:	b9 f0       	breq	.+46     	; 0xb56 <trans+0x470>
     b28:	9f eb       	ldi	r25, 0xBF	; 191
     b2a:	98 0f       	add	r25, r24
     b2c:	94 30       	cpi	r25, 0x04	; 4
			{
				LCD_WriteData(key);
     b2e:	98 f0       	brcs	.+38     	; 0xb56 <trans+0x470>
     b30:	db db       	rcall	.-2122   	; 0x2e8 <LCD_WriteData>
				if (key == '.')
     b32:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <key>
     b36:	9e 32       	cpi	r25, 0x2E	; 46
     b38:	21 f4       	brne	.+8      	; 0xb42 <trans+0x45c>
				{
					place = count;
     b3a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <count.2063>
				}
				number[count] = key;
     b3e:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <place.2062>
     b42:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <count.2063>
     b46:	e8 2f       	mov	r30, r24
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	ee 5a       	subi	r30, 0xAE	; 174
				count++;
     b4c:	fd 4f       	sbci	r31, 0xFD	; 253
     b4e:	90 83       	st	Z, r25
     b50:	8f 5f       	subi	r24, 0xFF	; 255
			}
			holder2 = place - 1;
     b52:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <count.2063>
     b56:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <place.2062>
     b5a:	81 50       	subi	r24, 0x01	; 1
			holder = 0;
			break;
     b5c:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <holder2.2065>
     b60:	c7 e0       	ldi	r28, 0x07	; 7
		}
		case change:
		{
			LCD_DisplayString(1, "change:          ");
     b62:	d0 e0       	ldi	r29, 0x00	; 0
     b64:	b3 c1       	rjmp	.+870    	; 0xecc <trans+0x7e6>
     b66:	60 e5       	ldi	r22, 0x50	; 80
			
			LCD_WriteData(0x01);
     b68:	71 e0       	ldi	r23, 0x01	; 1
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	e1 db       	rcall	.-2110   	; 0x330 <LCD_DisplayString>

			for(int i = 0; i < place; i++)
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	bb db       	rcall	.-2186   	; 0x2e8 <LCD_WriteData>
     b72:	e0 90 5d 02 	lds	r14, 0x025D	; 0x80025d <place.2062>
     b76:	0e 2d       	mov	r16, r14
     b78:	10 e0       	ldi	r17, 0x00	; 0
     b7a:	10 16       	cp	r1, r16
     b7c:	11 06       	cpc	r1, r17
     b7e:	0c f0       	brlt	.+2      	; 0xb82 <trans+0x49c>
     b80:	3f c0       	rjmp	.+126    	; 0xc00 <trans+0x51a>
     b82:	0f 2e       	mov	r0, r31
     b84:	f2 e5       	ldi	r31, 0x52	; 82
     b86:	af 2e       	mov	r10, r31
     b88:	f2 e0       	ldi	r31, 0x02	; 2
     b8a:	bf 2e       	mov	r11, r31
     b8c:	f0 2d       	mov	r31, r0
     b8e:	c8 01       	movw	r24, r16
     b90:	9c 01       	movw	r18, r24
			{
				//LCD_WriteData(number[i]);
				holder = changetoInteger(number[i]);
     b92:	2e 5a       	subi	r18, 0xAE	; 174
     b94:	3d 4f       	sbci	r19, 0xFD	; 253
     b96:	49 01       	movw	r8, r18
     b98:	f5 01       	movw	r30, r10
     b9a:	81 91       	ld	r24, Z+
				num1 = holder*pow(10, holder2) + num1;
     b9c:	5f 01       	movw	r10, r30
     b9e:	3b dc       	rcall	.-1930   	; 0x416 <changetoInteger>
     ba0:	d8 2f       	mov	r29, r24
     ba2:	c0 91 5b 02 	lds	r28, 0x025B	; 0x80025b <holder2.2065>
     ba6:	6c 2f       	mov	r22, r28
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	34 d7       	rcall	.+3688   	; 0x1a18 <__floatunsisf>
     bb0:	9b 01       	movw	r18, r22
     bb2:	ac 01       	movw	r20, r24
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	80 e2       	ldi	r24, 0x20	; 32
     bba:	91 e4       	ldi	r25, 0x41	; 65
     bbc:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pow>
     bc0:	2b 01       	movw	r4, r22
     bc2:	3c 01       	movw	r6, r24
     bc4:	6d 2f       	mov	r22, r29
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	27 d7       	rcall	.+3662   	; 0x1a1c <__floatsisf>
     bce:	a3 01       	movw	r20, r6
     bd0:	92 01       	movw	r18, r4
     bd2:	b0 d7       	rcall	.+3936   	; 0x1b34 <__mulsf3>
     bd4:	2b 01       	movw	r4, r22
     bd6:	3c 01       	movw	r6, r24
     bd8:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <num1.2067>
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	1c d7       	rcall	.+3640   	; 0x1a1c <__floatsisf>
     be4:	9b 01       	movw	r18, r22
     be6:	ac 01       	movw	r20, r24
     be8:	c3 01       	movw	r24, r6
     bea:	b2 01       	movw	r22, r4
     bec:	18 d6       	rcall	.+3120   	; 0x181e <__addsf3>
     bee:	e8 d6       	rcall	.+3536   	; 0x19c0 <__fixunssfsi>
     bf0:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <num1.2067>
				holder2--;
     bf4:	c1 50       	subi	r28, 0x01	; 1
     bf6:	c0 93 5b 02 	sts	0x025B, r28	; 0x80025b <holder2.2065>
		{
			LCD_DisplayString(1, "change:          ");
			
			LCD_WriteData(0x01);

			for(int i = 0; i < place; i++)
     bfa:	8a 14       	cp	r8, r10
     bfc:	9b 04       	cpc	r9, r11
				holder = changetoInteger(number[i]);
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			//LCD_WriteData('.');
			holder2 = 1;
     bfe:	61 f6       	brne	.-104    	; 0xb98 <trans+0x4b2>
     c00:	81 e0       	ldi	r24, 0x01	; 1
			for(int j = place+1; j < count-1; j++)
     c02:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <holder2.2065>
     c06:	0f 5f       	subi	r16, 0xFF	; 255
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
     c0a:	a0 90 5c 02 	lds	r10, 0x025C	; 0x80025c <count.2063>
     c0e:	b1 2c       	mov	r11, r1
     c10:	f1 e0       	ldi	r31, 0x01	; 1
     c12:	af 1a       	sub	r10, r31
     c14:	b1 08       	sbc	r11, r1
     c16:	0a 15       	cp	r16, r10
     c18:	1b 05       	cpc	r17, r11
     c1a:	0c f0       	brlt	.+2      	; 0xc1e <trans+0x538>
     c1c:	3b c0       	rjmp	.+118    	; 0xc94 <trans+0x5ae>
     c1e:	8e 2d       	mov	r24, r14
     c20:	90 e0       	ldi	r25, 0x00	; 0
			{	
				//LCD_WriteData(number[j]);
				holder = changetoInteger(number[j]);
     c22:	9c 01       	movw	r18, r24
     c24:	2d 5a       	subi	r18, 0xAD	; 173
     c26:	3d 4f       	sbci	r19, 0xFD	; 253
     c28:	79 01       	movw	r14, r18
     c2a:	f7 01       	movw	r30, r14
     c2c:	81 91       	ld	r24, Z+
				num2 = holder*pow(10, holder2) + num2;
     c2e:	7f 01       	movw	r14, r30
     c30:	f2 db       	rcall	.-2076   	; 0x416 <changetoInteger>
     c32:	d8 2f       	mov	r29, r24
     c34:	c0 91 5b 02 	lds	r28, 0x025B	; 0x80025b <holder2.2065>
     c38:	6c 2f       	mov	r22, r28
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	eb d6       	rcall	.+3542   	; 0x1a18 <__floatunsisf>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	80 e2       	ldi	r24, 0x20	; 32
     c4c:	91 e4       	ldi	r25, 0x41	; 65
     c4e:	d5 d7       	rcall	.+4010   	; 0x1bfa <pow>
     c50:	2b 01       	movw	r4, r22
     c52:	3c 01       	movw	r6, r24
     c54:	6d 2f       	mov	r22, r29
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	df d6       	rcall	.+3518   	; 0x1a1c <__floatsisf>
     c5e:	a3 01       	movw	r20, r6
     c60:	92 01       	movw	r18, r4
     c62:	68 d7       	rcall	.+3792   	; 0x1b34 <__mulsf3>
     c64:	2b 01       	movw	r4, r22
     c66:	3c 01       	movw	r6, r24
     c68:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <num2.2068>
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	d4 d6       	rcall	.+3496   	; 0x1a1c <__floatsisf>
     c74:	9b 01       	movw	r18, r22
     c76:	ac 01       	movw	r20, r24
     c78:	c3 01       	movw	r24, r6
     c7a:	b2 01       	movw	r22, r4
     c7c:	d0 d5       	rcall	.+2976   	; 0x181e <__addsf3>
				holder2--;
     c7e:	a0 d6       	rcall	.+3392   	; 0x19c0 <__fixunssfsi>
     c80:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <num2.2068>
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			//LCD_WriteData('.');
			holder2 = 1;
			for(int j = place+1; j < count-1; j++)
     c84:	c1 50       	subi	r28, 0x01	; 1
     c86:	c0 93 5b 02 	sts	0x025B, r28	; 0x80025b <holder2.2065>
				num2 = holder*pow(10, holder2) + num2;
				holder2--;
			}
			
			holderMoney = (float)num1 + ((float)num2/100);
			changeMoney = holderMoney - totalMoney;
     c8a:	0f 5f       	subi	r16, 0xFF	; 255
     c8c:	1f 4f       	sbci	r17, 0xFF	; 255
     c8e:	0a 15       	cp	r16, r10
     c90:	1b 05       	cpc	r17, r11
     c92:	5c f2       	brlt	.-106    	; 0xc2a <trans+0x544>
     c94:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <num2.2068>
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	bc d6       	rcall	.+3448   	; 0x1a18 <__floatunsisf>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	48 ec       	ldi	r20, 0xC8	; 200
     ca6:	52 e4       	ldi	r21, 0x42	; 66
     ca8:	1e d6       	rcall	.+3132   	; 0x18e6 <__divsf3>
     caa:	4b 01       	movw	r8, r22
     cac:	5c 01       	movw	r10, r24
     cae:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <num1.2067>
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	af d6       	rcall	.+3422   	; 0x1a18 <__floatunsisf>
     cba:	9b 01       	movw	r18, r22
     cbc:	ac 01       	movw	r20, r24
     cbe:	c5 01       	movw	r24, r10
     cc0:	b4 01       	movw	r22, r8
     cc2:	ad d5       	rcall	.+2906   	; 0x181e <__addsf3>
     cc4:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <totalMoney.2058>
     cc8:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <totalMoney.2058+0x1>
     ccc:	40 91 60 02 	lds	r20, 0x0260	; 0x800260 <totalMoney.2058+0x2>
			holderMoney = (changeMoney - (int)changeMoney) * 100;
     cd0:	50 91 61 02 	lds	r21, 0x0261	; 0x800261 <totalMoney.2058+0x3>
     cd4:	a3 d5       	rcall	.+2886   	; 0x181c <__subsf3>
			decval = (int)holderMoney;
			intval = (int)changeMoney;
			
			num1 = (unsigned char)intval;
     cd6:	2b 01       	movw	r4, r22
     cd8:	3c 01       	movw	r6, r24
     cda:	6d d6       	rcall	.+3290   	; 0x19b6 <__fixsfsi>
			num2 = (unsigned char)decval;
     cdc:	4b 01       	movw	r8, r22
     cde:	5c 01       	movw	r10, r24
     ce0:	c6 2f       	mov	r28, r22
     ce2:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <num1.2067>
     ce6:	07 2e       	mov	r0, r23
     ce8:	00 0c       	add	r0, r0
     cea:	88 0b       	sbc	r24, r24
     cec:	99 0b       	sbc	r25, r25
     cee:	96 d6       	rcall	.+3372   	; 0x1a1c <__floatsisf>
     cf0:	9b 01       	movw	r18, r22
     cf2:	ac 01       	movw	r20, r24
     cf4:	c3 01       	movw	r24, r6
     cf6:	b2 01       	movw	r22, r4
     cf8:	91 d5       	rcall	.+2850   	; 0x181c <__subsf3>
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	48 ec       	ldi	r20, 0xC8	; 200
     d00:	52 e4       	ldi	r21, 0x42	; 66
			
			LCD_WriteData(' ');
     d02:	18 d7       	rcall	.+3632   	; 0x1b34 <__mulsf3>
     d04:	58 d6       	rcall	.+3248   	; 0x19b6 <__fixsfsi>
     d06:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <num2.2068>
			
			
			if(num1 >= 99)
     d0a:	80 e2       	ldi	r24, 0x20	; 32
			{
				num1++;
     d0c:	ed da       	rcall	.-2598   	; 0x2e8 <LCD_WriteData>
			}
			place = findHowManyB4Dec(num1);
     d0e:	c3 36       	cpi	r28, 0x63	; 99
     d10:	18 f0       	brcs	.+6      	; 0xd18 <trans+0x632>
     d12:	83 94       	inc	r8
     d14:	80 92 5a 02 	sts	0x025A, r8	; 0x80025a <num1.2067>
     d18:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <num1.2067>
			
			holder2 = place - 1;
     d1c:	b9 db       	rcall	.-2190   	; 0x490 <findHowManyB4Dec>
     d1e:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <place.2062>
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     d22:	9f ef       	ldi	r25, 0xFF	; 255
     d24:	98 0f       	add	r25, r24
     d26:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <holder2.2065>
     d2a:	e8 2e       	mov	r14, r24
     d2c:	f1 2c       	mov	r15, r1
     d2e:	1e 14       	cp	r1, r14
			{
				holder3 = num1/(pow(10,holder2));
     d30:	1f 04       	cpc	r1, r15
     d32:	0c f0       	brlt	.+2      	; 0xd36 <trans+0x650>
     d34:	46 c0       	rjmp	.+140    	; 0xdc2 <trans+0x6dc>
     d36:	00 e0       	ldi	r16, 0x00	; 0
     d38:	10 e0       	ldi	r17, 0x00	; 0
     d3a:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <num1.2067>
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	6b d6       	rcall	.+3286   	; 0x1a1c <__floatsisf>
     d46:	2b 01       	movw	r4, r22
     d48:	3c 01       	movw	r6, r24
     d4a:	c0 91 5b 02 	lds	r28, 0x025B	; 0x80025b <holder2.2065>
     d4e:	6c 2f       	mov	r22, r28
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	60 d6       	rcall	.+3264   	; 0x1a18 <__floatunsisf>
     d58:	4b 01       	movw	r8, r22
     d5a:	5c 01       	movw	r10, r24
     d5c:	9b 01       	movw	r18, r22
     d5e:	ac 01       	movw	r20, r24
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	80 e2       	ldi	r24, 0x20	; 32
     d66:	91 e4       	ldi	r25, 0x41	; 65
     d68:	48 d7       	rcall	.+3728   	; 0x1bfa <pow>
     d6a:	9b 01       	movw	r18, r22
     d6c:	ac 01       	movw	r20, r24
				num1 = num1 - (holder3 * pow(10, holder2));
     d6e:	c3 01       	movw	r24, r6
     d70:	b2 01       	movw	r22, r4
     d72:	b9 d5       	rcall	.+2930   	; 0x18e6 <__divsf3>
     d74:	25 d6       	rcall	.+3146   	; 0x19c0 <__fixunssfsi>
     d76:	d6 2f       	mov	r29, r22
     d78:	a5 01       	movw	r20, r10
     d7a:	94 01       	movw	r18, r8
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	80 e2       	ldi	r24, 0x20	; 32
     d82:	91 e4       	ldi	r25, 0x41	; 65
     d84:	3a d7       	rcall	.+3700   	; 0x1bfa <pow>
     d86:	4b 01       	movw	r8, r22
     d88:	5c 01       	movw	r10, r24
     d8a:	6d 2f       	mov	r22, r29
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	44 d6       	rcall	.+3208   	; 0x1a1c <__floatsisf>
     d94:	a5 01       	movw	r20, r10
     d96:	94 01       	movw	r18, r8
     d98:	cd d6       	rcall	.+3482   	; 0x1b34 <__mulsf3>
     d9a:	9b 01       	movw	r18, r22
     d9c:	ac 01       	movw	r20, r24
     d9e:	c3 01       	movw	r24, r6
     da0:	b2 01       	movw	r22, r4
				LCD_WriteData(changetoChar(holder3));
     da2:	3c d5       	rcall	.+2680   	; 0x181c <__subsf3>
     da4:	0d d6       	rcall	.+3098   	; 0x19c0 <__fixunssfsi>
     da6:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <num1.2067>
     daa:	8d 2f       	mov	r24, r29
				holder2--;
     dac:	52 db       	rcall	.-2396   	; 0x452 <changetoChar>
     dae:	9c da       	rcall	.-2760   	; 0x2e8 <LCD_WriteData>
			
			holder2 = place - 1;
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     db0:	c1 50       	subi	r28, 0x01	; 1
     db2:	c0 93 5b 02 	sts	0x025B, r28	; 0x80025b <holder2.2065>
     db6:	0f 5f       	subi	r16, 0xFF	; 255
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
				num1 = num1 - (holder3 * pow(10, holder2));
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			
			holder2 = 1;
     dba:	e0 16       	cp	r14, r16
     dbc:	f1 06       	cpc	r15, r17
			LCD_WriteData('.');
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <trans+0x6dc>
     dc0:	bc cf       	rjmp	.-136    	; 0xd3a <trans+0x654>
     dc2:	81 e0       	ldi	r24, 0x01	; 1
			for(int i = 0; i < 2; i++)
			{
				holder3 = num2/(pow(10,holder2));
     dc4:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <holder2.2065>
     dc8:	8e e2       	ldi	r24, 0x2E	; 46
     dca:	8e da       	rcall	.-2788   	; 0x2e8 <LCD_WriteData>
     dcc:	02 e0       	ldi	r16, 0x02	; 2
     dce:	10 e0       	ldi	r17, 0x00	; 0
     dd0:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <num2.2068>
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	20 d6       	rcall	.+3136   	; 0x1a1c <__floatsisf>
     ddc:	4b 01       	movw	r8, r22
     dde:	5c 01       	movw	r10, r24
     de0:	c0 91 5b 02 	lds	r28, 0x025B	; 0x80025b <holder2.2065>
     de4:	6c 2f       	mov	r22, r28
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	15 d6       	rcall	.+3114   	; 0x1a18 <__floatunsisf>
     dee:	2b 01       	movw	r4, r22
     df0:	3c 01       	movw	r6, r24
     df2:	9b 01       	movw	r18, r22
     df4:	ac 01       	movw	r20, r24
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	80 e2       	ldi	r24, 0x20	; 32
     dfc:	91 e4       	ldi	r25, 0x41	; 65
     dfe:	fd d6       	rcall	.+3578   	; 0x1bfa <pow>
     e00:	9b 01       	movw	r18, r22
     e02:	ac 01       	movw	r20, r24
     e04:	c5 01       	movw	r24, r10
     e06:	b4 01       	movw	r22, r8
				num2 = num2 - (holder3 * pow(10, holder2));
     e08:	6e d5       	rcall	.+2780   	; 0x18e6 <__divsf3>
     e0a:	da d5       	rcall	.+2996   	; 0x19c0 <__fixunssfsi>
     e0c:	d6 2f       	mov	r29, r22
     e0e:	a3 01       	movw	r20, r6
     e10:	92 01       	movw	r18, r4
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	80 e2       	ldi	r24, 0x20	; 32
     e18:	91 e4       	ldi	r25, 0x41	; 65
     e1a:	ef d6       	rcall	.+3550   	; 0x1bfa <pow>
     e1c:	2b 01       	movw	r4, r22
     e1e:	3c 01       	movw	r6, r24
     e20:	6d 2f       	mov	r22, r29
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	f9 d5       	rcall	.+3058   	; 0x1a1c <__floatsisf>
     e2a:	a3 01       	movw	r20, r6
     e2c:	92 01       	movw	r18, r4
     e2e:	82 d6       	rcall	.+3332   	; 0x1b34 <__mulsf3>
     e30:	9b 01       	movw	r18, r22
     e32:	ac 01       	movw	r20, r24
     e34:	c5 01       	movw	r24, r10
     e36:	b4 01       	movw	r22, r8
     e38:	f1 d4       	rcall	.+2530   	; 0x181c <__subsf3>
				LCD_WriteData(changetoChar(holder3));
     e3a:	c2 d5       	rcall	.+2948   	; 0x19c0 <__fixunssfsi>
     e3c:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <num2.2068>
     e40:	8d 2f       	mov	r24, r29
     e42:	07 db       	rcall	.-2546   	; 0x452 <changetoChar>
				holder2--;
     e44:	51 da       	rcall	.-2910   	; 0x2e8 <LCD_WriteData>
     e46:	c1 50       	subi	r28, 0x01	; 1
     e48:	c0 93 5b 02 	sts	0x025B, r28	; 0x80025b <holder2.2065>
     e4c:	01 50       	subi	r16, 0x01	; 1
				holder2--;
			}
			
			holder2 = 1;
			LCD_WriteData('.');
			for(int i = 0; i < 2; i++)
     e4e:	11 09       	sbc	r17, r1
     e50:	09 f0       	breq	.+2      	; 0xe54 <trans+0x76e>
     e52:	be cf       	rjmp	.-132    	; 0xdd0 <trans+0x6ea>
     e54:	c8 e0       	ldi	r28, 0x08	; 8
     e56:	d0 e0       	ldi	r29, 0x00	; 0
	
	switch (state)
	{
		case startT:
		{
			state = pauseT;
     e58:	39 c0       	rjmp	.+114    	; 0xecc <trans+0x7e6>
     e5a:	c1 e0       	ldi	r28, 0x01	; 1
     e5c:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		case options:
		{
			state = options1;
     e5e:	36 c0       	rjmp	.+108    	; 0xecc <trans+0x7e6>
     e60:	c3 e0       	ldi	r28, 0x03	; 3
     e62:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		default:
		{
			state = startT;
     e64:	33 c0       	rjmp	.+102    	; 0xecc <trans+0x7e6>
     e66:	c0 e0       	ldi	r28, 0x00	; 0
     e68:	d0 e0       	ldi	r29, 0x00	; 0
     e6a:	30 c0       	rjmp	.+96     	; 0xecc <trans+0x7e6>
     e6c:	c9 e0       	ldi	r28, 0x09	; 9
     e6e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
		case picked:
		{
			LCD_DisplayString(1, "Done  |  AddItem A    |    B");
     e70:	2d c0       	rjmp	.+90     	; 0xecc <trans+0x7e6>
     e72:	62 e6       	ldi	r22, 0x62	; 98
     e74:	71 e0       	ldi	r23, 0x01	; 1
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	5b da       	rcall	.-2890   	; 0x330 <LCD_DisplayString>
			break;
     e7a:	c4 e0       	ldi	r28, 0x04	; 4
     e7c:	d0 e0       	ldi	r29, 0x00	; 0
		default:
		{
			break;
		}
	}
	return state;
     e7e:	26 c0       	rjmp	.+76     	; 0xecc <trans+0x7e6>
		{
			break;
		}
		case options:
		{
			LCD_DisplayString(1, "A       B           ");
     e80:	6f e7       	ldi	r22, 0x7F	; 127
     e82:	71 e0       	ldi	r23, 0x01	; 1
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	54 da       	rcall	.-2904   	; 0x330 <LCD_DisplayString>
     e88:	81 e0       	ldi	r24, 0x01	; 1
			
			holderMoney = eeprom_read_float((float *)1);
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <eeprom_read_dword>
     e90:	2b 01       	movw	r4, r22
     e92:	3c 01       	movw	r6, r24
     e94:	90 d5       	rcall	.+2848   	; 0x19b6 <__fixsfsi>

			intval = (int)holderMoney;
     e96:	4b 01       	movw	r8, r22
     e98:	5c 01       	movw	r10, r24
     e9a:	c6 2f       	mov	r28, r22
     e9c:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <num1.2067>
			holderMoney = (holderMoney - (int)holderMoney) * 100;
			decval = (int)holderMoney;
			
			num1 = (unsigned char)intval;
     ea0:	07 2e       	mov	r0, r23
     ea2:	00 0c       	add	r0, r0
			num2 = (unsigned char)decval;
     ea4:	88 0b       	sbc	r24, r24
     ea6:	99 0b       	sbc	r25, r25
     ea8:	b9 d5       	rcall	.+2930   	; 0x1a1c <__floatsisf>
     eaa:	9b 01       	movw	r18, r22
     eac:	ac 01       	movw	r20, r24
     eae:	c3 01       	movw	r24, r6
     eb0:	b2 01       	movw	r22, r4
     eb2:	b4 d4       	rcall	.+2408   	; 0x181c <__subsf3>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	48 ec       	ldi	r20, 0xC8	; 200
     eba:	52 e4       	ldi	r21, 0x42	; 66
     ebc:	3b d6       	rcall	.+3190   	; 0x1b34 <__mulsf3>
     ebe:	7b d5       	rcall	.+2806   	; 0x19b6 <__fixsfsi>
     ec0:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <num2.2068>
     ec4:	c3 36       	cpi	r28, 0x63	; 99
     ec6:	08 f0       	brcs	.+2      	; 0xeca <trans+0x7e4>
     ec8:	9b cc       	rjmp	.-1738   	; 0x800 <trans+0x11a>
     eca:	9d cc       	rjmp	.-1734   	; 0x806 <trans+0x120>
     ecc:	ce 01       	movw	r24, r28
     ece:	df 91       	pop	r29
			
			
			if(num1 >= 99)
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
		{
			break;
		}
	}
	return state;
}
     ed8:	ef 90       	pop	r14
     eda:	bf 90       	pop	r11
     edc:	af 90       	pop	r10
     ede:	9f 90       	pop	r9
     ee0:	8f 90       	pop	r8
     ee2:	7f 90       	pop	r7
     ee4:	6f 90       	pop	r6
     ee6:	5f 90       	pop	r5
     ee8:	4f 90       	pop	r4
     eea:	08 95       	ret

00000eec <setting>:
     eec:	4f 92       	push	r4
     eee:	5f 92       	push	r5
     ef0:	6f 92       	push	r6
     ef2:	7f 92       	push	r7
     ef4:	8f 92       	push	r8
     ef6:	9f 92       	push	r9

int setting(int state)
{
     ef8:	af 92       	push	r10
     efa:	bf 92       	push	r11
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	ec 01       	movw	r28, r24
	static unsigned char holder, holder2, holder3, num1, num2;
	static int decval, intval;
	static unsigned char number[7] = {0};

	
	switch(state)
     f0e:	89 30       	cpi	r24, 0x09	; 9
     f10:	91 05       	cpc	r25, r1
     f12:	08 f0       	brcs	.+2      	; 0xf16 <setting+0x2a>
     f14:	2b c3       	rjmp	.+1622   	; 0x156c <setting+0x680>
     f16:	fc 01       	movw	r30, r24
     f18:	ed 59       	subi	r30, 0x9D	; 157
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	d3 c7       	rjmp	.+4006   	; 0x1ec4 <__tablejump2__>
			break;
		}
		case pauseS:
		{
			holderMoney = 0;
			place = 0;
     f1e:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <place.2141>
			count = 0;
     f22:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <count.2142>
			holder = 0;
			holder2 = 0;
     f26:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <holder2.2145>
			whichAddr = 0;
     f2a:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <whichAddr.2143>
			holder3 = 0;
			num1 = 0;
     f2e:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <num1.2147>
			num2 = 0;
     f32:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <num2.2148>
			clearArray(number, 7);
     f36:	67 e0       	ldi	r22, 0x07	; 7
     f38:	85 e4       	ldi	r24, 0x45	; 69
     f3a:	92 e0       	ldi	r25, 0x02	; 2
     f3c:	b7 da       	rcall	.-2706   	; 0x4ac <clearArray>
			if(pos == 4)
     f3e:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <pos>
     f42:	84 30       	cpi	r24, 0x04	; 4
     f44:	09 f0       	breq	.+2      	; 0xf48 <setting+0x5c>
     f46:	28 c3       	rjmp	.+1616   	; 0x1598 <setting+0x6ac>
			{
				state = opt;
				LCD_DisplayString(1, "  A    |   B      code |   items");
     f48:	64 e9       	ldi	r22, 0x94	; 148
     f4a:	71 e0       	ldi	r23, 0x01	; 1
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	f0 d9       	rcall	.-3104   	; 0x330 <LCD_DisplayString>
			num1 = 0;
			num2 = 0;
			clearArray(number, 7);
			if(pos == 4)
			{
				state = opt;
     f50:	c2 e0       	ldi	r28, 0x02	; 2
     f52:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		case opt:
		{
			key = GetKeypadKey();
     f54:	21 c3       	rjmp	.+1602   	; 0x1598 <setting+0x6ac>
     f56:	b4 da       	rcall	.-2712   	; 0x4c0 <GetKeypadKey>
     f58:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <key>
			if (key == 'A')
     f5c:	81 34       	cpi	r24, 0x41	; 65
     f5e:	29 f4       	brne	.+10     	; 0xf6a <setting+0x7e>
			{
				state = codeSet;
				LCD_DisplayString(1, "enter new code:  ");
     f60:	65 eb       	ldi	r22, 0xB5	; 181
     f62:	71 e0       	ldi	r23, 0x01	; 1
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	e4 d9       	rcall	.-3128   	; 0x330 <LCD_DisplayString>
     f68:	07 c3       	rjmp	.+1550   	; 0x1578 <setting+0x68c>
			}
			else if(key == 'B')
     f6a:	82 34       	cpi	r24, 0x42	; 66
     f6c:	09 f0       	breq	.+2      	; 0xf70 <setting+0x84>
			{
				LCD_DisplayString(1, "A     B           ");
     f6e:	14 c3       	rjmp	.+1576   	; 0x1598 <setting+0x6ac>
     f70:	67 ec       	ldi	r22, 0xC7	; 199
     f72:	71 e0       	ldi	r23, 0x01	; 1
     f74:	81 e0       	ldi	r24, 0x01	; 1
				
				//writing $$ of A
				holderMoney = eeprom_read_float((float *)1);
     f76:	dc d9       	rcall	.-3144   	; 0x330 <LCD_DisplayString>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	b4 d7       	rcall	.+3944   	; 0x1ee6 <eeprom_read_dword>
     f7e:	4b 01       	movw	r8, r22
				
				intval = (int)holderMoney;
     f80:	5c 01       	movw	r10, r24
     f82:	19 d5       	rcall	.+2610   	; 0x19b6 <__fixsfsi>
     f84:	6b 01       	movw	r12, r22
     f86:	7c 01       	movw	r14, r24
     f88:	70 93 44 02 	sts	0x0244, r23	; 0x800244 <intval.2150+0x1>
     f8c:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <intval.2150>
				holderMoney = (holderMoney - (int)holderMoney) * 100;
				decval = (int)holderMoney;
				
				num1 = (unsigned char)intval;
     f90:	c6 2f       	mov	r28, r22
     f92:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <num1.2147>
				num2 = (unsigned char)decval;
     f96:	07 2e       	mov	r0, r23
     f98:	00 0c       	add	r0, r0
     f9a:	88 0b       	sbc	r24, r24
     f9c:	99 0b       	sbc	r25, r25
     f9e:	3e d5       	rcall	.+2684   	; 0x1a1c <__floatsisf>
     fa0:	9b 01       	movw	r18, r22
     fa2:	ac 01       	movw	r20, r24
     fa4:	c5 01       	movw	r24, r10
     fa6:	b4 01       	movw	r22, r8
     fa8:	39 d4       	rcall	.+2162   	; 0x181c <__subsf3>
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	48 ec       	ldi	r20, 0xC8	; 200
     fb0:	52 e4       	ldi	r21, 0x42	; 66
     fb2:	c0 d5       	rcall	.+2944   	; 0x1b34 <__mulsf3>
     fb4:	00 d5       	rcall	.+2560   	; 0x19b6 <__fixsfsi>
     fb6:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <num2.2148>
								
				
				if(num1 >= 99)
     fba:	c3 36       	cpi	r28, 0x63	; 99
     fbc:	18 f0       	brcs	.+6      	; 0xfc4 <setting+0xd8>
				{
					num1++;
     fbe:	c3 94       	inc	r12
     fc0:	c0 92 4d 02 	sts	0x024D, r12	; 0x80024d <num1.2147>
				}
				place = findHowManyB4Dec(num1);
     fc4:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <num1.2147>
     fc8:	63 da       	rcall	.-2874   	; 0x490 <findHowManyB4Dec>
     fca:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <place.2141>
     fce:	9f ef       	ldi	r25, 0xFF	; 255
				
				holder2 = place - 1;
     fd0:	98 0f       	add	r25, r24
     fd2:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <holder2.2145>
     fd6:	e8 2e       	mov	r14, r24
				
				unsigned char holder3 = 0;
				
				for(int i = 0; i < place; i++)
     fd8:	f1 2c       	mov	r15, r1
     fda:	1e 14       	cp	r1, r14
     fdc:	1f 04       	cpc	r1, r15
     fde:	0c f0       	brlt	.+2      	; 0xfe2 <setting+0xf6>
     fe0:	46 c0       	rjmp	.+140    	; 0x106e <setting+0x182>
     fe2:	00 e0       	ldi	r16, 0x00	; 0
     fe4:	10 e0       	ldi	r17, 0x00	; 0
				{
					holder3 = num1/(pow(10,holder2));
     fe6:	60 91 4d 02 	lds	r22, 0x024D	; 0x80024d <num1.2147>
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	15 d5       	rcall	.+2602   	; 0x1a1c <__floatsisf>
     ff2:	2b 01       	movw	r4, r22
     ff4:	3c 01       	movw	r6, r24
     ff6:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <holder2.2145>
     ffa:	6c 2f       	mov	r22, r28
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0a d5       	rcall	.+2580   	; 0x1a18 <__floatunsisf>
    1004:	4b 01       	movw	r8, r22
    1006:	5c 01       	movw	r10, r24
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	80 e2       	ldi	r24, 0x20	; 32
    1012:	91 e4       	ldi	r25, 0x41	; 65
    1014:	f2 d5       	rcall	.+3044   	; 0x1bfa <pow>
    1016:	9b 01       	movw	r18, r22
    1018:	ac 01       	movw	r20, r24
    101a:	c3 01       	movw	r24, r6
    101c:	b2 01       	movw	r22, r4
    101e:	63 d4       	rcall	.+2246   	; 0x18e6 <__divsf3>
    1020:	cf d4       	rcall	.+2462   	; 0x19c0 <__fixunssfsi>
    1022:	d6 2f       	mov	r29, r22
					num1 = num1 - (holder3 * pow(10, holder2));
    1024:	a5 01       	movw	r20, r10
    1026:	94 01       	movw	r18, r8
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	80 e2       	ldi	r24, 0x20	; 32
    102e:	91 e4       	ldi	r25, 0x41	; 65
    1030:	e4 d5       	rcall	.+3016   	; 0x1bfa <pow>
    1032:	4b 01       	movw	r8, r22
    1034:	5c 01       	movw	r10, r24
    1036:	6d 2f       	mov	r22, r29
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	ee d4       	rcall	.+2524   	; 0x1a1c <__floatsisf>
    1040:	a5 01       	movw	r20, r10
    1042:	94 01       	movw	r18, r8
    1044:	77 d5       	rcall	.+2798   	; 0x1b34 <__mulsf3>
    1046:	9b 01       	movw	r18, r22
    1048:	ac 01       	movw	r20, r24
    104a:	c3 01       	movw	r24, r6
    104c:	b2 01       	movw	r22, r4
    104e:	e6 d3       	rcall	.+1996   	; 0x181c <__subsf3>
    1050:	b7 d4       	rcall	.+2414   	; 0x19c0 <__fixunssfsi>
    1052:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <num1.2147>
					LCD_WriteData(changetoChar(holder3));
    1056:	8d 2f       	mov	r24, r29
    1058:	fc d9       	rcall	.-3080   	; 0x452 <changetoChar>
    105a:	46 d9       	rcall	.-3444   	; 0x2e8 <LCD_WriteData>
    105c:	c1 50       	subi	r28, 0x01	; 1
					holder2--;
    105e:	c0 93 4f 02 	sts	0x024F, r28	; 0x80024f <holder2.2145>
    1062:	0f 5f       	subi	r16, 0xFF	; 255
				
				holder2 = place - 1;
				
				unsigned char holder3 = 0;
				
				for(int i = 0; i < place; i++)
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	0e 15       	cp	r16, r14
    1068:	1f 05       	cpc	r17, r15
    106a:	09 f0       	breq	.+2      	; 0x106e <setting+0x182>
    106c:	bc cf       	rjmp	.-136    	; 0xfe6 <setting+0xfa>
					num1 = num1 - (holder3 * pow(10, holder2));
					LCD_WriteData(changetoChar(holder3));
					holder2--;
				}
				
				holder2 = 1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <holder2.2145>
				LCD_WriteData('.');
    1074:	8e e2       	ldi	r24, 0x2E	; 46
    1076:	38 d9       	rcall	.-3472   	; 0x2e8 <LCD_WriteData>
    1078:	02 e0       	ldi	r16, 0x02	; 2
    107a:	10 e0       	ldi	r17, 0x00	; 0
				for(int i = 0; i < 2; i++)
				{
					holder3 = num2/(pow(10,holder2));
    107c:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <num2.2148>
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	ca d4       	rcall	.+2452   	; 0x1a1c <__floatsisf>
    1088:	6b 01       	movw	r12, r22
    108a:	7c 01       	movw	r14, r24
    108c:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <holder2.2145>
    1090:	6c 2f       	mov	r22, r28
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	bf d4       	rcall	.+2430   	; 0x1a18 <__floatunsisf>
    109a:	4b 01       	movw	r8, r22
    109c:	5c 01       	movw	r10, r24
    109e:	9b 01       	movw	r18, r22
    10a0:	ac 01       	movw	r20, r24
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	80 e2       	ldi	r24, 0x20	; 32
    10a8:	91 e4       	ldi	r25, 0x41	; 65
    10aa:	a7 d5       	rcall	.+2894   	; 0x1bfa <pow>
    10ac:	9b 01       	movw	r18, r22
    10ae:	ac 01       	movw	r20, r24
    10b0:	c7 01       	movw	r24, r14
    10b2:	b6 01       	movw	r22, r12
    10b4:	18 d4       	rcall	.+2096   	; 0x18e6 <__divsf3>
					num2 = num2 - (holder3 * pow(10, holder2));
    10b6:	84 d4       	rcall	.+2312   	; 0x19c0 <__fixunssfsi>
    10b8:	d6 2f       	mov	r29, r22
    10ba:	a5 01       	movw	r20, r10
    10bc:	94 01       	movw	r18, r8
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	80 e2       	ldi	r24, 0x20	; 32
    10c4:	91 e4       	ldi	r25, 0x41	; 65
    10c6:	99 d5       	rcall	.+2866   	; 0x1bfa <pow>
    10c8:	4b 01       	movw	r8, r22
    10ca:	5c 01       	movw	r10, r24
    10cc:	6d 2f       	mov	r22, r29
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a3 d4       	rcall	.+2374   	; 0x1a1c <__floatsisf>
    10d6:	a5 01       	movw	r20, r10
    10d8:	94 01       	movw	r18, r8
    10da:	2c d5       	rcall	.+2648   	; 0x1b34 <__mulsf3>
    10dc:	9b 01       	movw	r18, r22
    10de:	ac 01       	movw	r20, r24
    10e0:	c7 01       	movw	r24, r14
    10e2:	b6 01       	movw	r22, r12
    10e4:	9b d3       	rcall	.+1846   	; 0x181c <__subsf3>
    10e6:	6c d4       	rcall	.+2264   	; 0x19c0 <__fixunssfsi>
    10e8:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <num2.2148>
					LCD_WriteData(changetoChar(holder3));
    10ec:	8d 2f       	mov	r24, r29
    10ee:	b1 d9       	rcall	.-3230   	; 0x452 <changetoChar>
    10f0:	fb d8       	rcall	.-3594   	; 0x2e8 <LCD_WriteData>
    10f2:	c1 50       	subi	r28, 0x01	; 1
					holder2--;
    10f4:	c0 93 4f 02 	sts	0x024F, r28	; 0x80024f <holder2.2145>
    10f8:	01 50       	subi	r16, 0x01	; 1
					holder2--;
				}
				
				holder2 = 1;
				LCD_WriteData('.');
				for(int i = 0; i < 2; i++)
    10fa:	11 09       	sbc	r17, r1
					LCD_WriteData(changetoChar(holder3));
					holder2--;
				}
				
				//writing $$ of B
				holderMoney = eeprom_read_float((float *)10);
    10fc:	09 f0       	breq	.+2      	; 0x1100 <setting+0x214>
    10fe:	be cf       	rjmp	.-132    	; 0x107c <setting+0x190>
    1100:	8a e0       	ldi	r24, 0x0A	; 10
    1102:	90 e0       	ldi	r25, 0x00	; 0
				
				intval = (int)holderMoney;
    1104:	f0 d6       	rcall	.+3552   	; 0x1ee6 <eeprom_read_dword>
    1106:	4b 01       	movw	r8, r22
    1108:	5c 01       	movw	r10, r24
    110a:	55 d4       	rcall	.+2218   	; 0x19b6 <__fixsfsi>
    110c:	6b 01       	movw	r12, r22
    110e:	7c 01       	movw	r14, r24
    1110:	70 93 44 02 	sts	0x0244, r23	; 0x800244 <intval.2150+0x1>
				holderMoney = (holderMoney - (int)holderMoney) * 100;
				decval = (int)holderMoney;
				
				num1 = (unsigned char)intval;
    1114:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <intval.2150>
				num2 = (unsigned char)decval;
    1118:	c6 2f       	mov	r28, r22
    111a:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <num1.2147>
    111e:	07 2e       	mov	r0, r23
    1120:	00 0c       	add	r0, r0
    1122:	88 0b       	sbc	r24, r24
    1124:	99 0b       	sbc	r25, r25
    1126:	7a d4       	rcall	.+2292   	; 0x1a1c <__floatsisf>
    1128:	9b 01       	movw	r18, r22
    112a:	ac 01       	movw	r20, r24
    112c:	c5 01       	movw	r24, r10
    112e:	b4 01       	movw	r22, r8
    1130:	75 d3       	rcall	.+1770   	; 0x181c <__subsf3>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	48 ec       	ldi	r20, 0xC8	; 200
    1138:	52 e4       	ldi	r21, 0x42	; 66
    113a:	fc d4       	rcall	.+2552   	; 0x1b34 <__mulsf3>
    113c:	3c d4       	rcall	.+2168   	; 0x19b6 <__fixsfsi>
    113e:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <num2.2148>
				
				LCD_WriteData(' ');
    1142:	80 e2       	ldi	r24, 0x20	; 32
    1144:	d1 d8       	rcall	.-3678   	; 0x2e8 <LCD_WriteData>
				LCD_WriteData(' ');
    1146:	80 e2       	ldi	r24, 0x20	; 32
    1148:	cf d8       	rcall	.-3682   	; 0x2e8 <LCD_WriteData>
    114a:	80 e2       	ldi	r24, 0x20	; 32
				LCD_WriteData(' ');
    114c:	cd d8       	rcall	.-3686   	; 0x2e8 <LCD_WriteData>
    114e:	c3 36       	cpi	r28, 0x63	; 99
    1150:	18 f0       	brcs	.+6      	; 0x1158 <setting+0x26c>
				
				
				if(num1 >= 99)
    1152:	c3 94       	inc	r12
				{
					num1++;
    1154:	c0 92 4d 02 	sts	0x024D, r12	; 0x80024d <num1.2147>
    1158:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <num1.2147>
				}
				place = findHowManyB4Dec(num1);
    115c:	99 d9       	rcall	.-3278   	; 0x490 <findHowManyB4Dec>
    115e:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <place.2141>
				
				holder2 = place - 1;
    1162:	9f ef       	ldi	r25, 0xFF	; 255
    1164:	98 0f       	add	r25, r24
    1166:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <holder2.2145>
				
				for(int i = 0; i < place; i++)
    116a:	e8 2e       	mov	r14, r24
    116c:	f1 2c       	mov	r15, r1
    116e:	1e 14       	cp	r1, r14
    1170:	1f 04       	cpc	r1, r15
    1172:	0c f0       	brlt	.+2      	; 0x1176 <setting+0x28a>
    1174:	46 c0       	rjmp	.+140    	; 0x1202 <setting+0x316>
				{
					holder3 = num1/(pow(10,holder2));
    1176:	00 e0       	ldi	r16, 0x00	; 0
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	60 91 4d 02 	lds	r22, 0x024D	; 0x80024d <num1.2147>
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	4b d4       	rcall	.+2198   	; 0x1a1c <__floatsisf>
    1186:	2b 01       	movw	r4, r22
    1188:	3c 01       	movw	r6, r24
    118a:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <holder2.2145>
    118e:	6c 2f       	mov	r22, r28
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	40 d4       	rcall	.+2176   	; 0x1a18 <__floatunsisf>
    1198:	4b 01       	movw	r8, r22
    119a:	5c 01       	movw	r10, r24
    119c:	9b 01       	movw	r18, r22
    119e:	ac 01       	movw	r20, r24
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	80 e2       	ldi	r24, 0x20	; 32
    11a6:	91 e4       	ldi	r25, 0x41	; 65
    11a8:	28 d5       	rcall	.+2640   	; 0x1bfa <pow>
    11aa:	9b 01       	movw	r18, r22
    11ac:	ac 01       	movw	r20, r24
    11ae:	c3 01       	movw	r24, r6
    11b0:	b2 01       	movw	r22, r4
					num1 = num1 - (holder3 * pow(10, holder2));
    11b2:	99 d3       	rcall	.+1842   	; 0x18e6 <__divsf3>
    11b4:	05 d4       	rcall	.+2058   	; 0x19c0 <__fixunssfsi>
    11b6:	d6 2f       	mov	r29, r22
    11b8:	a5 01       	movw	r20, r10
    11ba:	94 01       	movw	r18, r8
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	91 e4       	ldi	r25, 0x41	; 65
    11c4:	1a d5       	rcall	.+2612   	; 0x1bfa <pow>
    11c6:	4b 01       	movw	r8, r22
    11c8:	5c 01       	movw	r10, r24
    11ca:	6d 2f       	mov	r22, r29
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	24 d4       	rcall	.+2120   	; 0x1a1c <__floatsisf>
    11d4:	a5 01       	movw	r20, r10
    11d6:	94 01       	movw	r18, r8
    11d8:	ad d4       	rcall	.+2394   	; 0x1b34 <__mulsf3>
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	c3 01       	movw	r24, r6
    11e0:	b2 01       	movw	r22, r4
    11e2:	1c d3       	rcall	.+1592   	; 0x181c <__subsf3>
					LCD_WriteData(changetoChar(holder3));
    11e4:	ed d3       	rcall	.+2010   	; 0x19c0 <__fixunssfsi>
    11e6:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <num1.2147>
    11ea:	8d 2f       	mov	r24, r29
					holder2--;
    11ec:	32 d9       	rcall	.-3484   	; 0x452 <changetoChar>
    11ee:	7c d8       	rcall	.-3848   	; 0x2e8 <LCD_WriteData>
    11f0:	c1 50       	subi	r28, 0x01	; 1
				}
				place = findHowManyB4Dec(num1);
				
				holder2 = place - 1;
				
				for(int i = 0; i < place; i++)
    11f2:	c0 93 4f 02 	sts	0x024F, r28	; 0x80024f <holder2.2145>
    11f6:	0f 5f       	subi	r16, 0xFF	; 255
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
					num1 = num1 - (holder3 * pow(10, holder2));
					LCD_WriteData(changetoChar(holder3));
					holder2--;
				}
				
				holder2 = 1;
    11fa:	e0 16       	cp	r14, r16
    11fc:	f1 06       	cpc	r15, r17
    11fe:	09 f0       	breq	.+2      	; 0x1202 <setting+0x316>
				LCD_WriteData('.');
    1200:	bc cf       	rjmp	.-136    	; 0x117a <setting+0x28e>
    1202:	81 e0       	ldi	r24, 0x01	; 1
				for(int i = 0; i < 2; i++)
				{
					holder3 = num2/(pow(10,holder2));
    1204:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <holder2.2145>
    1208:	8e e2       	ldi	r24, 0x2E	; 46
    120a:	6e d8       	rcall	.-3876   	; 0x2e8 <LCD_WriteData>
    120c:	02 e0       	ldi	r16, 0x02	; 2
    120e:	10 e0       	ldi	r17, 0x00	; 0
    1210:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <num2.2148>
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	00 d4       	rcall	.+2048   	; 0x1a1c <__floatsisf>
    121c:	6b 01       	movw	r12, r22
    121e:	7c 01       	movw	r14, r24
    1220:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <holder2.2145>
    1224:	6c 2f       	mov	r22, r28
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	f5 d3       	rcall	.+2026   	; 0x1a18 <__floatunsisf>
    122e:	4b 01       	movw	r8, r22
    1230:	5c 01       	movw	r10, r24
    1232:	9b 01       	movw	r18, r22
    1234:	ac 01       	movw	r20, r24
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	80 e2       	ldi	r24, 0x20	; 32
    123c:	91 e4       	ldi	r25, 0x41	; 65
    123e:	dd d4       	rcall	.+2490   	; 0x1bfa <pow>
    1240:	9b 01       	movw	r18, r22
    1242:	ac 01       	movw	r20, r24
    1244:	c7 01       	movw	r24, r14
					num2 = num2 - (holder3 * pow(10, holder2));
    1246:	b6 01       	movw	r22, r12
    1248:	4e d3       	rcall	.+1692   	; 0x18e6 <__divsf3>
    124a:	ba d3       	rcall	.+1908   	; 0x19c0 <__fixunssfsi>
    124c:	d6 2f       	mov	r29, r22
    124e:	a5 01       	movw	r20, r10
    1250:	94 01       	movw	r18, r8
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	80 e2       	ldi	r24, 0x20	; 32
    1258:	91 e4       	ldi	r25, 0x41	; 65
    125a:	cf d4       	rcall	.+2462   	; 0x1bfa <pow>
    125c:	4b 01       	movw	r8, r22
    125e:	5c 01       	movw	r10, r24
    1260:	6d 2f       	mov	r22, r29
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	d9 d3       	rcall	.+1970   	; 0x1a1c <__floatsisf>
    126a:	a5 01       	movw	r20, r10
    126c:	94 01       	movw	r18, r8
    126e:	62 d4       	rcall	.+2244   	; 0x1b34 <__mulsf3>
    1270:	9b 01       	movw	r18, r22
    1272:	ac 01       	movw	r20, r24
    1274:	c7 01       	movw	r24, r14
    1276:	b6 01       	movw	r22, r12
    1278:	d1 d2       	rcall	.+1442   	; 0x181c <__subsf3>
    127a:	a2 d3       	rcall	.+1860   	; 0x19c0 <__fixunssfsi>
					LCD_WriteData(changetoChar(holder3));
    127c:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <num2.2148>
    1280:	8d 2f       	mov	r24, r29
    1282:	e7 d8       	rcall	.-3634   	; 0x452 <changetoChar>
					holder2--;
    1284:	31 d8       	rcall	.-3998   	; 0x2e8 <LCD_WriteData>
    1286:	c1 50       	subi	r28, 0x01	; 1
    1288:	c0 93 4f 02 	sts	0x024F, r28	; 0x80024f <holder2.2145>
    128c:	01 50       	subi	r16, 0x01	; 1
					holder2--;
				}
				
				holder2 = 1;
				LCD_WriteData('.');
				for(int i = 0; i < 2; i++)
    128e:	11 09       	sbc	r17, r1
    1290:	09 f0       	breq	.+2      	; 0x1294 <setting+0x3a8>
					holder3 = num2/(pow(10,holder2));
					num2 = num2 - (holder3 * pow(10, holder2));
					LCD_WriteData(changetoChar(holder3));
					holder2--;
				}
				state = pricePick;
    1292:	be cf       	rjmp	.-132    	; 0x1210 <setting+0x324>
    1294:	c5 e0       	ldi	r28, 0x05	; 5
    1296:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		case codeSet:
		{
			if (key == '#')
    1298:	7f c1       	rjmp	.+766    	; 0x1598 <setting+0x6ac>
    129a:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <key>
    129e:	83 32       	cpi	r24, 0x23	; 35
			{
				state = codeWrite;
				intval = 20;
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <setting+0x3b8>
    12a2:	6a c1       	rjmp	.+724    	; 0x1578 <setting+0x68c>
    12a4:	84 e1       	ldi	r24, 0x14	; 20
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <intval.2150+0x1>
			}
			break;
		}
		case codeWrite:
		{
			eeprom_write_byte(((uint8_t *) 26), '1');
    12ac:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <intval.2150>
    12b0:	61 e3       	ldi	r22, 0x31	; 49
    12b2:	8a e1       	ldi	r24, 0x1A	; 26
    12b4:	90 e0       	ldi	r25, 0x00	; 0
			for(int i = 0; i < count ; i++)
    12b6:	1c d6       	rcall	.+3128   	; 0x1ef0 <eeprom_write_byte>
    12b8:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <count.2142>
    12bc:	81 11       	cpse	r24, r1
    12be:	4e c0       	rjmp	.+156    	; 0x135c <setting+0x470>
    12c0:	c4 e0       	ldi	r28, 0x04	; 4
    12c2:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		}
		case codeWrite:
		{
			state = done;
			LCD_DisplayString(1, "A        |   #  settings | menu");
    12c4:	69 c1       	rjmp	.+722    	; 0x1598 <setting+0x6ac>
    12c6:	6a ed       	ldi	r22, 0xDA	; 218
    12c8:	71 e0       	ldi	r23, 0x01	; 1
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	31 d8       	rcall	.-3998   	; 0x330 <LCD_DisplayString>
			}
			break;
		}
		case codeWrite:
		{
			state = done;
    12ce:	c8 e0       	ldi	r28, 0x08	; 8
    12d0:	d0 e0       	ldi	r29, 0x00	; 0
			LCD_DisplayString(1, "A        |   #  settings | menu");
			break;
    12d2:	62 c1       	rjmp	.+708    	; 0x1598 <setting+0x6ac>
		}
		case pricePick:
		{
			key = GetKeypadKey();
    12d4:	f5 d8       	rcall	.-3606   	; 0x4c0 <GetKeypadKey>
    12d6:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <key>
    12da:	81 34       	cpi	r24, 0x41	; 65
			if(key == 'A')
    12dc:	39 f4       	brne	.+14     	; 0x12ec <setting+0x400>
    12de:	81 e0       	ldi	r24, 0x01	; 1
			{
				state = priceSet;
				whichAddr = 1;
    12e0:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <whichAddr.2143>
    12e4:	6a ef       	ldi	r22, 0xFA	; 250
				LCD_DisplayString(1, "Enter Price:     ");
    12e6:	71 e0       	ldi	r23, 0x01	; 1
    12e8:	23 d8       	rcall	.-4026   	; 0x330 <LCD_DisplayString>
    12ea:	4f c1       	rjmp	.+670    	; 0x158a <setting+0x69e>
    12ec:	82 34       	cpi	r24, 0x42	; 66
				//variable set to indicate A chosen;
			}
			else if(key == 'B')
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <setting+0x406>
    12f0:	53 c1       	rjmp	.+678    	; 0x1598 <setting+0x6ac>
    12f2:	82 e0       	ldi	r24, 0x02	; 2
			{
				state = priceSet;
				whichAddr = 2;
    12f4:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <whichAddr.2143>
    12f8:	6a ef       	ldi	r22, 0xFA	; 250
				LCD_DisplayString(1, "Enter Price:     ");
    12fa:	71 e0       	ldi	r23, 0x01	; 1
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	18 d8       	rcall	.-4048   	; 0x330 <LCD_DisplayString>
    1300:	44 c1       	rjmp	.+648    	; 0x158a <setting+0x69e>
    1302:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <key>
			}
			break;
		}
		case priceSet:
		{
			if (key == '#')
    1306:	83 32       	cpi	r24, 0x23	; 35
    1308:	09 f0       	breq	.+2      	; 0x130c <setting+0x420>
    130a:	3f c1       	rjmp	.+638    	; 0x158a <setting+0x69e>
    130c:	66 c0       	rjmp	.+204    	; 0x13da <setting+0x4ee>
    130e:	6a ed       	ldi	r22, 0xDA	; 218
    1310:	71 e0       	ldi	r23, 0x01	; 1
			}
			break;
		}
		case priceWrite:
		{
			LCD_DisplayString(1, "A        |   #  settings | menu");	
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	0d d8       	rcall	.-4070   	; 0x330 <LCD_DisplayString>
    1316:	c8 e0       	ldi	r28, 0x08	; 8
    1318:	d0 e0       	ldi	r29, 0x00	; 0
    131a:	3e c1       	rjmp	.+636    	; 0x1598 <setting+0x6ac>
			state = done;
    131c:	d1 d8       	rcall	.-3678   	; 0x4c0 <GetKeypadKey>
    131e:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <key>
			break;
		}
		case done:
		{
			key = GetKeypadKey();
    1322:	81 34       	cpi	r24, 0x41	; 65
    1324:	09 f4       	brne	.+2      	; 0x1328 <setting+0x43c>
    1326:	25 c1       	rjmp	.+586    	; 0x1572 <setting+0x686>
    1328:	83 32       	cpi	r24, 0x23	; 35
			if(key == 'A')
    132a:	09 f0       	breq	.+2      	; 0x132e <setting+0x442>
    132c:	35 c1       	rjmp	.+618    	; 0x1598 <setting+0x6ac>
    132e:	83 e0       	ldi	r24, 0x03	; 3
			{
				state = opt;
			}
			else if(key == '#')
    1330:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <pos>
    1334:	c1 e0       	ldi	r28, 0x01	; 1
			{
				pos = 3;
    1336:	d0 e0       	ldi	r29, 0x00	; 0
    1338:	2f c1       	rjmp	.+606    	; 0x1598 <setting+0x6ac>
    133a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_WriteData>
				state = pauseS;
    133e:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <count.2142>
		case codeSet:
		{
			key = GetKeypadKey();
			if(key !=  '\0')
			{
				LCD_WriteData(key);
    1342:	e8 2f       	mov	r30, r24
    1344:	f0 e0       	ldi	r31, 0x00	; 0
				number[count] = key;
    1346:	eb 5b       	subi	r30, 0xBB	; 187
    1348:	fd 4f       	sbci	r31, 0xFD	; 253
    134a:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <key>
    134e:	90 83       	st	Z, r25
    1350:	8f 5f       	subi	r24, 0xFF	; 255
    1352:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <count.2142>
    1356:	c3 e0       	ldi	r28, 0x03	; 3
				count++;
    1358:	d0 e0       	ldi	r29, 0x00	; 0
    135a:	1e c1       	rjmp	.+572    	; 0x1598 <setting+0x6ac>
    135c:	05 e4       	ldi	r16, 0x45	; 69
    135e:	12 e0       	ldi	r17, 0x02	; 2
    1360:	c0 e0       	ldi	r28, 0x00	; 0
    1362:	d0 e0       	ldi	r29, 0x00	; 0
    1364:	f8 01       	movw	r30, r16
    1366:	61 91       	ld	r22, Z+
			break;
		}
		case codeWrite:
		{
			eeprom_write_byte(((uint8_t *) 26), '1');
			for(int i = 0; i < count ; i++)
    1368:	8f 01       	movw	r16, r30
    136a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <intval.2150>
			{
				eeprom_write_byte(((uint8_t *) intval), number[i]);
    136e:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <intval.2150+0x1>
    1372:	be d5       	rcall	.+2940   	; 0x1ef0 <eeprom_write_byte>
    1374:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <intval.2150>
    1378:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <intval.2150+0x1>
				//LCD_WriteData(eeprom_read_byte((uint8_t *) intval));
				intval++;
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <intval.2150+0x1>
    1382:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <intval.2150>
    1386:	21 96       	adiw	r28, 0x01	; 1
    1388:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <count.2142>
    138c:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
		case codeWrite:
		{
			eeprom_write_byte(((uint8_t *) 26), '1');
			for(int i = 0; i < count ; i++)
    138e:	c8 17       	cp	r28, r24
    1390:	d9 07       	cpc	r29, r25
    1392:	44 f3       	brlt	.-48     	; 0x1364 <setting+0x478>
    1394:	c4 e0       	ldi	r28, 0x04	; 4
    1396:	d0 e0       	ldi	r29, 0x00	; 0
    1398:	ff c0       	rjmp	.+510    	; 0x1598 <setting+0x6ac>
    139a:	9f eb       	ldi	r25, 0xBF	; 191
    139c:	98 0f       	add	r25, r24
    139e:	94 30       	cpi	r25, 0x04	; 4
			break;
		}
		case priceSet:
		{
			key = GetKeypadKey();
			if(key !=  '\0' && key != 'A' && key != 'B' && key!= 'C' && key != 'D')
    13a0:	a0 f0       	brcs	.+40     	; 0x13ca <setting+0x4de>
    13a2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_WriteData>
			{
				LCD_WriteData(key);
    13a6:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <key>
				if (key == '.')
    13aa:	9e 32       	cpi	r25, 0x2E	; 46
    13ac:	21 f4       	brne	.+8      	; 0x13b6 <setting+0x4ca>
    13ae:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <count.2142>
				{
					place = count;
    13b2:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <place.2141>
				}
				number[count] = key;
    13b6:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <count.2142>
    13ba:	e8 2f       	mov	r30, r24
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	eb 5b       	subi	r30, 0xBB	; 187
    13c0:	fd 4f       	sbci	r31, 0xFD	; 253
				count++;
    13c2:	90 83       	st	Z, r25
    13c4:	8f 5f       	subi	r24, 0xFF	; 255
    13c6:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <count.2142>
			}
			holder2 = place - 1;
    13ca:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <place.2141>
			holder = 0;
			break;
    13ce:	81 50       	subi	r24, 0x01	; 1
    13d0:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <holder2.2145>
		}
		case priceWrite:
		{
			//write to corresponding eeprom price
			holder2 = place - 1;
    13d4:	c6 e0       	ldi	r28, 0x06	; 6
    13d6:	d0 e0       	ldi	r29, 0x00	; 0
    13d8:	df c0       	rjmp	.+446    	; 0x1598 <setting+0x6ac>
    13da:	e0 90 51 02 	lds	r14, 0x0251	; 0x800251 <place.2141>
    13de:	8f ef       	ldi	r24, 0xFF	; 255
			holder = 0;
			//LCD_DisplayString(1, "change:          ");
			for(int i = 0; i < place; i++)
    13e0:	8e 0d       	add	r24, r14
    13e2:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <holder2.2145>
    13e6:	0e 2d       	mov	r16, r14
    13e8:	10 e0       	ldi	r17, 0x00	; 0
    13ea:	10 16       	cp	r1, r16
    13ec:	11 06       	cpc	r1, r17
    13ee:	0c f0       	brlt	.+2      	; 0x13f2 <setting+0x506>
    13f0:	3e c0       	rjmp	.+124    	; 0x146e <setting+0x582>
    13f2:	0f 2e       	mov	r0, r31
    13f4:	f5 e4       	ldi	r31, 0x45	; 69
    13f6:	cf 2e       	mov	r12, r31
    13f8:	f2 e0       	ldi	r31, 0x02	; 2
    13fa:	df 2e       	mov	r13, r31
    13fc:	f0 2d       	mov	r31, r0
    13fe:	c8 01       	movw	r24, r16
    1400:	9c 01       	movw	r18, r24
			{
				//LCD_WriteData(number[i]);
				holder = changetoInteger(number[i]);
    1402:	2b 5b       	subi	r18, 0xBB	; 187
    1404:	3d 4f       	sbci	r19, 0xFD	; 253
    1406:	59 01       	movw	r10, r18
    1408:	f6 01       	movw	r30, r12
    140a:	81 91       	ld	r24, Z+
    140c:	6f 01       	movw	r12, r30
				num1 = holder*pow(10, holder2) + num1;
    140e:	03 d8       	rcall	.-4090   	; 0x416 <changetoInteger>
    1410:	d8 2f       	mov	r29, r24
    1412:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <holder2.2145>
    1416:	6c 2f       	mov	r22, r28
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	fc d2       	rcall	.+1528   	; 0x1a18 <__floatunsisf>
    1420:	9b 01       	movw	r18, r22
    1422:	ac 01       	movw	r20, r24
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	80 e2       	ldi	r24, 0x20	; 32
    142a:	91 e4       	ldi	r25, 0x41	; 65
    142c:	e6 d3       	rcall	.+1996   	; 0x1bfa <pow>
    142e:	2b 01       	movw	r4, r22
    1430:	3c 01       	movw	r6, r24
    1432:	6d 2f       	mov	r22, r29
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	f0 d2       	rcall	.+1504   	; 0x1a1c <__floatsisf>
    143c:	a3 01       	movw	r20, r6
    143e:	92 01       	movw	r18, r4
    1440:	79 d3       	rcall	.+1778   	; 0x1b34 <__mulsf3>
    1442:	2b 01       	movw	r4, r22
    1444:	3c 01       	movw	r6, r24
    1446:	60 91 4d 02 	lds	r22, 0x024D	; 0x80024d <num1.2147>
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	e5 d2       	rcall	.+1482   	; 0x1a1c <__floatsisf>
    1452:	9b 01       	movw	r18, r22
    1454:	ac 01       	movw	r20, r24
    1456:	c3 01       	movw	r24, r6
    1458:	b2 01       	movw	r22, r4
    145a:	e1 d1       	rcall	.+962    	; 0x181e <__addsf3>
    145c:	b1 d2       	rcall	.+1378   	; 0x19c0 <__fixunssfsi>
				holder2--;
    145e:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <num1.2147>
    1462:	c1 50       	subi	r28, 0x01	; 1
		{
			//write to corresponding eeprom price
			holder2 = place - 1;
			holder = 0;
			//LCD_DisplayString(1, "change:          ");
			for(int i = 0; i < place; i++)
    1464:	c0 93 4f 02 	sts	0x024F, r28	; 0x80024f <holder2.2145>
    1468:	ca 14       	cp	r12, r10
				holder = changetoInteger(number[i]);
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			//LCD_WriteData('.');
			holder2 = 1;
    146a:	db 04       	cpc	r13, r11
    146c:	69 f6       	brne	.-102    	; 0x1408 <setting+0x51c>
			for(int j = place+1; j < count-1; j++)
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <holder2.2145>
    1474:	0f 5f       	subi	r16, 0xFF	; 255
    1476:	1f 4f       	sbci	r17, 0xFF	; 255
    1478:	c0 90 50 02 	lds	r12, 0x0250	; 0x800250 <count.2142>
    147c:	d1 2c       	mov	r13, r1
    147e:	f1 e0       	ldi	r31, 0x01	; 1
    1480:	cf 1a       	sub	r12, r31
    1482:	d1 08       	sbc	r13, r1
    1484:	0c 15       	cp	r16, r12
    1486:	1d 05       	cpc	r17, r13
    1488:	0c f0       	brlt	.+2      	; 0x148c <setting+0x5a0>
    148a:	3c c0       	rjmp	.+120    	; 0x1504 <setting+0x618>
    148c:	8e 2d       	mov	r24, r14
			{
				//LCD_WriteData(number[j]);
				holder = changetoInteger(number[j]);
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9c 01       	movw	r18, r24
    1492:	2a 5b       	subi	r18, 0xBA	; 186
    1494:	3d 4f       	sbci	r19, 0xFD	; 253
    1496:	79 01       	movw	r14, r18
    1498:	f7 01       	movw	r30, r14
				num2 = holder*pow(10, holder2) + num2;
    149a:	81 91       	ld	r24, Z+
    149c:	7f 01       	movw	r14, r30
    149e:	0e 94 0b 02 	call	0x416	; 0x416 <changetoInteger>
    14a2:	d8 2f       	mov	r29, r24
    14a4:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <holder2.2145>
    14a8:	6c 2f       	mov	r22, r28
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	b3 d2       	rcall	.+1382   	; 0x1a18 <__floatunsisf>
    14b2:	9b 01       	movw	r18, r22
    14b4:	ac 01       	movw	r20, r24
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	80 e2       	ldi	r24, 0x20	; 32
    14bc:	91 e4       	ldi	r25, 0x41	; 65
    14be:	9d d3       	rcall	.+1850   	; 0x1bfa <pow>
    14c0:	4b 01       	movw	r8, r22
    14c2:	5c 01       	movw	r10, r24
    14c4:	6d 2f       	mov	r22, r29
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a7 d2       	rcall	.+1358   	; 0x1a1c <__floatsisf>
    14ce:	a5 01       	movw	r20, r10
    14d0:	94 01       	movw	r18, r8
    14d2:	30 d3       	rcall	.+1632   	; 0x1b34 <__mulsf3>
    14d4:	4b 01       	movw	r8, r22
    14d6:	5c 01       	movw	r10, r24
    14d8:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <num2.2148>
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9c d2       	rcall	.+1336   	; 0x1a1c <__floatsisf>
    14e4:	9b 01       	movw	r18, r22
    14e6:	ac 01       	movw	r20, r24
    14e8:	c5 01       	movw	r24, r10
    14ea:	b4 01       	movw	r22, r8
    14ec:	98 d1       	rcall	.+816    	; 0x181e <__addsf3>
    14ee:	68 d2       	rcall	.+1232   	; 0x19c0 <__fixunssfsi>
    14f0:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <num2.2148>
				holder2--;
    14f4:	c1 50       	subi	r28, 0x01	; 1
    14f6:	c0 93 4f 02 	sts	0x024F, r28	; 0x80024f <holder2.2145>
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			//LCD_WriteData('.');
			holder2 = 1;
			for(int j = place+1; j < count-1; j++)
    14fa:	0f 5f       	subi	r16, 0xFF	; 255
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	0c 15       	cp	r16, r12
    1500:	1d 05       	cpc	r17, r13
    1502:	54 f2       	brlt	.-108    	; 0x1498 <setting+0x5ac>
				holder = changetoInteger(number[j]);
				num2 = holder*pow(10, holder2) + num2;
				holder2--;
			}
			
			holderMoney = (float)num1 + ((float)num2/100);
    1504:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <num2.2148>
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	84 d2       	rcall	.+1288   	; 0x1a18 <__floatunsisf>
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	48 ec       	ldi	r20, 0xC8	; 200
    1516:	52 e4       	ldi	r21, 0x42	; 66
    1518:	e6 d1       	rcall	.+972    	; 0x18e6 <__divsf3>
    151a:	6b 01       	movw	r12, r22
    151c:	7c 01       	movw	r14, r24
    151e:	60 91 4d 02 	lds	r22, 0x024D	; 0x80024d <num1.2147>
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	77 d2       	rcall	.+1262   	; 0x1a18 <__floatunsisf>
    152a:	9b 01       	movw	r18, r22
    152c:	ac 01       	movw	r20, r24
    152e:	c7 01       	movw	r24, r14
    1530:	b6 01       	movw	r22, r12
    1532:	75 d1       	rcall	.+746    	; 0x181e <__addsf3>
    1534:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <whichAddr.2143>
    1538:	21 30       	cpi	r18, 0x01	; 1
    153a:	41 f4       	brne	.+16     	; 0x154c <setting+0x660>
			if(whichAddr == 1)
    153c:	ab 01       	movw	r20, r22
    153e:	bc 01       	movw	r22, r24
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
			{
				eeprom_write_float((float *)1, holderMoney);
    1544:	e3 d4       	rcall	.+2502   	; 0x1f0c <eeprom_write_dword>
    1546:	c7 e0       	ldi	r28, 0x07	; 7
    1548:	d0 e0       	ldi	r29, 0x00	; 0
    154a:	26 c0       	rjmp	.+76     	; 0x1598 <setting+0x6ac>
    154c:	22 30       	cpi	r18, 0x02	; 2
    154e:	59 f4       	brne	.+22     	; 0x1566 <setting+0x67a>
    1550:	ab 01       	movw	r20, r22
    1552:	bc 01       	movw	r22, r24
    1554:	8a e0       	ldi	r24, 0x0A	; 10
			}	
			else if(whichAddr == 2)
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	d9 d4       	rcall	.+2482   	; 0x1f0c <eeprom_write_dword>
			{
				eeprom_write_float((float *)10, holderMoney);
    155a:	c7 e0       	ldi	r28, 0x07	; 7
    155c:	d0 e0       	ldi	r29, 0x00	; 0
    155e:	1c c0       	rjmp	.+56     	; 0x1598 <setting+0x6ac>
    1560:	c1 e0       	ldi	r28, 0x01	; 1
    1562:	d0 e0       	ldi	r29, 0x00	; 0
    1564:	19 c0       	rjmp	.+50     	; 0x1598 <setting+0x6ac>
    1566:	c7 e0       	ldi	r28, 0x07	; 7
    1568:	d0 e0       	ldi	r29, 0x00	; 0
    156a:	16 c0       	rjmp	.+44     	; 0x1598 <setting+0x6ac>
	
	switch(state)
	{
		case startS:
		{
			state = pauseS;
    156c:	c0 e0       	ldi	r28, 0x00	; 0
    156e:	d0 e0       	ldi	r29, 0x00	; 0
    1570:	13 c0       	rjmp	.+38     	; 0x1598 <setting+0x6ac>
    1572:	c2 e0       	ldi	r28, 0x02	; 2
    1574:	d0 e0       	ldi	r29, 0x00	; 0
    1576:	10 c0       	rjmp	.+32     	; 0x1598 <setting+0x6ac>
			}
			break;
		}
		default:
		{
			state = startS;
    1578:	0e 94 60 02 	call	0x4c0	; 0x4c0 <GetKeypadKey>
    157c:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <key>
		case done:
		{
			key = GetKeypadKey();
			if(key == 'A')
			{
				state = opt;
    1580:	81 11       	cpse	r24, r1
    1582:	db ce       	rjmp	.-586    	; 0x133a <setting+0x44e>
		{
			break;
		}
		case codeSet:
		{
			key = GetKeypadKey();
    1584:	c3 e0       	ldi	r28, 0x03	; 3
    1586:	d0 e0       	ldi	r29, 0x00	; 0
    1588:	07 c0       	rjmp	.+14     	; 0x1598 <setting+0x6ac>
    158a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <GetKeypadKey>
			if(key !=  '\0')
    158e:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <key>
    1592:	81 11       	cpse	r24, r1
		default:
		{
			break;
		}
	}
	return state;
    1594:	02 cf       	rjmp	.-508    	; 0x139a <setting+0x4ae>
		{
			break;
		}
		case priceSet:
		{
			key = GetKeypadKey();
    1596:	19 cf       	rjmp	.-462    	; 0x13ca <setting+0x4de>
    1598:	ce 01       	movw	r24, r28
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
			if(key !=  '\0' && key != 'A' && key != 'B' && key!= 'C' && key != 'D')
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	ff 90       	pop	r15
		{
			break;
		}
	}
	return state;
}
    15a4:	ef 90       	pop	r14
    15a6:	df 90       	pop	r13
    15a8:	cf 90       	pop	r12
    15aa:	bf 90       	pop	r11
    15ac:	af 90       	pop	r10
    15ae:	9f 90       	pop	r9
    15b0:	8f 90       	pop	r8
    15b2:	7f 90       	pop	r7
    15b4:	6f 90       	pop	r6
    15b6:	5f 90       	pop	r5
    15b8:	4f 90       	pop	r4
    15ba:	08 95       	ret

000015bc <keypad>:
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	91 05       	cpc	r25, r1
    15c0:	69 f0       	breq	.+26     	; 0x15dc <keypad+0x20>
    15c2:	1c f4       	brge	.+6      	; 0x15ca <keypad+0xe>
    15c4:	89 2b       	or	r24, r25
    15c6:	39 f0       	breq	.+14     	; 0x15d6 <keypad+0x1a>

unsigned char count, x, y;
int keypad(int state)
{
	switch(state)
    15c8:	38 c0       	rjmp	.+112    	; 0x163a <keypad+0x7e>
    15ca:	82 30       	cpi	r24, 0x02	; 2
    15cc:	91 05       	cpc	r25, r1
    15ce:	69 f0       	breq	.+26     	; 0x15ea <keypad+0x2e>
    15d0:	03 97       	sbiw	r24, 0x03	; 3
    15d2:	91 f0       	breq	.+36     	; 0x15f8 <keypad+0x3c>
    15d4:	32 c0       	rjmp	.+100    	; 0x163a <keypad+0x7e>
	{
		case startK:
		{
			count = 0;
    15d6:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <count>
    15da:	17 c0       	rjmp	.+46     	; 0x160a <keypad+0x4e>
			state = wait;
			break;
		}
		case wait:
		{
			x = GetKeypadKey();
    15dc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <GetKeypadKey>
    15e0:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <x>
			if(x != '\0')
    15e4:	81 11       	cpse	r24, r1
    15e6:	34 c0       	rjmp	.+104    	; 0x1650 <keypad+0x94>
    15e8:	2e c0       	rjmp	.+92     	; 0x1646 <keypad+0x8a>
			}
			break;
		}
		case press:
		{
			y = GetKeypadKey();
    15ea:	0e 94 60 02 	call	0x4c0	; 0x4c0 <GetKeypadKey>
    15ee:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <y>
			if(y == '\0')
    15f2:	88 23       	and	r24, r24
    15f4:	91 f1       	breq	.+100    	; 0x165a <keypad+0x9e>
    15f6:	36 c0       	rjmp	.+108    	; 0x1664 <keypad+0xa8>
			}
			break;
		}
		case unpress:
		{
			key2 = x;
    15f8:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <x>
    15fc:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <key2>
			if(count == 9)
    1600:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <count>
    1604:	89 30       	cpi	r24, 0x09	; 9
    1606:	89 f4       	brne	.+34     	; 0x162a <keypad+0x6e>
    1608:	1b c0       	rjmp	.+54     	; 0x1640 <keypad+0x84>
		{
			break;
		}
		case wait:
		{
			count++;
    160a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <count>
    160e:	8f 5f       	subi	r24, 0xFF	; 255
    1610:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <count>
			break;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	08 95       	ret
		}
		case press:
		{
			count++;
    161a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <count>
    161e:	8f 5f       	subi	r24, 0xFF	; 255
    1620:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <count>
			break;
    1624:	82 e0       	ldi	r24, 0x02	; 2
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	08 95       	ret
		}
		case unpress:
		{
			count++;
    162a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <count>
    162e:	8f 5f       	subi	r24, 0xFF	; 255
    1630:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <count>
			break;
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	08 95       	ret
			}
			break;
		}
		default:
		{
			state = startK;
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	08 95       	ret
			break;
		}
		case unpress:
		{
			count++;
			break;
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
		default:
		{
			break;
		}
	}
	return state;
    1644:	08 95       	ret
			x = GetKeypadKey();
			if(x != '\0')
			{
				state = press;
			}
			if(count == 9)
    1646:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <count>
    164a:	89 30       	cpi	r24, 0x09	; 9
    164c:	c9 f3       	breq	.-14     	; 0x1640 <keypad+0x84>
    164e:	dd cf       	rjmp	.-70     	; 0x160a <keypad+0x4e>
    1650:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <count>
    1654:	89 30       	cpi	r24, 0x09	; 9
    1656:	09 f7       	brne	.-62     	; 0x161a <keypad+0x5e>
    1658:	f3 cf       	rjmp	.-26     	; 0x1640 <keypad+0x84>
			y = GetKeypadKey();
			if(y == '\0')
			{
				state = unpress;
			}
			if(count == 9)
    165a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <count>
    165e:	89 30       	cpi	r24, 0x09	; 9
    1660:	79 f3       	breq	.-34     	; 0x1640 <keypad+0x84>
    1662:	e3 cf       	rjmp	.-58     	; 0x162a <keypad+0x6e>
    1664:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <count>
    1668:	89 30       	cpi	r24, 0x09	; 9
    166a:	b9 f6       	brne	.-82     	; 0x161a <keypad+0x5e>
    166c:	e9 cf       	rjmp	.-46     	; 0x1640 <keypad+0x84>

0000166e <main>:
	}
	return state;
}
	
int main()
{
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	62 97       	sbiw	r28, 0x12	; 18
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	81 b9       	out	0x01, r24	; 1
    1686:	12 b8       	out	0x02, r1	; 2
	DDRD = 0xFF; PORTD = 0x00;
    1688:	8a b9       	out	0x0a, r24	; 10
    168a:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0xFF; PORTB = 0x00;
    168c:	84 b9       	out	0x04, r24	; 4
    168e:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F;
    1690:	80 ef       	ldi	r24, 0xF0	; 240
    1692:	87 b9       	out	0x07, r24	; 7
    1694:	8f e0       	ldi	r24, 0x0F	; 15
    1696:	88 b9       	out	0x08, r24	; 8
	unsigned long int SMTick5_period = keypadperiod/100;

	
	//Declare an array of tasks
	static task j,a,b,c,e;
	task *tasks[] = {&j, &a, &b, &c, &e};
    1698:	8a e0       	ldi	r24, 0x0A	; 10
    169a:	e4 e0       	ldi	r30, 0x04	; 4
    169c:	f1 e0       	ldi	r31, 0x01	; 1
    169e:	de 01       	movw	r26, r28
    16a0:	11 96       	adiw	r26, 0x01	; 1
    16a2:	01 90       	ld	r0, Z+
    16a4:	0d 92       	st	X+, r0
    16a6:	8a 95       	dec	r24
    16a8:	e1 f7       	brne	.-8      	; 0x16a2 <main+0x34>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	// Task 1
	j.state = startL;//Task initial state.
    16aa:	e8 e3       	ldi	r30, 0x38	; 56
    16ac:	f2 e0       	ldi	r31, 0x02	; 2
    16ae:	10 82       	st	Z, r1
	j.period = SMTick0_period;//Task Period.
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a0 e0       	ldi	r26, 0x00	; 0
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	81 83       	std	Z+1, r24	; 0x01
    16ba:	92 83       	std	Z+2, r25	; 0x02
    16bc:	a3 83       	std	Z+3, r26	; 0x03
    16be:	b4 83       	std	Z+4, r27	; 0x04
	j.elapsedTime = SMTick0_period;//Task current elapsed time.
    16c0:	85 83       	std	Z+5, r24	; 0x05
    16c2:	96 83       	std	Z+6, r25	; 0x06
    16c4:	a7 83       	std	Z+7, r26	; 0x07
    16c6:	b0 87       	std	Z+8, r27	; 0x08
	j.TickFct = &Lock;//Function pointer for the tick.
    16c8:	8e ea       	ldi	r24, 0xAE	; 174
    16ca:	92 e0       	ldi	r25, 0x02	; 2
    16cc:	92 87       	std	Z+10, r25	; 0x0a
    16ce:	81 87       	std	Z+9, r24	; 0x09
	
	a.state = startM;//Task initial state.
    16d0:	ed e2       	ldi	r30, 0x2D	; 45
    16d2:	f2 e0       	ldi	r31, 0x02	; 2
    16d4:	10 82       	st	Z, r1
	a.period = SMTick1_period;//Task Period.
    16d6:	8a e0       	ldi	r24, 0x0A	; 10
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a0 e0       	ldi	r26, 0x00	; 0
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	81 83       	std	Z+1, r24	; 0x01
    16e0:	92 83       	std	Z+2, r25	; 0x02
    16e2:	a3 83       	std	Z+3, r26	; 0x03
    16e4:	b4 83       	std	Z+4, r27	; 0x04
	a.elapsedTime = SMTick1_period;//Task current elapsed time.
    16e6:	85 83       	std	Z+5, r24	; 0x05
    16e8:	96 83       	std	Z+6, r25	; 0x06
    16ea:	a7 83       	std	Z+7, r26	; 0x07
    16ec:	b0 87       	std	Z+8, r27	; 0x08
	a.TickFct = &Menu;//Function pointer for the tick.
    16ee:	81 eb       	ldi	r24, 0xB1	; 177
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	92 87       	std	Z+10, r25	; 0x0a
    16f4:	81 87       	std	Z+9, r24	; 0x09
	
	// Task 2
	b.state = startT;//Task initial state.
    16f6:	e2 e2       	ldi	r30, 0x22	; 34
    16f8:	f2 e0       	ldi	r31, 0x02	; 2
    16fa:	10 82       	st	Z, r1
	b.period = SMTick2_period;//Task Period.
    16fc:	82 e0       	ldi	r24, 0x02	; 2
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 e0       	ldi	r26, 0x00	; 0
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	81 83       	std	Z+1, r24	; 0x01
    1706:	92 83       	std	Z+2, r25	; 0x02
    1708:	a3 83       	std	Z+3, r26	; 0x03
    170a:	b4 83       	std	Z+4, r27	; 0x04
	b.elapsedTime = SMTick2_period;//Task current elapsed time.
    170c:	85 83       	std	Z+5, r24	; 0x05
    170e:	96 83       	std	Z+6, r25	; 0x06
    1710:	a7 83       	std	Z+7, r26	; 0x07
    1712:	b0 87       	std	Z+8, r27	; 0x08
	b.TickFct = &trans;//Function pointer for the tick.
    1714:	23 e7       	ldi	r18, 0x73	; 115
    1716:	33 e0       	ldi	r19, 0x03	; 3
    1718:	32 87       	std	Z+10, r19	; 0x0a
    171a:	21 87       	std	Z+9, r18	; 0x09
	
	c.state = startS;//Task initial state.
    171c:	e7 e1       	ldi	r30, 0x17	; 23
    171e:	f2 e0       	ldi	r31, 0x02	; 2
    1720:	10 82       	st	Z, r1
	c.period = SMTick3_period;//Task Period.
    1722:	81 83       	std	Z+1, r24	; 0x01
    1724:	92 83       	std	Z+2, r25	; 0x02
    1726:	a3 83       	std	Z+3, r26	; 0x03
    1728:	b4 83       	std	Z+4, r27	; 0x04
	c.elapsedTime = SMTick3_period;//Task current elapsed time.
    172a:	85 83       	std	Z+5, r24	; 0x05
    172c:	96 83       	std	Z+6, r25	; 0x06
    172e:	a7 83       	std	Z+7, r26	; 0x07
    1730:	b0 87       	std	Z+8, r27	; 0x08
	c.TickFct = &setting;//Function pointer for the tick.
    1732:	86 e7       	ldi	r24, 0x76	; 118
    1734:	97 e0       	ldi	r25, 0x07	; 7
    1736:	92 87       	std	Z+10, r25	; 0x0a
    1738:	81 87       	std	Z+9, r24	; 0x09
	
	e.state = startK;//Task initial state.
    173a:	ec e0       	ldi	r30, 0x0C	; 12
    173c:	f2 e0       	ldi	r31, 0x02	; 2
    173e:	10 82       	st	Z, r1
	e.period = SMTick5_period;//Task Period.
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e0       	ldi	r26, 0x00	; 0
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	81 83       	std	Z+1, r24	; 0x01
    174a:	92 83       	std	Z+2, r25	; 0x02
    174c:	a3 83       	std	Z+3, r26	; 0x03
    174e:	b4 83       	std	Z+4, r27	; 0x04
	e.elapsedTime = SMTick5_period;//Task current elapsed time.
    1750:	85 83       	std	Z+5, r24	; 0x05
    1752:	96 83       	std	Z+6, r25	; 0x06
    1754:	a7 83       	std	Z+7, r26	; 0x07
    1756:	b0 87       	std	Z+8, r27	; 0x08
	e.TickFct = &keypad;//Function pointer for the tick.
    1758:	8e ed       	ldi	r24, 0xDE	; 222
    175a:	9a e0       	ldi	r25, 0x0A	; 10
    175c:	92 87       	std	Z+10, r25	; 0x0a
    175e:	81 87       	std	Z+9, r24	; 0x09
	
	unsigned char eruo[] = {0x00,0x0E,0x09,0x1E,0x1E,0x09,0x0E,0x00};
    1760:	88 e0       	ldi	r24, 0x08	; 8
    1762:	ee e0       	ldi	r30, 0x0E	; 14
    1764:	f1 e0       	ldi	r31, 0x01	; 1
    1766:	de 01       	movw	r26, r28
    1768:	1b 96       	adiw	r26, 0x0b	; 11
    176a:	01 90       	ld	r0, Z+
    176c:	0d 92       	st	X+, r0
    176e:	8a 95       	dec	r24
    1770:	e1 f7       	brne	.-8      	; 0x176a <main+0xfc>
	
	LCDcustomChar(1, eruo);
    1772:	be 01       	movw	r22, r28
    1774:	65 5f       	subi	r22, 0xF5	; 245
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCDcustomChar>


	
	// Set the timer and turn it on
	TimerSet(100);
    177e:	64 e6       	ldi	r22, 0x64	; 100
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 cd 00 	call	0x19a	; 0x19a <TimerSet>
	TimerOn();
    178a:	0e 94 de 00 	call	0x1bc	; 0x1bc <TimerOn>
	
	LCD_init();
    178e:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_init>
	LCD_ClearScreen();
    1792:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_ClearScreen>
    1796:	7e 01       	movw	r14, r28
    1798:	8b e0       	ldi	r24, 0x0B	; 11
    179a:	e8 0e       	add	r14, r24
    179c:	f1 1c       	adc	r15, r1
    179e:	de 01       	movw	r26, r28
    17a0:	11 96       	adiw	r26, 0x01	; 1
    17a2:	6d 01       	movw	r12, r26
	while(1) {
		
				// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
    17a4:	f6 01       	movw	r30, r12
    17a6:	01 91       	ld	r16, Z+
    17a8:	11 91       	ld	r17, Z+
    17aa:	6f 01       	movw	r12, r30
    17ac:	d8 01       	movw	r26, r16
    17ae:	15 96       	adiw	r26, 0x05	; 5
    17b0:	4d 91       	ld	r20, X+
    17b2:	5d 91       	ld	r21, X+
    17b4:	6d 91       	ld	r22, X+
    17b6:	7c 91       	ld	r23, X
    17b8:	18 97       	sbiw	r26, 0x08	; 8
    17ba:	11 96       	adiw	r26, 0x01	; 1
    17bc:	8d 91       	ld	r24, X+
    17be:	9d 91       	ld	r25, X+
    17c0:	0d 90       	ld	r0, X+
    17c2:	bc 91       	ld	r27, X
    17c4:	a0 2d       	mov	r26, r0
    17c6:	48 17       	cp	r20, r24
    17c8:	59 07       	cpc	r21, r25
    17ca:	6a 07       	cpc	r22, r26
    17cc:	7b 07       	cpc	r23, r27
    17ce:	81 f4       	brne	.+32     	; 0x17f0 <main+0x182>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
    17d0:	f8 01       	movw	r30, r16
    17d2:	80 81       	ld	r24, Z
    17d4:	01 84       	ldd	r0, Z+9	; 0x09
    17d6:	f2 85       	ldd	r31, Z+10	; 0x0a
    17d8:	e0 2d       	mov	r30, r0
    17da:	08 2e       	mov	r0, r24
    17dc:	00 0c       	add	r0, r0
    17de:	99 0b       	sbc	r25, r25
    17e0:	09 95       	icall
    17e2:	d8 01       	movw	r26, r16
    17e4:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
    17e6:	f8 01       	movw	r30, r16
    17e8:	15 82       	std	Z+5, r1	; 0x05
    17ea:	16 82       	std	Z+6, r1	; 0x06
    17ec:	17 82       	std	Z+7, r1	; 0x07
    17ee:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
    17f0:	f8 01       	movw	r30, r16
    17f2:	85 81       	ldd	r24, Z+5	; 0x05
    17f4:	96 81       	ldd	r25, Z+6	; 0x06
    17f6:	a7 81       	ldd	r26, Z+7	; 0x07
    17f8:	b0 85       	ldd	r27, Z+8	; 0x08
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	a1 1d       	adc	r26, r1
    17fe:	b1 1d       	adc	r27, r1
    1800:	85 83       	std	Z+5, r24	; 0x05
    1802:	96 83       	std	Z+6, r25	; 0x06
    1804:	a7 83       	std	Z+7, r26	; 0x07
    1806:	b0 87       	std	Z+8, r27	; 0x08
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		
				// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
    1808:	ce 14       	cp	r12, r14
    180a:	df 04       	cpc	r13, r15
    180c:	59 f6       	brne	.-106    	; 0x17a4 <main+0x136>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
    180e:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <TimerFlag>
    1812:	88 23       	and	r24, r24
    1814:	e1 f3       	breq	.-8      	; 0x180e <main+0x1a0>
		TimerFlag = 0;
    1816:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <TimerFlag>
	}
    181a:	c1 cf       	rjmp	.-126    	; 0x179e <main+0x130>

0000181c <__subsf3>:
    181c:	50 58       	subi	r21, 0x80	; 128

0000181e <__addsf3>:
    181e:	bb 27       	eor	r27, r27
    1820:	aa 27       	eor	r26, r26
    1822:	0e d0       	rcall	.+28     	; 0x1840 <__addsf3x>
    1824:	4d c1       	rjmp	.+666    	; 0x1ac0 <__fp_round>
    1826:	3e d1       	rcall	.+636    	; 0x1aa4 <__fp_pscA>
    1828:	30 f0       	brcs	.+12     	; 0x1836 <__addsf3+0x18>
    182a:	43 d1       	rcall	.+646    	; 0x1ab2 <__fp_pscB>
    182c:	20 f0       	brcs	.+8      	; 0x1836 <__addsf3+0x18>
    182e:	31 f4       	brne	.+12     	; 0x183c <__addsf3+0x1e>
    1830:	9f 3f       	cpi	r25, 0xFF	; 255
    1832:	11 f4       	brne	.+4      	; 0x1838 <__addsf3+0x1a>
    1834:	1e f4       	brtc	.+6      	; 0x183c <__addsf3+0x1e>
    1836:	33 c1       	rjmp	.+614    	; 0x1a9e <__fp_nan>
    1838:	0e f4       	brtc	.+2      	; 0x183c <__addsf3+0x1e>
    183a:	e0 95       	com	r30
    183c:	e7 fb       	bst	r30, 7
    183e:	29 c1       	rjmp	.+594    	; 0x1a92 <__fp_inf>

00001840 <__addsf3x>:
    1840:	e9 2f       	mov	r30, r25
    1842:	4f d1       	rcall	.+670    	; 0x1ae2 <__fp_split3>
    1844:	80 f3       	brcs	.-32     	; 0x1826 <__addsf3+0x8>
    1846:	ba 17       	cp	r27, r26
    1848:	62 07       	cpc	r22, r18
    184a:	73 07       	cpc	r23, r19
    184c:	84 07       	cpc	r24, r20
    184e:	95 07       	cpc	r25, r21
    1850:	18 f0       	brcs	.+6      	; 0x1858 <__addsf3x+0x18>
    1852:	71 f4       	brne	.+28     	; 0x1870 <__addsf3x+0x30>
    1854:	9e f5       	brtc	.+102    	; 0x18bc <__addsf3x+0x7c>
    1856:	67 c1       	rjmp	.+718    	; 0x1b26 <__fp_zero>
    1858:	0e f4       	brtc	.+2      	; 0x185c <__addsf3x+0x1c>
    185a:	e0 95       	com	r30
    185c:	0b 2e       	mov	r0, r27
    185e:	ba 2f       	mov	r27, r26
    1860:	a0 2d       	mov	r26, r0
    1862:	0b 01       	movw	r0, r22
    1864:	b9 01       	movw	r22, r18
    1866:	90 01       	movw	r18, r0
    1868:	0c 01       	movw	r0, r24
    186a:	ca 01       	movw	r24, r20
    186c:	a0 01       	movw	r20, r0
    186e:	11 24       	eor	r1, r1
    1870:	ff 27       	eor	r31, r31
    1872:	59 1b       	sub	r21, r25
    1874:	99 f0       	breq	.+38     	; 0x189c <__addsf3x+0x5c>
    1876:	59 3f       	cpi	r21, 0xF9	; 249
    1878:	50 f4       	brcc	.+20     	; 0x188e <__addsf3x+0x4e>
    187a:	50 3e       	cpi	r21, 0xE0	; 224
    187c:	68 f1       	brcs	.+90     	; 0x18d8 <__addsf3x+0x98>
    187e:	1a 16       	cp	r1, r26
    1880:	f0 40       	sbci	r31, 0x00	; 0
    1882:	a2 2f       	mov	r26, r18
    1884:	23 2f       	mov	r18, r19
    1886:	34 2f       	mov	r19, r20
    1888:	44 27       	eor	r20, r20
    188a:	58 5f       	subi	r21, 0xF8	; 248
    188c:	f3 cf       	rjmp	.-26     	; 0x1874 <__addsf3x+0x34>
    188e:	46 95       	lsr	r20
    1890:	37 95       	ror	r19
    1892:	27 95       	ror	r18
    1894:	a7 95       	ror	r26
    1896:	f0 40       	sbci	r31, 0x00	; 0
    1898:	53 95       	inc	r21
    189a:	c9 f7       	brne	.-14     	; 0x188e <__addsf3x+0x4e>
    189c:	7e f4       	brtc	.+30     	; 0x18bc <__addsf3x+0x7c>
    189e:	1f 16       	cp	r1, r31
    18a0:	ba 0b       	sbc	r27, r26
    18a2:	62 0b       	sbc	r22, r18
    18a4:	73 0b       	sbc	r23, r19
    18a6:	84 0b       	sbc	r24, r20
    18a8:	ba f0       	brmi	.+46     	; 0x18d8 <__addsf3x+0x98>
    18aa:	91 50       	subi	r25, 0x01	; 1
    18ac:	a1 f0       	breq	.+40     	; 0x18d6 <__addsf3x+0x96>
    18ae:	ff 0f       	add	r31, r31
    18b0:	bb 1f       	adc	r27, r27
    18b2:	66 1f       	adc	r22, r22
    18b4:	77 1f       	adc	r23, r23
    18b6:	88 1f       	adc	r24, r24
    18b8:	c2 f7       	brpl	.-16     	; 0x18aa <__addsf3x+0x6a>
    18ba:	0e c0       	rjmp	.+28     	; 0x18d8 <__addsf3x+0x98>
    18bc:	ba 0f       	add	r27, r26
    18be:	62 1f       	adc	r22, r18
    18c0:	73 1f       	adc	r23, r19
    18c2:	84 1f       	adc	r24, r20
    18c4:	48 f4       	brcc	.+18     	; 0x18d8 <__addsf3x+0x98>
    18c6:	87 95       	ror	r24
    18c8:	77 95       	ror	r23
    18ca:	67 95       	ror	r22
    18cc:	b7 95       	ror	r27
    18ce:	f7 95       	ror	r31
    18d0:	9e 3f       	cpi	r25, 0xFE	; 254
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <__addsf3x+0x96>
    18d4:	b3 cf       	rjmp	.-154    	; 0x183c <__addsf3+0x1e>
    18d6:	93 95       	inc	r25
    18d8:	88 0f       	add	r24, r24
    18da:	08 f0       	brcs	.+2      	; 0x18de <__addsf3x+0x9e>
    18dc:	99 27       	eor	r25, r25
    18de:	ee 0f       	add	r30, r30
    18e0:	97 95       	ror	r25
    18e2:	87 95       	ror	r24
    18e4:	08 95       	ret

000018e6 <__divsf3>:
    18e6:	0c d0       	rcall	.+24     	; 0x1900 <__divsf3x>
    18e8:	eb c0       	rjmp	.+470    	; 0x1ac0 <__fp_round>
    18ea:	e3 d0       	rcall	.+454    	; 0x1ab2 <__fp_pscB>
    18ec:	40 f0       	brcs	.+16     	; 0x18fe <__divsf3+0x18>
    18ee:	da d0       	rcall	.+436    	; 0x1aa4 <__fp_pscA>
    18f0:	30 f0       	brcs	.+12     	; 0x18fe <__divsf3+0x18>
    18f2:	21 f4       	brne	.+8      	; 0x18fc <__divsf3+0x16>
    18f4:	5f 3f       	cpi	r21, 0xFF	; 255
    18f6:	19 f0       	breq	.+6      	; 0x18fe <__divsf3+0x18>
    18f8:	cc c0       	rjmp	.+408    	; 0x1a92 <__fp_inf>
    18fa:	51 11       	cpse	r21, r1
    18fc:	15 c1       	rjmp	.+554    	; 0x1b28 <__fp_szero>
    18fe:	cf c0       	rjmp	.+414    	; 0x1a9e <__fp_nan>

00001900 <__divsf3x>:
    1900:	f0 d0       	rcall	.+480    	; 0x1ae2 <__fp_split3>
    1902:	98 f3       	brcs	.-26     	; 0x18ea <__divsf3+0x4>

00001904 <__divsf3_pse>:
    1904:	99 23       	and	r25, r25
    1906:	c9 f3       	breq	.-14     	; 0x18fa <__divsf3+0x14>
    1908:	55 23       	and	r21, r21
    190a:	b1 f3       	breq	.-20     	; 0x18f8 <__divsf3+0x12>
    190c:	95 1b       	sub	r25, r21
    190e:	55 0b       	sbc	r21, r21
    1910:	bb 27       	eor	r27, r27
    1912:	aa 27       	eor	r26, r26
    1914:	62 17       	cp	r22, r18
    1916:	73 07       	cpc	r23, r19
    1918:	84 07       	cpc	r24, r20
    191a:	38 f0       	brcs	.+14     	; 0x192a <__divsf3_pse+0x26>
    191c:	9f 5f       	subi	r25, 0xFF	; 255
    191e:	5f 4f       	sbci	r21, 0xFF	; 255
    1920:	22 0f       	add	r18, r18
    1922:	33 1f       	adc	r19, r19
    1924:	44 1f       	adc	r20, r20
    1926:	aa 1f       	adc	r26, r26
    1928:	a9 f3       	breq	.-22     	; 0x1914 <__divsf3_pse+0x10>
    192a:	33 d0       	rcall	.+102    	; 0x1992 <__divsf3_pse+0x8e>
    192c:	0e 2e       	mov	r0, r30
    192e:	3a f0       	brmi	.+14     	; 0x193e <__divsf3_pse+0x3a>
    1930:	e0 e8       	ldi	r30, 0x80	; 128
    1932:	30 d0       	rcall	.+96     	; 0x1994 <__divsf3_pse+0x90>
    1934:	91 50       	subi	r25, 0x01	; 1
    1936:	50 40       	sbci	r21, 0x00	; 0
    1938:	e6 95       	lsr	r30
    193a:	00 1c       	adc	r0, r0
    193c:	ca f7       	brpl	.-14     	; 0x1930 <__divsf3_pse+0x2c>
    193e:	29 d0       	rcall	.+82     	; 0x1992 <__divsf3_pse+0x8e>
    1940:	fe 2f       	mov	r31, r30
    1942:	27 d0       	rcall	.+78     	; 0x1992 <__divsf3_pse+0x8e>
    1944:	66 0f       	add	r22, r22
    1946:	77 1f       	adc	r23, r23
    1948:	88 1f       	adc	r24, r24
    194a:	bb 1f       	adc	r27, r27
    194c:	26 17       	cp	r18, r22
    194e:	37 07       	cpc	r19, r23
    1950:	48 07       	cpc	r20, r24
    1952:	ab 07       	cpc	r26, r27
    1954:	b0 e8       	ldi	r27, 0x80	; 128
    1956:	09 f0       	breq	.+2      	; 0x195a <__divsf3_pse+0x56>
    1958:	bb 0b       	sbc	r27, r27
    195a:	80 2d       	mov	r24, r0
    195c:	bf 01       	movw	r22, r30
    195e:	ff 27       	eor	r31, r31
    1960:	93 58       	subi	r25, 0x83	; 131
    1962:	5f 4f       	sbci	r21, 0xFF	; 255
    1964:	2a f0       	brmi	.+10     	; 0x1970 <__divsf3_pse+0x6c>
    1966:	9e 3f       	cpi	r25, 0xFE	; 254
    1968:	51 05       	cpc	r21, r1
    196a:	68 f0       	brcs	.+26     	; 0x1986 <__divsf3_pse+0x82>
    196c:	92 c0       	rjmp	.+292    	; 0x1a92 <__fp_inf>
    196e:	dc c0       	rjmp	.+440    	; 0x1b28 <__fp_szero>
    1970:	5f 3f       	cpi	r21, 0xFF	; 255
    1972:	ec f3       	brlt	.-6      	; 0x196e <__divsf3_pse+0x6a>
    1974:	98 3e       	cpi	r25, 0xE8	; 232
    1976:	dc f3       	brlt	.-10     	; 0x196e <__divsf3_pse+0x6a>
    1978:	86 95       	lsr	r24
    197a:	77 95       	ror	r23
    197c:	67 95       	ror	r22
    197e:	b7 95       	ror	r27
    1980:	f7 95       	ror	r31
    1982:	9f 5f       	subi	r25, 0xFF	; 255
    1984:	c9 f7       	brne	.-14     	; 0x1978 <__divsf3_pse+0x74>
    1986:	88 0f       	add	r24, r24
    1988:	91 1d       	adc	r25, r1
    198a:	96 95       	lsr	r25
    198c:	87 95       	ror	r24
    198e:	97 f9       	bld	r25, 7
    1990:	08 95       	ret
    1992:	e1 e0       	ldi	r30, 0x01	; 1
    1994:	66 0f       	add	r22, r22
    1996:	77 1f       	adc	r23, r23
    1998:	88 1f       	adc	r24, r24
    199a:	bb 1f       	adc	r27, r27
    199c:	62 17       	cp	r22, r18
    199e:	73 07       	cpc	r23, r19
    19a0:	84 07       	cpc	r24, r20
    19a2:	ba 07       	cpc	r27, r26
    19a4:	20 f0       	brcs	.+8      	; 0x19ae <__divsf3_pse+0xaa>
    19a6:	62 1b       	sub	r22, r18
    19a8:	73 0b       	sbc	r23, r19
    19aa:	84 0b       	sbc	r24, r20
    19ac:	ba 0b       	sbc	r27, r26
    19ae:	ee 1f       	adc	r30, r30
    19b0:	88 f7       	brcc	.-30     	; 0x1994 <__divsf3_pse+0x90>
    19b2:	e0 95       	com	r30
    19b4:	08 95       	ret

000019b6 <__fixsfsi>:
    19b6:	04 d0       	rcall	.+8      	; 0x19c0 <__fixunssfsi>
    19b8:	68 94       	set
    19ba:	b1 11       	cpse	r27, r1
    19bc:	b5 c0       	rjmp	.+362    	; 0x1b28 <__fp_szero>
    19be:	08 95       	ret

000019c0 <__fixunssfsi>:
    19c0:	98 d0       	rcall	.+304    	; 0x1af2 <__fp_splitA>
    19c2:	88 f0       	brcs	.+34     	; 0x19e6 <__fixunssfsi+0x26>
    19c4:	9f 57       	subi	r25, 0x7F	; 127
    19c6:	90 f0       	brcs	.+36     	; 0x19ec <__fixunssfsi+0x2c>
    19c8:	b9 2f       	mov	r27, r25
    19ca:	99 27       	eor	r25, r25
    19cc:	b7 51       	subi	r27, 0x17	; 23
    19ce:	a0 f0       	brcs	.+40     	; 0x19f8 <__fixunssfsi+0x38>
    19d0:	d1 f0       	breq	.+52     	; 0x1a06 <__fixunssfsi+0x46>
    19d2:	66 0f       	add	r22, r22
    19d4:	77 1f       	adc	r23, r23
    19d6:	88 1f       	adc	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	1a f0       	brmi	.+6      	; 0x19e2 <__fixunssfsi+0x22>
    19dc:	ba 95       	dec	r27
    19de:	c9 f7       	brne	.-14     	; 0x19d2 <__fixunssfsi+0x12>
    19e0:	12 c0       	rjmp	.+36     	; 0x1a06 <__fixunssfsi+0x46>
    19e2:	b1 30       	cpi	r27, 0x01	; 1
    19e4:	81 f0       	breq	.+32     	; 0x1a06 <__fixunssfsi+0x46>
    19e6:	9f d0       	rcall	.+318    	; 0x1b26 <__fp_zero>
    19e8:	b1 e0       	ldi	r27, 0x01	; 1
    19ea:	08 95       	ret
    19ec:	9c c0       	rjmp	.+312    	; 0x1b26 <__fp_zero>
    19ee:	67 2f       	mov	r22, r23
    19f0:	78 2f       	mov	r23, r24
    19f2:	88 27       	eor	r24, r24
    19f4:	b8 5f       	subi	r27, 0xF8	; 248
    19f6:	39 f0       	breq	.+14     	; 0x1a06 <__fixunssfsi+0x46>
    19f8:	b9 3f       	cpi	r27, 0xF9	; 249
    19fa:	cc f3       	brlt	.-14     	; 0x19ee <__fixunssfsi+0x2e>
    19fc:	86 95       	lsr	r24
    19fe:	77 95       	ror	r23
    1a00:	67 95       	ror	r22
    1a02:	b3 95       	inc	r27
    1a04:	d9 f7       	brne	.-10     	; 0x19fc <__fixunssfsi+0x3c>
    1a06:	3e f4       	brtc	.+14     	; 0x1a16 <__fixunssfsi+0x56>
    1a08:	90 95       	com	r25
    1a0a:	80 95       	com	r24
    1a0c:	70 95       	com	r23
    1a0e:	61 95       	neg	r22
    1a10:	7f 4f       	sbci	r23, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	08 95       	ret

00001a18 <__floatunsisf>:
    1a18:	e8 94       	clt
    1a1a:	09 c0       	rjmp	.+18     	; 0x1a2e <__floatsisf+0x12>

00001a1c <__floatsisf>:
    1a1c:	97 fb       	bst	r25, 7
    1a1e:	3e f4       	brtc	.+14     	; 0x1a2e <__floatsisf+0x12>
    1a20:	90 95       	com	r25
    1a22:	80 95       	com	r24
    1a24:	70 95       	com	r23
    1a26:	61 95       	neg	r22
    1a28:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	99 23       	and	r25, r25
    1a30:	a9 f0       	breq	.+42     	; 0x1a5c <__floatsisf+0x40>
    1a32:	f9 2f       	mov	r31, r25
    1a34:	96 e9       	ldi	r25, 0x96	; 150
    1a36:	bb 27       	eor	r27, r27
    1a38:	93 95       	inc	r25
    1a3a:	f6 95       	lsr	r31
    1a3c:	87 95       	ror	r24
    1a3e:	77 95       	ror	r23
    1a40:	67 95       	ror	r22
    1a42:	b7 95       	ror	r27
    1a44:	f1 11       	cpse	r31, r1
    1a46:	f8 cf       	rjmp	.-16     	; 0x1a38 <__floatsisf+0x1c>
    1a48:	fa f4       	brpl	.+62     	; 0x1a88 <__floatsisf+0x6c>
    1a4a:	bb 0f       	add	r27, r27
    1a4c:	11 f4       	brne	.+4      	; 0x1a52 <__floatsisf+0x36>
    1a4e:	60 ff       	sbrs	r22, 0
    1a50:	1b c0       	rjmp	.+54     	; 0x1a88 <__floatsisf+0x6c>
    1a52:	6f 5f       	subi	r22, 0xFF	; 255
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	8f 4f       	sbci	r24, 0xFF	; 255
    1a58:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5a:	16 c0       	rjmp	.+44     	; 0x1a88 <__floatsisf+0x6c>
    1a5c:	88 23       	and	r24, r24
    1a5e:	11 f0       	breq	.+4      	; 0x1a64 <__floatsisf+0x48>
    1a60:	96 e9       	ldi	r25, 0x96	; 150
    1a62:	11 c0       	rjmp	.+34     	; 0x1a86 <__floatsisf+0x6a>
    1a64:	77 23       	and	r23, r23
    1a66:	21 f0       	breq	.+8      	; 0x1a70 <__floatsisf+0x54>
    1a68:	9e e8       	ldi	r25, 0x8E	; 142
    1a6a:	87 2f       	mov	r24, r23
    1a6c:	76 2f       	mov	r23, r22
    1a6e:	05 c0       	rjmp	.+10     	; 0x1a7a <__floatsisf+0x5e>
    1a70:	66 23       	and	r22, r22
    1a72:	71 f0       	breq	.+28     	; 0x1a90 <__floatsisf+0x74>
    1a74:	96 e8       	ldi	r25, 0x86	; 134
    1a76:	86 2f       	mov	r24, r22
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	2a f0       	brmi	.+10     	; 0x1a88 <__floatsisf+0x6c>
    1a7e:	9a 95       	dec	r25
    1a80:	66 0f       	add	r22, r22
    1a82:	77 1f       	adc	r23, r23
    1a84:	88 1f       	adc	r24, r24
    1a86:	da f7       	brpl	.-10     	; 0x1a7e <__floatsisf+0x62>
    1a88:	88 0f       	add	r24, r24
    1a8a:	96 95       	lsr	r25
    1a8c:	87 95       	ror	r24
    1a8e:	97 f9       	bld	r25, 7
    1a90:	08 95       	ret

00001a92 <__fp_inf>:
    1a92:	97 f9       	bld	r25, 7
    1a94:	9f 67       	ori	r25, 0x7F	; 127
    1a96:	80 e8       	ldi	r24, 0x80	; 128
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	08 95       	ret

00001a9e <__fp_nan>:
    1a9e:	9f ef       	ldi	r25, 0xFF	; 255
    1aa0:	80 ec       	ldi	r24, 0xC0	; 192
    1aa2:	08 95       	ret

00001aa4 <__fp_pscA>:
    1aa4:	00 24       	eor	r0, r0
    1aa6:	0a 94       	dec	r0
    1aa8:	16 16       	cp	r1, r22
    1aaa:	17 06       	cpc	r1, r23
    1aac:	18 06       	cpc	r1, r24
    1aae:	09 06       	cpc	r0, r25
    1ab0:	08 95       	ret

00001ab2 <__fp_pscB>:
    1ab2:	00 24       	eor	r0, r0
    1ab4:	0a 94       	dec	r0
    1ab6:	12 16       	cp	r1, r18
    1ab8:	13 06       	cpc	r1, r19
    1aba:	14 06       	cpc	r1, r20
    1abc:	05 06       	cpc	r0, r21
    1abe:	08 95       	ret

00001ac0 <__fp_round>:
    1ac0:	09 2e       	mov	r0, r25
    1ac2:	03 94       	inc	r0
    1ac4:	00 0c       	add	r0, r0
    1ac6:	11 f4       	brne	.+4      	; 0x1acc <__fp_round+0xc>
    1ac8:	88 23       	and	r24, r24
    1aca:	52 f0       	brmi	.+20     	; 0x1ae0 <__fp_round+0x20>
    1acc:	bb 0f       	add	r27, r27
    1ace:	40 f4       	brcc	.+16     	; 0x1ae0 <__fp_round+0x20>
    1ad0:	bf 2b       	or	r27, r31
    1ad2:	11 f4       	brne	.+4      	; 0x1ad8 <__fp_round+0x18>
    1ad4:	60 ff       	sbrs	r22, 0
    1ad6:	04 c0       	rjmp	.+8      	; 0x1ae0 <__fp_round+0x20>
    1ad8:	6f 5f       	subi	r22, 0xFF	; 255
    1ada:	7f 4f       	sbci	r23, 0xFF	; 255
    1adc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ade:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae0:	08 95       	ret

00001ae2 <__fp_split3>:
    1ae2:	57 fd       	sbrc	r21, 7
    1ae4:	90 58       	subi	r25, 0x80	; 128
    1ae6:	44 0f       	add	r20, r20
    1ae8:	55 1f       	adc	r21, r21
    1aea:	59 f0       	breq	.+22     	; 0x1b02 <__fp_splitA+0x10>
    1aec:	5f 3f       	cpi	r21, 0xFF	; 255
    1aee:	71 f0       	breq	.+28     	; 0x1b0c <__fp_splitA+0x1a>
    1af0:	47 95       	ror	r20

00001af2 <__fp_splitA>:
    1af2:	88 0f       	add	r24, r24
    1af4:	97 fb       	bst	r25, 7
    1af6:	99 1f       	adc	r25, r25
    1af8:	61 f0       	breq	.+24     	; 0x1b12 <__fp_splitA+0x20>
    1afa:	9f 3f       	cpi	r25, 0xFF	; 255
    1afc:	79 f0       	breq	.+30     	; 0x1b1c <__fp_splitA+0x2a>
    1afe:	87 95       	ror	r24
    1b00:	08 95       	ret
    1b02:	12 16       	cp	r1, r18
    1b04:	13 06       	cpc	r1, r19
    1b06:	14 06       	cpc	r1, r20
    1b08:	55 1f       	adc	r21, r21
    1b0a:	f2 cf       	rjmp	.-28     	; 0x1af0 <__fp_split3+0xe>
    1b0c:	46 95       	lsr	r20
    1b0e:	f1 df       	rcall	.-30     	; 0x1af2 <__fp_splitA>
    1b10:	08 c0       	rjmp	.+16     	; 0x1b22 <__fp_splitA+0x30>
    1b12:	16 16       	cp	r1, r22
    1b14:	17 06       	cpc	r1, r23
    1b16:	18 06       	cpc	r1, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	f1 cf       	rjmp	.-30     	; 0x1afe <__fp_splitA+0xc>
    1b1c:	86 95       	lsr	r24
    1b1e:	71 05       	cpc	r23, r1
    1b20:	61 05       	cpc	r22, r1
    1b22:	08 94       	sec
    1b24:	08 95       	ret

00001b26 <__fp_zero>:
    1b26:	e8 94       	clt

00001b28 <__fp_szero>:
    1b28:	bb 27       	eor	r27, r27
    1b2a:	66 27       	eor	r22, r22
    1b2c:	77 27       	eor	r23, r23
    1b2e:	cb 01       	movw	r24, r22
    1b30:	97 f9       	bld	r25, 7
    1b32:	08 95       	ret

00001b34 <__mulsf3>:
    1b34:	0b d0       	rcall	.+22     	; 0x1b4c <__mulsf3x>
    1b36:	c4 cf       	rjmp	.-120    	; 0x1ac0 <__fp_round>
    1b38:	b5 df       	rcall	.-150    	; 0x1aa4 <__fp_pscA>
    1b3a:	28 f0       	brcs	.+10     	; 0x1b46 <__mulsf3+0x12>
    1b3c:	ba df       	rcall	.-140    	; 0x1ab2 <__fp_pscB>
    1b3e:	18 f0       	brcs	.+6      	; 0x1b46 <__mulsf3+0x12>
    1b40:	95 23       	and	r25, r21
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <__mulsf3+0x12>
    1b44:	a6 cf       	rjmp	.-180    	; 0x1a92 <__fp_inf>
    1b46:	ab cf       	rjmp	.-170    	; 0x1a9e <__fp_nan>
    1b48:	11 24       	eor	r1, r1
    1b4a:	ee cf       	rjmp	.-36     	; 0x1b28 <__fp_szero>

00001b4c <__mulsf3x>:
    1b4c:	ca df       	rcall	.-108    	; 0x1ae2 <__fp_split3>
    1b4e:	a0 f3       	brcs	.-24     	; 0x1b38 <__mulsf3+0x4>

00001b50 <__mulsf3_pse>:
    1b50:	95 9f       	mul	r25, r21
    1b52:	d1 f3       	breq	.-12     	; 0x1b48 <__mulsf3+0x14>
    1b54:	95 0f       	add	r25, r21
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	55 1f       	adc	r21, r21
    1b5a:	62 9f       	mul	r22, r18
    1b5c:	f0 01       	movw	r30, r0
    1b5e:	72 9f       	mul	r23, r18
    1b60:	bb 27       	eor	r27, r27
    1b62:	f0 0d       	add	r31, r0
    1b64:	b1 1d       	adc	r27, r1
    1b66:	63 9f       	mul	r22, r19
    1b68:	aa 27       	eor	r26, r26
    1b6a:	f0 0d       	add	r31, r0
    1b6c:	b1 1d       	adc	r27, r1
    1b6e:	aa 1f       	adc	r26, r26
    1b70:	64 9f       	mul	r22, r20
    1b72:	66 27       	eor	r22, r22
    1b74:	b0 0d       	add	r27, r0
    1b76:	a1 1d       	adc	r26, r1
    1b78:	66 1f       	adc	r22, r22
    1b7a:	82 9f       	mul	r24, r18
    1b7c:	22 27       	eor	r18, r18
    1b7e:	b0 0d       	add	r27, r0
    1b80:	a1 1d       	adc	r26, r1
    1b82:	62 1f       	adc	r22, r18
    1b84:	73 9f       	mul	r23, r19
    1b86:	b0 0d       	add	r27, r0
    1b88:	a1 1d       	adc	r26, r1
    1b8a:	62 1f       	adc	r22, r18
    1b8c:	83 9f       	mul	r24, r19
    1b8e:	a0 0d       	add	r26, r0
    1b90:	61 1d       	adc	r22, r1
    1b92:	22 1f       	adc	r18, r18
    1b94:	74 9f       	mul	r23, r20
    1b96:	33 27       	eor	r19, r19
    1b98:	a0 0d       	add	r26, r0
    1b9a:	61 1d       	adc	r22, r1
    1b9c:	23 1f       	adc	r18, r19
    1b9e:	84 9f       	mul	r24, r20
    1ba0:	60 0d       	add	r22, r0
    1ba2:	21 1d       	adc	r18, r1
    1ba4:	82 2f       	mov	r24, r18
    1ba6:	76 2f       	mov	r23, r22
    1ba8:	6a 2f       	mov	r22, r26
    1baa:	11 24       	eor	r1, r1
    1bac:	9f 57       	subi	r25, 0x7F	; 127
    1bae:	50 40       	sbci	r21, 0x00	; 0
    1bb0:	8a f0       	brmi	.+34     	; 0x1bd4 <__mulsf3_pse+0x84>
    1bb2:	e1 f0       	breq	.+56     	; 0x1bec <__mulsf3_pse+0x9c>
    1bb4:	88 23       	and	r24, r24
    1bb6:	4a f0       	brmi	.+18     	; 0x1bca <__mulsf3_pse+0x7a>
    1bb8:	ee 0f       	add	r30, r30
    1bba:	ff 1f       	adc	r31, r31
    1bbc:	bb 1f       	adc	r27, r27
    1bbe:	66 1f       	adc	r22, r22
    1bc0:	77 1f       	adc	r23, r23
    1bc2:	88 1f       	adc	r24, r24
    1bc4:	91 50       	subi	r25, 0x01	; 1
    1bc6:	50 40       	sbci	r21, 0x00	; 0
    1bc8:	a9 f7       	brne	.-22     	; 0x1bb4 <__mulsf3_pse+0x64>
    1bca:	9e 3f       	cpi	r25, 0xFE	; 254
    1bcc:	51 05       	cpc	r21, r1
    1bce:	70 f0       	brcs	.+28     	; 0x1bec <__mulsf3_pse+0x9c>
    1bd0:	60 cf       	rjmp	.-320    	; 0x1a92 <__fp_inf>
    1bd2:	aa cf       	rjmp	.-172    	; 0x1b28 <__fp_szero>
    1bd4:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd6:	ec f3       	brlt	.-6      	; 0x1bd2 <__mulsf3_pse+0x82>
    1bd8:	98 3e       	cpi	r25, 0xE8	; 232
    1bda:	dc f3       	brlt	.-10     	; 0x1bd2 <__mulsf3_pse+0x82>
    1bdc:	86 95       	lsr	r24
    1bde:	77 95       	ror	r23
    1be0:	67 95       	ror	r22
    1be2:	b7 95       	ror	r27
    1be4:	f7 95       	ror	r31
    1be6:	e7 95       	ror	r30
    1be8:	9f 5f       	subi	r25, 0xFF	; 255
    1bea:	c1 f7       	brne	.-16     	; 0x1bdc <__mulsf3_pse+0x8c>
    1bec:	fe 2b       	or	r31, r30
    1bee:	88 0f       	add	r24, r24
    1bf0:	91 1d       	adc	r25, r1
    1bf2:	96 95       	lsr	r25
    1bf4:	87 95       	ror	r24
    1bf6:	97 f9       	bld	r25, 7
    1bf8:	08 95       	ret

00001bfa <pow>:
    1bfa:	fa 01       	movw	r30, r20
    1bfc:	ee 0f       	add	r30, r30
    1bfe:	ff 1f       	adc	r31, r31
    1c00:	30 96       	adiw	r30, 0x00	; 0
    1c02:	21 05       	cpc	r18, r1
    1c04:	31 05       	cpc	r19, r1
    1c06:	99 f1       	breq	.+102    	; 0x1c6e <pow+0x74>
    1c08:	61 15       	cp	r22, r1
    1c0a:	71 05       	cpc	r23, r1
    1c0c:	61 f4       	brne	.+24     	; 0x1c26 <pow+0x2c>
    1c0e:	80 38       	cpi	r24, 0x80	; 128
    1c10:	bf e3       	ldi	r27, 0x3F	; 63
    1c12:	9b 07       	cpc	r25, r27
    1c14:	49 f1       	breq	.+82     	; 0x1c68 <pow+0x6e>
    1c16:	68 94       	set
    1c18:	90 38       	cpi	r25, 0x80	; 128
    1c1a:	81 05       	cpc	r24, r1
    1c1c:	61 f0       	breq	.+24     	; 0x1c36 <pow+0x3c>
    1c1e:	80 38       	cpi	r24, 0x80	; 128
    1c20:	bf ef       	ldi	r27, 0xFF	; 255
    1c22:	9b 07       	cpc	r25, r27
    1c24:	41 f0       	breq	.+16     	; 0x1c36 <pow+0x3c>
    1c26:	99 23       	and	r25, r25
    1c28:	42 f5       	brpl	.+80     	; 0x1c7a <pow+0x80>
    1c2a:	ff 3f       	cpi	r31, 0xFF	; 255
    1c2c:	e1 05       	cpc	r30, r1
    1c2e:	31 05       	cpc	r19, r1
    1c30:	21 05       	cpc	r18, r1
    1c32:	11 f1       	breq	.+68     	; 0x1c78 <pow+0x7e>
    1c34:	e8 94       	clt
    1c36:	08 94       	sec
    1c38:	e7 95       	ror	r30
    1c3a:	d9 01       	movw	r26, r18
    1c3c:	aa 23       	and	r26, r26
    1c3e:	29 f4       	brne	.+10     	; 0x1c4a <pow+0x50>
    1c40:	ab 2f       	mov	r26, r27
    1c42:	be 2f       	mov	r27, r30
    1c44:	f8 5f       	subi	r31, 0xF8	; 248
    1c46:	d0 f3       	brcs	.-12     	; 0x1c3c <pow+0x42>
    1c48:	10 c0       	rjmp	.+32     	; 0x1c6a <pow+0x70>
    1c4a:	ff 5f       	subi	r31, 0xFF	; 255
    1c4c:	70 f4       	brcc	.+28     	; 0x1c6a <pow+0x70>
    1c4e:	a6 95       	lsr	r26
    1c50:	e0 f7       	brcc	.-8      	; 0x1c4a <pow+0x50>
    1c52:	f7 39       	cpi	r31, 0x97	; 151
    1c54:	50 f0       	brcs	.+20     	; 0x1c6a <pow+0x70>
    1c56:	19 f0       	breq	.+6      	; 0x1c5e <pow+0x64>
    1c58:	ff 3a       	cpi	r31, 0xAF	; 175
    1c5a:	38 f4       	brcc	.+14     	; 0x1c6a <pow+0x70>
    1c5c:	9f 77       	andi	r25, 0x7F	; 127
    1c5e:	9f 93       	push	r25
    1c60:	0c d0       	rcall	.+24     	; 0x1c7a <pow+0x80>
    1c62:	0f 90       	pop	r0
    1c64:	07 fc       	sbrc	r0, 7
    1c66:	90 58       	subi	r25, 0x80	; 128
    1c68:	08 95       	ret
    1c6a:	3e f0       	brts	.+14     	; 0x1c7a <pow+0x80>
    1c6c:	18 cf       	rjmp	.-464    	; 0x1a9e <__fp_nan>
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	80 e8       	ldi	r24, 0x80	; 128
    1c74:	9f e3       	ldi	r25, 0x3F	; 63
    1c76:	08 95       	ret
    1c78:	4f e7       	ldi	r20, 0x7F	; 127
    1c7a:	9f 77       	andi	r25, 0x7F	; 127
    1c7c:	5f 93       	push	r21
    1c7e:	4f 93       	push	r20
    1c80:	3f 93       	push	r19
    1c82:	2f 93       	push	r18
    1c84:	9e d0       	rcall	.+316    	; 0x1dc2 <log>
    1c86:	2f 91       	pop	r18
    1c88:	3f 91       	pop	r19
    1c8a:	4f 91       	pop	r20
    1c8c:	5f 91       	pop	r21
    1c8e:	52 df       	rcall	.-348    	; 0x1b34 <__mulsf3>
    1c90:	05 c0       	rjmp	.+10     	; 0x1c9c <exp>
    1c92:	19 f4       	brne	.+6      	; 0x1c9a <pow+0xa0>
    1c94:	0e f0       	brts	.+2      	; 0x1c98 <pow+0x9e>
    1c96:	fd ce       	rjmp	.-518    	; 0x1a92 <__fp_inf>
    1c98:	46 cf       	rjmp	.-372    	; 0x1b26 <__fp_zero>
    1c9a:	01 cf       	rjmp	.-510    	; 0x1a9e <__fp_nan>

00001c9c <exp>:
    1c9c:	2a df       	rcall	.-428    	; 0x1af2 <__fp_splitA>
    1c9e:	c8 f3       	brcs	.-14     	; 0x1c92 <pow+0x98>
    1ca0:	96 38       	cpi	r25, 0x86	; 134
    1ca2:	c0 f7       	brcc	.-16     	; 0x1c94 <pow+0x9a>
    1ca4:	07 f8       	bld	r0, 7
    1ca6:	0f 92       	push	r0
    1ca8:	e8 94       	clt
    1caa:	2b e3       	ldi	r18, 0x3B	; 59
    1cac:	3a ea       	ldi	r19, 0xAA	; 170
    1cae:	48 eb       	ldi	r20, 0xB8	; 184
    1cb0:	5f e7       	ldi	r21, 0x7F	; 127
    1cb2:	4e df       	rcall	.-356    	; 0x1b50 <__mulsf3_pse>
    1cb4:	0f 92       	push	r0
    1cb6:	0f 92       	push	r0
    1cb8:	0f 92       	push	r0
    1cba:	4d b7       	in	r20, 0x3d	; 61
    1cbc:	5e b7       	in	r21, 0x3e	; 62
    1cbe:	0f 92       	push	r0
    1cc0:	c0 d0       	rcall	.+384    	; 0x1e42 <modf>
    1cc2:	e8 ed       	ldi	r30, 0xD8	; 216
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	16 d0       	rcall	.+44     	; 0x1cf4 <__fp_powser>
    1cc8:	4f 91       	pop	r20
    1cca:	5f 91       	pop	r21
    1ccc:	ef 91       	pop	r30
    1cce:	ff 91       	pop	r31
    1cd0:	e5 95       	asr	r30
    1cd2:	ee 1f       	adc	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	49 f0       	breq	.+18     	; 0x1cea <exp+0x4e>
    1cd8:	fe 57       	subi	r31, 0x7E	; 126
    1cda:	e0 68       	ori	r30, 0x80	; 128
    1cdc:	44 27       	eor	r20, r20
    1cde:	ee 0f       	add	r30, r30
    1ce0:	44 1f       	adc	r20, r20
    1ce2:	fa 95       	dec	r31
    1ce4:	e1 f7       	brne	.-8      	; 0x1cde <exp+0x42>
    1ce6:	41 95       	neg	r20
    1ce8:	55 0b       	sbc	r21, r21
    1cea:	32 d0       	rcall	.+100    	; 0x1d50 <ldexp>
    1cec:	0f 90       	pop	r0
    1cee:	07 fe       	sbrs	r0, 7
    1cf0:	26 c0       	rjmp	.+76     	; 0x1d3e <inverse>
    1cf2:	08 95       	ret

00001cf4 <__fp_powser>:
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	1f 93       	push	r17
    1cfa:	0f 93       	push	r16
    1cfc:	ff 92       	push	r15
    1cfe:	ef 92       	push	r14
    1d00:	df 92       	push	r13
    1d02:	7b 01       	movw	r14, r22
    1d04:	8c 01       	movw	r16, r24
    1d06:	68 94       	set
    1d08:	05 c0       	rjmp	.+10     	; 0x1d14 <__fp_powser+0x20>
    1d0a:	da 2e       	mov	r13, r26
    1d0c:	ef 01       	movw	r28, r30
    1d0e:	1e df       	rcall	.-452    	; 0x1b4c <__mulsf3x>
    1d10:	fe 01       	movw	r30, r28
    1d12:	e8 94       	clt
    1d14:	a5 91       	lpm	r26, Z+
    1d16:	25 91       	lpm	r18, Z+
    1d18:	35 91       	lpm	r19, Z+
    1d1a:	45 91       	lpm	r20, Z+
    1d1c:	55 91       	lpm	r21, Z+
    1d1e:	ae f3       	brts	.-22     	; 0x1d0a <__fp_powser+0x16>
    1d20:	ef 01       	movw	r28, r30
    1d22:	8e dd       	rcall	.-1252   	; 0x1840 <__addsf3x>
    1d24:	fe 01       	movw	r30, r28
    1d26:	97 01       	movw	r18, r14
    1d28:	a8 01       	movw	r20, r16
    1d2a:	da 94       	dec	r13
    1d2c:	79 f7       	brne	.-34     	; 0x1d0c <__fp_powser+0x18>
    1d2e:	df 90       	pop	r13
    1d30:	ef 90       	pop	r14
    1d32:	ff 90       	pop	r15
    1d34:	0f 91       	pop	r16
    1d36:	1f 91       	pop	r17
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <inverse>:
    1d3e:	9b 01       	movw	r18, r22
    1d40:	ac 01       	movw	r20, r24
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	80 e8       	ldi	r24, 0x80	; 128
    1d48:	9f e3       	ldi	r25, 0x3F	; 63
    1d4a:	cd cd       	rjmp	.-1126   	; 0x18e6 <__divsf3>
    1d4c:	a2 ce       	rjmp	.-700    	; 0x1a92 <__fp_inf>
    1d4e:	ac c0       	rjmp	.+344    	; 0x1ea8 <__fp_mpack>

00001d50 <ldexp>:
    1d50:	d0 de       	rcall	.-608    	; 0x1af2 <__fp_splitA>
    1d52:	e8 f3       	brcs	.-6      	; 0x1d4e <inverse+0x10>
    1d54:	99 23       	and	r25, r25
    1d56:	d9 f3       	breq	.-10     	; 0x1d4e <inverse+0x10>
    1d58:	94 0f       	add	r25, r20
    1d5a:	51 1d       	adc	r21, r1
    1d5c:	bb f3       	brvs	.-18     	; 0x1d4c <inverse+0xe>
    1d5e:	91 50       	subi	r25, 0x01	; 1
    1d60:	50 40       	sbci	r21, 0x00	; 0
    1d62:	94 f0       	brlt	.+36     	; 0x1d88 <ldexp+0x38>
    1d64:	59 f0       	breq	.+22     	; 0x1d7c <ldexp+0x2c>
    1d66:	88 23       	and	r24, r24
    1d68:	32 f0       	brmi	.+12     	; 0x1d76 <ldexp+0x26>
    1d6a:	66 0f       	add	r22, r22
    1d6c:	77 1f       	adc	r23, r23
    1d6e:	88 1f       	adc	r24, r24
    1d70:	91 50       	subi	r25, 0x01	; 1
    1d72:	50 40       	sbci	r21, 0x00	; 0
    1d74:	c1 f7       	brne	.-16     	; 0x1d66 <ldexp+0x16>
    1d76:	9e 3f       	cpi	r25, 0xFE	; 254
    1d78:	51 05       	cpc	r21, r1
    1d7a:	44 f7       	brge	.-48     	; 0x1d4c <inverse+0xe>
    1d7c:	88 0f       	add	r24, r24
    1d7e:	91 1d       	adc	r25, r1
    1d80:	96 95       	lsr	r25
    1d82:	87 95       	ror	r24
    1d84:	97 f9       	bld	r25, 7
    1d86:	08 95       	ret
    1d88:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8a:	ac f0       	brlt	.+42     	; 0x1db6 <ldexp+0x66>
    1d8c:	98 3e       	cpi	r25, 0xE8	; 232
    1d8e:	9c f0       	brlt	.+38     	; 0x1db6 <ldexp+0x66>
    1d90:	bb 27       	eor	r27, r27
    1d92:	86 95       	lsr	r24
    1d94:	77 95       	ror	r23
    1d96:	67 95       	ror	r22
    1d98:	b7 95       	ror	r27
    1d9a:	08 f4       	brcc	.+2      	; 0x1d9e <ldexp+0x4e>
    1d9c:	b1 60       	ori	r27, 0x01	; 1
    1d9e:	93 95       	inc	r25
    1da0:	c1 f7       	brne	.-16     	; 0x1d92 <ldexp+0x42>
    1da2:	bb 0f       	add	r27, r27
    1da4:	58 f7       	brcc	.-42     	; 0x1d7c <ldexp+0x2c>
    1da6:	11 f4       	brne	.+4      	; 0x1dac <ldexp+0x5c>
    1da8:	60 ff       	sbrs	r22, 0
    1daa:	e8 cf       	rjmp	.-48     	; 0x1d7c <ldexp+0x2c>
    1dac:	6f 5f       	subi	r22, 0xFF	; 255
    1dae:	7f 4f       	sbci	r23, 0xFF	; 255
    1db0:	8f 4f       	sbci	r24, 0xFF	; 255
    1db2:	9f 4f       	sbci	r25, 0xFF	; 255
    1db4:	e3 cf       	rjmp	.-58     	; 0x1d7c <ldexp+0x2c>
    1db6:	b8 ce       	rjmp	.-656    	; 0x1b28 <__fp_szero>
    1db8:	0e f0       	brts	.+2      	; 0x1dbc <ldexp+0x6c>
    1dba:	76 c0       	rjmp	.+236    	; 0x1ea8 <__fp_mpack>
    1dbc:	70 ce       	rjmp	.-800    	; 0x1a9e <__fp_nan>
    1dbe:	68 94       	set
    1dc0:	68 ce       	rjmp	.-816    	; 0x1a92 <__fp_inf>

00001dc2 <log>:
    1dc2:	97 de       	rcall	.-722    	; 0x1af2 <__fp_splitA>
    1dc4:	c8 f3       	brcs	.-14     	; 0x1db8 <ldexp+0x68>
    1dc6:	99 23       	and	r25, r25
    1dc8:	d1 f3       	breq	.-12     	; 0x1dbe <ldexp+0x6e>
    1dca:	c6 f3       	brts	.-16     	; 0x1dbc <ldexp+0x6c>
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	1f 93       	push	r17
    1dd2:	0f 93       	push	r16
    1dd4:	ff 92       	push	r15
    1dd6:	c9 2f       	mov	r28, r25
    1dd8:	dd 27       	eor	r29, r29
    1dda:	88 23       	and	r24, r24
    1ddc:	2a f0       	brmi	.+10     	; 0x1de8 <log+0x26>
    1dde:	21 97       	sbiw	r28, 0x01	; 1
    1de0:	66 0f       	add	r22, r22
    1de2:	77 1f       	adc	r23, r23
    1de4:	88 1f       	adc	r24, r24
    1de6:	da f7       	brpl	.-10     	; 0x1dde <log+0x1c>
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f eb       	ldi	r21, 0xBF	; 191
    1df0:	9f e3       	ldi	r25, 0x3F	; 63
    1df2:	88 39       	cpi	r24, 0x98	; 152
    1df4:	20 f0       	brcs	.+8      	; 0x1dfe <log+0x3c>
    1df6:	80 3e       	cpi	r24, 0xE0	; 224
    1df8:	30 f0       	brcs	.+12     	; 0x1e06 <log+0x44>
    1dfa:	21 96       	adiw	r28, 0x01	; 1
    1dfc:	8f 77       	andi	r24, 0x7F	; 127
    1dfe:	0f dd       	rcall	.-1506   	; 0x181e <__addsf3>
    1e00:	e0 e0       	ldi	r30, 0x00	; 0
    1e02:	f1 e0       	ldi	r31, 0x01	; 1
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <log+0x4a>
    1e06:	0b dd       	rcall	.-1514   	; 0x181e <__addsf3>
    1e08:	ed e2       	ldi	r30, 0x2D	; 45
    1e0a:	f1 e0       	ldi	r31, 0x01	; 1
    1e0c:	73 df       	rcall	.-282    	; 0x1cf4 <__fp_powser>
    1e0e:	8b 01       	movw	r16, r22
    1e10:	be 01       	movw	r22, r28
    1e12:	ec 01       	movw	r28, r24
    1e14:	fb 2e       	mov	r15, r27
    1e16:	6f 57       	subi	r22, 0x7F	; 127
    1e18:	71 09       	sbc	r23, r1
    1e1a:	75 95       	asr	r23
    1e1c:	77 1f       	adc	r23, r23
    1e1e:	88 0b       	sbc	r24, r24
    1e20:	99 0b       	sbc	r25, r25
    1e22:	fc dd       	rcall	.-1032   	; 0x1a1c <__floatsisf>
    1e24:	28 e1       	ldi	r18, 0x18	; 24
    1e26:	32 e7       	ldi	r19, 0x72	; 114
    1e28:	41 e3       	ldi	r20, 0x31	; 49
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	8f de       	rcall	.-738    	; 0x1b4c <__mulsf3x>
    1e2e:	af 2d       	mov	r26, r15
    1e30:	98 01       	movw	r18, r16
    1e32:	ae 01       	movw	r20, r28
    1e34:	ff 90       	pop	r15
    1e36:	0f 91       	pop	r16
    1e38:	1f 91       	pop	r17
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	00 dd       	rcall	.-1536   	; 0x1840 <__addsf3x>
    1e40:	3f ce       	rjmp	.-898    	; 0x1ac0 <__fp_round>

00001e42 <modf>:
    1e42:	fa 01       	movw	r30, r20
    1e44:	dc 01       	movw	r26, r24
    1e46:	aa 0f       	add	r26, r26
    1e48:	bb 1f       	adc	r27, r27
    1e4a:	9b 01       	movw	r18, r22
    1e4c:	ac 01       	movw	r20, r24
    1e4e:	bf 57       	subi	r27, 0x7F	; 127
    1e50:	28 f4       	brcc	.+10     	; 0x1e5c <modf+0x1a>
    1e52:	22 27       	eor	r18, r18
    1e54:	33 27       	eor	r19, r19
    1e56:	44 27       	eor	r20, r20
    1e58:	50 78       	andi	r21, 0x80	; 128
    1e5a:	1f c0       	rjmp	.+62     	; 0x1e9a <modf+0x58>
    1e5c:	b7 51       	subi	r27, 0x17	; 23
    1e5e:	88 f4       	brcc	.+34     	; 0x1e82 <modf+0x40>
    1e60:	ab 2f       	mov	r26, r27
    1e62:	00 24       	eor	r0, r0
    1e64:	46 95       	lsr	r20
    1e66:	37 95       	ror	r19
    1e68:	27 95       	ror	r18
    1e6a:	01 1c       	adc	r0, r1
    1e6c:	a3 95       	inc	r26
    1e6e:	d2 f3       	brmi	.-12     	; 0x1e64 <modf+0x22>
    1e70:	00 20       	and	r0, r0
    1e72:	69 f0       	breq	.+26     	; 0x1e8e <modf+0x4c>
    1e74:	22 0f       	add	r18, r18
    1e76:	33 1f       	adc	r19, r19
    1e78:	44 1f       	adc	r20, r20
    1e7a:	b3 95       	inc	r27
    1e7c:	da f3       	brmi	.-10     	; 0x1e74 <modf+0x32>
    1e7e:	0d d0       	rcall	.+26     	; 0x1e9a <modf+0x58>
    1e80:	cd cc       	rjmp	.-1638   	; 0x181c <__subsf3>
    1e82:	61 30       	cpi	r22, 0x01	; 1
    1e84:	71 05       	cpc	r23, r1
    1e86:	a0 e8       	ldi	r26, 0x80	; 128
    1e88:	8a 07       	cpc	r24, r26
    1e8a:	b9 46       	sbci	r27, 0x69	; 105
    1e8c:	30 f4       	brcc	.+12     	; 0x1e9a <modf+0x58>
    1e8e:	9b 01       	movw	r18, r22
    1e90:	ac 01       	movw	r20, r24
    1e92:	66 27       	eor	r22, r22
    1e94:	77 27       	eor	r23, r23
    1e96:	88 27       	eor	r24, r24
    1e98:	90 78       	andi	r25, 0x80	; 128
    1e9a:	30 96       	adiw	r30, 0x00	; 0
    1e9c:	21 f0       	breq	.+8      	; 0x1ea6 <modf+0x64>
    1e9e:	20 83       	st	Z, r18
    1ea0:	31 83       	std	Z+1, r19	; 0x01
    1ea2:	42 83       	std	Z+2, r20	; 0x02
    1ea4:	53 83       	std	Z+3, r21	; 0x03
    1ea6:	08 95       	ret

00001ea8 <__fp_mpack>:
    1ea8:	9f 3f       	cpi	r25, 0xFF	; 255
    1eaa:	31 f0       	breq	.+12     	; 0x1eb8 <__fp_mpack_finite+0xc>

00001eac <__fp_mpack_finite>:
    1eac:	91 50       	subi	r25, 0x01	; 1
    1eae:	20 f4       	brcc	.+8      	; 0x1eb8 <__fp_mpack_finite+0xc>
    1eb0:	87 95       	ror	r24
    1eb2:	77 95       	ror	r23
    1eb4:	67 95       	ror	r22
    1eb6:	b7 95       	ror	r27
    1eb8:	88 0f       	add	r24, r24
    1eba:	91 1d       	adc	r25, r1
    1ebc:	96 95       	lsr	r25
    1ebe:	87 95       	ror	r24
    1ec0:	97 f9       	bld	r25, 7
    1ec2:	08 95       	ret

00001ec4 <__tablejump2__>:
    1ec4:	ee 0f       	add	r30, r30
    1ec6:	ff 1f       	adc	r31, r31
    1ec8:	00 24       	eor	r0, r0
    1eca:	00 1c       	adc	r0, r0
    1ecc:	0b be       	out	0x3b, r0	; 59
    1ece:	07 90       	elpm	r0, Z+
    1ed0:	f6 91       	elpm	r31, Z
    1ed2:	e0 2d       	mov	r30, r0
    1ed4:	09 94       	ijmp

00001ed6 <eeprom_read_byte>:
    1ed6:	f9 99       	sbic	0x1f, 1	; 31
    1ed8:	fe cf       	rjmp	.-4      	; 0x1ed6 <eeprom_read_byte>
    1eda:	92 bd       	out	0x22, r25	; 34
    1edc:	81 bd       	out	0x21, r24	; 33
    1ede:	f8 9a       	sbi	0x1f, 0	; 31
    1ee0:	99 27       	eor	r25, r25
    1ee2:	80 b5       	in	r24, 0x20	; 32
    1ee4:	08 95       	ret

00001ee6 <eeprom_read_dword>:
    1ee6:	a6 e1       	ldi	r26, 0x16	; 22
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	44 e0       	ldi	r20, 0x04	; 4
    1eec:	50 e0       	ldi	r21, 0x00	; 0
    1eee:	18 c0       	rjmp	.+48     	; 0x1f20 <eeprom_read_blraw>

00001ef0 <eeprom_write_byte>:
    1ef0:	26 2f       	mov	r18, r22

00001ef2 <eeprom_write_r18>:
    1ef2:	f9 99       	sbic	0x1f, 1	; 31
    1ef4:	fe cf       	rjmp	.-4      	; 0x1ef2 <eeprom_write_r18>
    1ef6:	1f ba       	out	0x1f, r1	; 31
    1ef8:	92 bd       	out	0x22, r25	; 34
    1efa:	81 bd       	out	0x21, r24	; 33
    1efc:	20 bd       	out	0x20, r18	; 32
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	fa 9a       	sbi	0x1f, 2	; 31
    1f04:	f9 9a       	sbi	0x1f, 1	; 31
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	08 95       	ret

00001f0c <eeprom_write_dword>:
    1f0c:	24 2f       	mov	r18, r20
    1f0e:	f1 df       	rcall	.-30     	; 0x1ef2 <eeprom_write_r18>
    1f10:	25 2f       	mov	r18, r21
    1f12:	ef df       	rcall	.-34     	; 0x1ef2 <eeprom_write_r18>
    1f14:	00 c0       	rjmp	.+0      	; 0x1f16 <eeprom_write_word>

00001f16 <eeprom_write_word>:
    1f16:	ec df       	rcall	.-40     	; 0x1ef0 <eeprom_write_byte>
    1f18:	27 2f       	mov	r18, r23
    1f1a:	eb cf       	rjmp	.-42     	; 0x1ef2 <eeprom_write_r18>

00001f1c <eeprom_read_block>:
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22

00001f20 <eeprom_read_blraw>:
    1f20:	fc 01       	movw	r30, r24
    1f22:	f9 99       	sbic	0x1f, 1	; 31
    1f24:	fe cf       	rjmp	.-4      	; 0x1f22 <eeprom_read_blraw+0x2>
    1f26:	06 c0       	rjmp	.+12     	; 0x1f34 <eeprom_read_blraw+0x14>
    1f28:	f2 bd       	out	0x22, r31	; 34
    1f2a:	e1 bd       	out	0x21, r30	; 33
    1f2c:	f8 9a       	sbi	0x1f, 0	; 31
    1f2e:	31 96       	adiw	r30, 0x01	; 1
    1f30:	00 b4       	in	r0, 0x20	; 32
    1f32:	0d 92       	st	X+, r0
    1f34:	41 50       	subi	r20, 0x01	; 1
    1f36:	50 40       	sbci	r21, 0x00	; 0
    1f38:	b8 f7       	brcc	.-18     	; 0x1f28 <eeprom_read_blraw+0x8>
    1f3a:	08 95       	ret

00001f3c <_exit>:
    1f3c:	f8 94       	cli

00001f3e <__stop_program>:
    1f3e:	ff cf       	rjmp	.-2      	; 0x1f3e <__stop_program>
