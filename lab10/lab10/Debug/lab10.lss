
lab10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000104  00800100  00001eda  00001f6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800204  00800204  00002072  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002072  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000020e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002711  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b52  00000000  00000000  00004999  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001446  00000000  00000000  000054eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00006934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000814  00000000  00000000  00006bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000122d  00000000  00000000  000073ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00008619  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ac c0       	rjmp	.+344    	; 0x15a <__ctors_end>
       2:	00 00       	nop
       4:	c9 c0       	rjmp	.+402    	; 0x198 <__bad_interrupt>
       6:	00 00       	nop
       8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
       a:	00 00       	nop
       c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
       e:	00 00       	nop
      10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
      12:	00 00       	nop
      14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
      16:	00 00       	nop
      18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
      26:	00 00       	nop
      28:	b7 c0       	rjmp	.+366    	; 0x198 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b5 c0       	rjmp	.+362    	; 0x198 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
      32:	00 00       	nop
      34:	e7 c0       	rjmp	.+462    	; 0x204 <__vector_13>
      36:	00 00       	nop
      38:	af c0       	rjmp	.+350    	; 0x198 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
      42:	00 00       	nop
      44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
      46:	00 00       	nop
      48:	a7 c0       	rjmp	.+334    	; 0x198 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a5 c0       	rjmp	.+330    	; 0x198 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
      52:	00 00       	nop
      54:	a1 c0       	rjmp	.+322    	; 0x198 <__bad_interrupt>
      56:	00 00       	nop
      58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
      62:	00 00       	nop
      64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
      66:	00 00       	nop
      68:	97 c0       	rjmp	.+302    	; 0x198 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	95 c0       	rjmp	.+298    	; 0x198 <__bad_interrupt>
      6e:	00 00       	nop
      70:	93 c0       	rjmp	.+294    	; 0x198 <__bad_interrupt>
      72:	00 00       	nop
      74:	91 c0       	rjmp	.+290    	; 0x198 <__bad_interrupt>
      76:	00 00       	nop
      78:	8f c0       	rjmp	.+286    	; 0x198 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8d c0       	rjmp	.+282    	; 0x198 <__bad_interrupt>
      7e:	00 00       	nop
      80:	8b c0       	rjmp	.+278    	; 0x198 <__bad_interrupt>
      82:	00 00       	nop
      84:	89 c0       	rjmp	.+274    	; 0x198 <__bad_interrupt>
      86:	00 00       	nop
      88:	87 c0       	rjmp	.+270    	; 0x198 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa 01       	movw	r30, r20
      8e:	fc 01       	movw	r30, r24
      90:	fe 01       	movw	r30, r28
      92:	00 02       	muls	r16, r16
      94:	02 02       	muls	r16, r18
      96:	04 02       	muls	r16, r20
      98:	06 02       	muls	r16, r22
      9a:	08 02       	muls	r16, r24
      9c:	0a 02       	muls	r16, r26
      9e:	2b 02       	muls	r18, r27
      a0:	17 02       	muls	r17, r23
      a2:	19 02       	muls	r17, r25
      a4:	1b 02       	muls	r17, r27
      a6:	1d 02       	muls	r17, r29
      a8:	1f 02       	muls	r17, r31
      aa:	21 02       	muls	r18, r17
      ac:	23 02       	muls	r18, r19
      ae:	25 02       	muls	r18, r21
      b0:	27 02       	muls	r18, r23
      b2:	0b 07       	cpc	r16, r27
      b4:	6b 03       	fmul	r22, r19
      b6:	0e 07       	cpc	r16, r30
      b8:	87 03       	fmuls	r16, r23
      ba:	68 03       	fmul	r22, r16
      bc:	c1 03       	fmuls	r20, r17
      be:	6a 05       	cpc	r22, r10
      c0:	cb 03       	fmulsu	r20, r19
      c2:	d1 03       	fmuls	r21, r17
      c4:	d1 03       	fmuls	r21, r17
      c6:	8e 0a       	sbc	r8, r30
      c8:	6d 07       	cpc	r22, r29
      ca:	89 07       	cpc	r24, r25
      cc:	2b 09       	sbc	r18, r11
      ce:	41 09       	sbc	r20, r1
      d0:	48 09       	sbc	r20, r8
      d2:	5f 09       	sbc	r21, r15
      d4:	65 09       	sbc	r22, r5
      d6:	6c 09       	sbc	r22, r12
      d8:	07 63       	ori	r16, 0x37	; 55
      da:	42 36       	cpi	r20, 0x62	; 98
      dc:	b7 9b       	sbis	0x16, 7	; 22
      de:	d8 a7       	std	Y+40, r29	; 0x28
      e0:	1a 39       	cpi	r17, 0x9A	; 154
      e2:	68 56       	subi	r22, 0x68	; 104
      e4:	18 ae       	std	Y+56, r1	; 0x38
      e6:	ba ab       	std	Y+50, r27	; 0x32
      e8:	55 8c       	ldd	r5, Z+29	; 0x1d
      ea:	1d 3c       	cpi	r17, 0xCD	; 205
      ec:	b7 cc       	rjmp	.-1682   	; 0xfffffa5c <__eeprom_end+0xff7efa5c>
      ee:	57 63       	ori	r21, 0x37	; 55
      f0:	bd 6d       	ori	r27, 0xDD	; 221
      f2:	ed fd       	.word	0xfded	; ????
      f4:	75 3e       	cpi	r23, 0xE5	; 229
      f6:	f6 17       	cp	r31, r22
      f8:	72 31       	cpi	r23, 0x12	; 18
      fa:	bf 00       	.word	0x00bf	; ????
      fc:	00 00       	nop
      fe:	80 3f       	cpi	r24, 0xF0	; 240
     100:	08 00       	.word	0x0008	; ????
     102:	00 00       	nop
     104:	be 92       	st	-X, r11
     106:	24 49       	sbci	r18, 0x94	; 148
     108:	12 3e       	cpi	r17, 0xE2	; 226
     10a:	ab aa       	std	Y+51, r10	; 0x33
     10c:	aa 2a       	or	r10, r26
     10e:	be cd       	rjmp	.-1156   	; 0xfffffc8c <__eeprom_end+0xff7efc8c>
     110:	cc cc       	rjmp	.-1640   	; 0xfffffaaa <__eeprom_end+0xff7efaaa>
     112:	4c 3e       	cpi	r20, 0xEC	; 236
     114:	00 00       	nop
     116:	00 80       	ld	r0, Z
     118:	be ab       	std	Y+54, r27	; 0x36
     11a:	aa aa       	std	Y+50, r10	; 0x32
     11c:	aa 3e       	cpi	r26, 0xEA	; 234
     11e:	00 00       	nop
     120:	00 00       	nop
     122:	bf 00       	.word	0x00bf	; ????
     124:	00 00       	nop
     126:	80 3f       	cpi	r24, 0xF0	; 240
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	00 08       	sbc	r0, r0
     12e:	41 78       	andi	r20, 0x81	; 129
     130:	d3 bb       	out	0x13, r29	; 19
     132:	43 87       	std	Z+11, r20	; 0x0b
     134:	d1 13       	cpse	r29, r17
     136:	3d 19       	sub	r19, r13
     138:	0e 3c       	cpi	r16, 0xCE	; 206
     13a:	c3 bd       	out	0x23, r28	; 35
     13c:	42 82       	std	Z+2, r4	; 0x02
     13e:	ad 2b       	or	r26, r29
     140:	3e 68       	ori	r19, 0x8E	; 142
     142:	ec 82       	std	Y+4, r14	; 0x04
     144:	76 be       	out	0x36, r7	; 54
     146:	d9 8f       	std	Y+25, r29	; 0x19
     148:	e1 a9       	ldd	r30, Z+49	; 0x31
     14a:	3e 4c       	sbci	r19, 0xCE	; 206
     14c:	80 ef       	ldi	r24, 0xF0	; 240
     14e:	ff be       	out	0x3f, r15	; 63
     150:	01 c4       	rjmp	.+2050   	; 0x954 <trans+0x2b4>
     152:	ff 7f       	andi	r31, 0xFF	; 255
     154:	3f 00       	.word	0x003f	; ????
     156:	00 00       	nop
	...

0000015a <__ctors_end>:
     15a:	11 24       	eor	r1, r1
     15c:	1f be       	out	0x3f, r1	; 63
     15e:	cf ef       	ldi	r28, 0xFF	; 255
     160:	d0 e4       	ldi	r29, 0x40	; 64
     162:	de bf       	out	0x3e, r29	; 62
     164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_copy_data>:
     166:	12 e0       	ldi	r17, 0x02	; 2
     168:	a0 e0       	ldi	r26, 0x00	; 0
     16a:	b1 e0       	ldi	r27, 0x01	; 1
     16c:	ea ed       	ldi	r30, 0xDA	; 218
     16e:	fe e1       	ldi	r31, 0x1E	; 30
     170:	00 e0       	ldi	r16, 0x00	; 0
     172:	0b bf       	out	0x3b, r16	; 59
     174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x14>
     176:	07 90       	elpm	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	a4 30       	cpi	r26, 0x04	; 4
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0x10>

00000180 <__do_clear_bss>:
     180:	22 e0       	ldi	r18, 0x02	; 2
     182:	a4 e0       	ldi	r26, 0x04	; 4
     184:	b2 e0       	ldi	r27, 0x02	; 2
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	a0 37       	cpi	r26, 0x70	; 112
     18c:	b2 07       	cpc	r27, r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 15 0b 	call	0x162a	; 0x162a <main>
     194:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <_exit>

00000198 <__bad_interrupt>:
     198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <TimerSet>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
     19a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     19e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     1a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     1a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     1aa:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <_avr_timer_cntcurr>
     1ae:	70 93 66 02 	sts	0x0266, r23	; 0x800266 <_avr_timer_cntcurr+0x1>
     1b2:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <_avr_timer_cntcurr+0x2>
     1b6:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <_avr_timer_cntcurr+0x3>
     1ba:	08 95       	ret

000001bc <TimerOn>:
     1bc:	8b e0       	ldi	r24, 0x0B	; 11
     1be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     1c2:	8d e7       	ldi	r24, 0x7D	; 125
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     1ce:	82 e0       	ldi	r24, 0x02	; 2
     1d0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     1d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     1d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     1dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     1e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     1e4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     1e8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     1ec:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <_avr_timer_cntcurr>
     1f0:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <_avr_timer_cntcurr+0x1>
     1f4:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <_avr_timer_cntcurr+0x2>
     1f8:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <_avr_timer_cntcurr+0x3>
     1fc:	8f b7       	in	r24, 0x3f	; 63
     1fe:	80 68       	ori	r24, 0x80	; 128
     200:	8f bf       	out	0x3f, r24	; 63
     202:	08 95       	ret

00000204 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     204:	1f 92       	push	r1
     206:	0f 92       	push	r0
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	0f 92       	push	r0
     20c:	11 24       	eor	r1, r1
     20e:	8f 93       	push	r24
     210:	9f 93       	push	r25
     212:	af 93       	push	r26
     214:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     216:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <_avr_timer_cntcurr>
     21a:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_avr_timer_cntcurr+0x1>
     21e:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <_avr_timer_cntcurr+0x2>
     222:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <_avr_timer_cntcurr+0x3>
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	a1 09       	sbc	r26, r1
     22a:	b1 09       	sbc	r27, r1
     22c:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <_avr_timer_cntcurr>
     230:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <_avr_timer_cntcurr+0x1>
     234:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <_avr_timer_cntcurr+0x2>
     238:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     23c:	89 2b       	or	r24, r25
     23e:	8a 2b       	or	r24, r26
     240:	8b 2b       	or	r24, r27
     242:	99 f4       	brne	.+38     	; 0x26a <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
     24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     24e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     252:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     256:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     25a:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <_avr_timer_cntcurr>
     25e:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <_avr_timer_cntcurr+0x1>
     262:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <_avr_timer_cntcurr+0x2>
     266:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <_avr_timer_cntcurr+0x3>
	}
}
     26a:	bf 91       	pop	r27
     26c:	af 91       	pop	r26
     26e:	9f 91       	pop	r25
     270:	8f 91       	pop	r24
     272:	0f 90       	pop	r0
     274:	0f be       	out	0x3f, r0	; 63
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     27c:	18 16       	cp	r1, r24
     27e:	19 06       	cpc	r1, r25
     280:	5c f0       	brlt	.+22     	; 0x298 <delay_ms+0x1c>
     282:	08 95       	ret
        for(j=0;j<775;j++)
        {
            asm("nop");
     284:	00 00       	nop
     286:	21 50       	subi	r18, 0x01	; 1
     288:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
        for(j=0;j<775;j++)
     28a:	e1 f7       	brne	.-8      	; 0x284 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     28c:	4f 5f       	subi	r20, 0xFF	; 255
     28e:	5f 4f       	sbci	r21, 0xFF	; 255
     290:	84 17       	cp	r24, r20
     292:	95 07       	cpc	r25, r21
     294:	19 f4       	brne	.+6      	; 0x29c <delay_ms+0x20>
     296:	08 95       	ret
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
    }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
     29c:	27 e0       	ldi	r18, 0x07	; 7
     29e:	33 e0       	ldi	r19, 0x03	; 3
     2a0:	f1 cf       	rjmp	.-30     	; 0x284 <delay_ms+0x8>

000002a2 <LCD_WriteCommand>:
    LCD_WriteCommand(0x01);
    delay_ms(10);
}

void LCD_WriteCommand (unsigned char Command) {
    CLR_BIT(CONTROL_BUS,RS);
     2a2:	10 98       	cbi	0x02, 0	; 2
    DATA_BUS = Command;
     2a4:	8b b9       	out	0x0b, r24	; 11
    SET_BIT(CONTROL_BUS,E);
     2a6:	11 9a       	sbi	0x02, 1	; 2
    asm("nop");
     2a8:	00 00       	nop
    CLR_BIT(CONTROL_BUS,E);
     2aa:	11 98       	cbi	0x02, 1	; 2
    delay_ms(2); // ClearScreen requires 1.52ms to execute
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	e5 cf       	rjmp	.-54     	; 0x27c <delay_ms>
     2b2:	08 95       	ret

000002b4 <LCD_ClearScreen>:
#define E 1			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
    LCD_WriteCommand(0x01);
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	f5 cf       	rjmp	.-22     	; 0x2a2 <LCD_WriteCommand>
     2b8:	08 95       	ret

000002ba <LCD_Cursor>:
        LCD_WriteData(*string++);
    }
}

void LCD_Cursor(unsigned char column) {
    if ( column < 17 ) { // 16x1 LCD: column < 9
     2ba:	81 31       	cpi	r24, 0x11	; 17
     2bc:	18 f4       	brcc	.+6      	; 0x2c4 <LCD_Cursor+0xa>
        // 16x2 LCD: column < 17
        LCD_WriteCommand(0x80 + column - 1);
     2be:	81 58       	subi	r24, 0x81	; 129
     2c0:	f0 cf       	rjmp	.-32     	; 0x2a2 <LCD_WriteCommand>
     2c2:	08 95       	ret
    } else {
        LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
     2c4:	81 55       	subi	r24, 0x51	; 81
     2c6:	ed cf       	rjmp	.-38     	; 0x2a2 <LCD_WriteCommand>
     2c8:	08 95       	ret

000002ca <LCD_init>:
}

void LCD_init(void) {
    
    //wait for 100 ms.
    delay_ms(100);
     2ca:	84 e6       	ldi	r24, 0x64	; 100
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	d6 df       	rcall	.-84     	; 0x27c <delay_ms>
    LCD_WriteCommand(0x38);
     2d0:	88 e3       	ldi	r24, 0x38	; 56
     2d2:	e7 df       	rcall	.-50     	; 0x2a2 <LCD_WriteCommand>
    LCD_WriteCommand(0x06);
     2d4:	86 e0       	ldi	r24, 0x06	; 6
     2d6:	e5 df       	rcall	.-54     	; 0x2a2 <LCD_WriteCommand>
    LCD_WriteCommand(0x0f);
     2d8:	8f e0       	ldi	r24, 0x0F	; 15
     2da:	e3 df       	rcall	.-58     	; 0x2a2 <LCD_WriteCommand>
    LCD_WriteCommand(0x01);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	e1 df       	rcall	.-62     	; 0x2a2 <LCD_WriteCommand>
    delay_ms(10);
     2e0:	8a e0       	ldi	r24, 0x0A	; 10
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	cb cf       	rjmp	.-106    	; 0x27c <delay_ms>
     2e6:	08 95       	ret

000002e8 <LCD_WriteData>:
     2e8:	10 9a       	sbi	0x02, 0	; 2
    delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
    SET_BIT(CONTROL_BUS,RS);
    DATA_BUS = Data;
     2ea:	8b b9       	out	0x0b, r24	; 11
    SET_BIT(CONTROL_BUS,E);
     2ec:	11 9a       	sbi	0x02, 1	; 2
    asm("nop");
     2ee:	00 00       	nop
    CLR_BIT(CONTROL_BUS,E);
     2f0:	11 98       	cbi	0x02, 1	; 2
    delay_ms(1);
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	c2 cf       	rjmp	.-124    	; 0x27c <delay_ms>
     2f8:	08 95       	ret

000002fa <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	18 2f       	mov	r17, r24
     304:	eb 01       	movw	r28, r22
    LCD_ClearScreen();
     306:	d6 df       	rcall	.-84     	; 0x2b4 <LCD_ClearScreen>
    unsigned char c = column;
    while(*string) {
     308:	88 81       	ld	r24, Y
     30a:	88 23       	and	r24, r24
     30c:	51 f0       	breq	.+20     	; 0x322 <LCD_DisplayString+0x28>
        LCD_Cursor(c++);
     30e:	01 e0       	ldi	r16, 0x01	; 1
     310:	01 0f       	add	r16, r17
     312:	81 2f       	mov	r24, r17
     314:	d2 df       	rcall	.-92     	; 0x2ba <LCD_Cursor>
        LCD_WriteData(*string++);
     316:	89 91       	ld	r24, Y+
     318:	e7 df       	rcall	.-50     	; 0x2e8 <LCD_WriteData>
     31a:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
    LCD_ClearScreen();
    unsigned char c = column;
    while(*string) {
        LCD_Cursor(c++);
     31c:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
    LCD_ClearScreen();
    unsigned char c = column;
    while(*string) {
     31e:	81 11       	cpse	r24, r1
     320:	f6 cf       	rjmp	.-20     	; 0x30e <LCD_DisplayString+0x14>
     322:	df 91       	pop	r29
        LCD_Cursor(c++);
        LCD_WriteData(*string++);
    }
}
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	0f 91       	pop	r16
     32a:	08 95       	ret

0000032c <Menu>:
     32c:	81 30       	cpi	r24, 0x01	; 1
	return state;
}

int Menu(int state)
{
	switch(state)
     32e:	91 05       	cpc	r25, r1
     330:	59 f0       	breq	.+22     	; 0x348 <Menu+0x1c>
     332:	24 f4       	brge	.+8      	; 0x33c <Menu+0x10>
     334:	89 2b       	or	r24, r25
     336:	09 f4       	brne	.+2      	; 0x33a <Menu+0xe>
     338:	44 c0       	rjmp	.+136    	; 0x3c2 <Menu+0x96>
     33a:	4c c0       	rjmp	.+152    	; 0x3d4 <Menu+0xa8>
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	91 05       	cpc	r25, r1
     340:	49 f0       	breq	.+18     	; 0x354 <Menu+0x28>
     342:	03 97       	sbiw	r24, 0x03	; 3
     344:	71 f0       	breq	.+28     	; 0x362 <Menu+0x36>
     346:	46 c0       	rjmp	.+140    	; 0x3d4 <Menu+0xa8>
			state = pauseM;
			break;
		}
		case pauseM:
		{
			if(pos == 1)
     348:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <pos>
     34c:	21 30       	cpi	r18, 0x01	; 1
     34e:	09 f0       	breq	.+2      	; 0x352 <Menu+0x26>
     350:	46 c0       	rjmp	.+140    	; 0x3de <Menu+0xb2>
     352:	0b c0       	rjmp	.+22     	; 0x36a <Menu+0x3e>
			}
			break;
		}
		case transaction:
		{
			if(pos == 1)
     354:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pos>
     358:	81 30       	cpi	r24, 0x01	; 1
     35a:	e9 f0       	breq	.+58     	; 0x396 <Menu+0x6a>
			{
				state = settings;
			}
			else
			{
				state = pauseM;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	08 95       	ret
			}
			break;
		}
		case settings:
		{
			if(pos == 1)
     362:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pos>
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	c1 f5       	brne	.+112    	; 0x3da <Menu+0xae>
		{
			break;
		}
		case transaction:
		{
			LCD_DisplayString(1, "A. Transactions");
     36a:	6e e0       	ldi	r22, 0x0E	; 14
     36c:	71 e0       	ldi	r23, 0x01	; 1
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	c4 df       	rcall	.-120    	; 0x2fa <LCD_DisplayString>
			if(key2 == 'A')
     372:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <key2>
     376:	81 34       	cpi	r24, 0x41	; 65
     378:	31 f4       	brne	.+12     	; 0x386 <Menu+0x5a>
			{
				pos = 2;
     37a:	82 e0       	ldi	r24, 0x02	; 2
     37c:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pos>
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	08 95       	ret
			}
			else if(key2 == 'B')
     386:	82 34       	cpi	r24, 0x42	; 66
     388:	f9 f4       	brne	.+62     	; 0x3c8 <Menu+0x9c>
			{
				pos = 4;
     38a:	84 e0       	ldi	r24, 0x04	; 4
     38c:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pos>
     390:	82 e0       	ldi	r24, 0x02	; 2
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	08 95       	ret
			}
			break;
		}
		case settings:
		{
			LCD_DisplayString(1, "B. Settings");
     396:	6e e1       	ldi	r22, 0x1E	; 30
     398:	71 e0       	ldi	r23, 0x01	; 1
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	ae df       	rcall	.-164    	; 0x2fa <LCD_DisplayString>
			if(key2 == 'A')
     39e:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <key2>
     3a2:	81 34       	cpi	r24, 0x41	; 65
     3a4:	31 f4       	brne	.+12     	; 0x3b2 <Menu+0x86>
			{
				pos = 2;
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pos>
     3ac:	83 e0       	ldi	r24, 0x03	; 3
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	08 95       	ret
			}
			else if(key2 == 'B')
     3b2:	82 34       	cpi	r24, 0x42	; 66
     3b4:	61 f4       	brne	.+24     	; 0x3ce <Menu+0xa2>
			{
				pos = 4;
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pos>
     3bc:	83 e0       	ldi	r24, 0x03	; 3
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	08 95       	ret
	switch(state)
	{
		case startM:
		{
			//pos = 3;
			state = pauseM;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	08 95       	ret
     3c8:	82 e0       	ldi	r24, 0x02	; 2
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	08 95       	ret
     3ce:	83 e0       	ldi	r24, 0x03	; 3
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	08 95       	ret
			}
			break;
		}
		default:
		{
			state = startM;
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	08 95       	ret
			{
				state = transaction;
			}
			else
			{
				state = pauseM;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
		{
			break;
		}
	}
	return state;
}
     3de:	08 95       	ret

000003e0 <changetoInteger>:
#include "io.c"
#include "io.h"

unsigned char changetoInteger(unsigned char var)
{
	switch(var)
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	fc 01       	movw	r30, r24
     3e4:	f1 97       	sbiw	r30, 0x31	; 49
     3e6:	e9 30       	cpi	r30, 0x09	; 9
     3e8:	f1 05       	cpc	r31, r1
     3ea:	b0 f4       	brcc	.+44     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3ec:	ea 5b       	subi	r30, 0xBA	; 186
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__tablejump2__>
	{
		case '0': return 0;
		case '1': return 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	08 95       	ret
		case '2': return 2;
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	08 95       	ret
		case '3': return 3;
     3fc:	83 e0       	ldi	r24, 0x03	; 3
     3fe:	08 95       	ret
		case '4': return 4;
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	08 95       	ret
		case '5': return 5;
     404:	85 e0       	ldi	r24, 0x05	; 5
     406:	08 95       	ret
		case '6': return 6;
     408:	86 e0       	ldi	r24, 0x06	; 6
     40a:	08 95       	ret
		case '7': return 7;
     40c:	87 e0       	ldi	r24, 0x07	; 7
     40e:	08 95       	ret
		case '8': return 8;
     410:	88 e0       	ldi	r24, 0x08	; 8
     412:	08 95       	ret
		case '9': return 9;
     414:	89 e0       	ldi	r24, 0x09	; 9
     416:	08 95       	ret

unsigned char changetoInteger(unsigned char var)
{
	switch(var)
	{
		case '0': return 0;
     418:	80 e0       	ldi	r24, 0x00	; 0
		case '7': return 7;
		case '8': return 8;
		case '9': return 9;
		default: return 0;
	}
}
     41a:	08 95       	ret

0000041c <changetoChar>:
char changetoChar(unsigned char num)
{
	switch(num)
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	8a 30       	cpi	r24, 0x0A	; 10
     420:	91 05       	cpc	r25, r1
     422:	b8 f4       	brcc	.+46     	; 0x452 <changetoChar+0x36>
     424:	fc 01       	movw	r30, r24
     426:	e1 5b       	subi	r30, 0xB1	; 177
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__tablejump2__>
	{
		case 0: return '0';
		case 1: return '1';
     42e:	81 e3       	ldi	r24, 0x31	; 49
     430:	08 95       	ret
		case 2: return '2';
     432:	82 e3       	ldi	r24, 0x32	; 50
     434:	08 95       	ret
		case 3: return '3';
     436:	83 e3       	ldi	r24, 0x33	; 51
     438:	08 95       	ret
		case 4: return '4';
     43a:	84 e3       	ldi	r24, 0x34	; 52
     43c:	08 95       	ret
		case 5: return '5';
     43e:	85 e3       	ldi	r24, 0x35	; 53
     440:	08 95       	ret
		case 6: return '6';
     442:	86 e3       	ldi	r24, 0x36	; 54
     444:	08 95       	ret
		case 7: return '7';
     446:	87 e3       	ldi	r24, 0x37	; 55
     448:	08 95       	ret
		case 8: return '8';
     44a:	88 e3       	ldi	r24, 0x38	; 56
     44c:	08 95       	ret
		case 9: return '9';
     44e:	89 e3       	ldi	r24, 0x39	; 57
     450:	08 95       	ret
		default: return '\0';
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	08 95       	ret
}
char changetoChar(unsigned char num)
{
	switch(num)
	{
		case 0: return '0';
     456:	80 e3       	ldi	r24, 0x30	; 48
		case 8: return '8';
		case 9: return '9';
		default: return '\0';

	}
}
     458:	08 95       	ret

0000045a <findHowManyB4Dec>:
unsigned char findHowManyB4Dec(unsigned char num)
{
	if(num >= 100)
     45a:	84 36       	cpi	r24, 0x64	; 100
     45c:	38 f4       	brcc	.+14     	; 0x46c <findHowManyB4Dec+0x12>
	{
		return 3;
	}
	else if(num >= 10)
     45e:	8a 30       	cpi	r24, 0x0A	; 10
     460:	38 f4       	brcc	.+14     	; 0x470 <findHowManyB4Dec+0x16>
}
unsigned char findHowManyB4Dec(unsigned char num)
{
	if(num >= 100)
	{
		return 3;
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	81 11       	cpse	r24, r1
     466:	05 c0       	rjmp	.+10     	; 0x472 <findHowManyB4Dec+0x18>
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	03 c0       	rjmp	.+6      	; 0x472 <findHowManyB4Dec+0x18>
     46c:	93 e0       	ldi	r25, 0x03	; 3
     46e:	01 c0       	rjmp	.+2      	; 0x472 <findHowManyB4Dec+0x18>
	}
	else if(num >= 10)
	{
		return 2;
     470:	92 e0       	ldi	r25, 0x02	; 2
	else
	{
		return 0;
	}
	
}
     472:	89 2f       	mov	r24, r25
     474:	08 95       	ret

00000476 <clearArray>:

void clearArray(unsigned char *a, unsigned char size)
{
	for(int i = 0; i < size; i++)
     476:	66 23       	and	r22, r22
     478:	39 f0       	breq	.+14     	; 0x488 <clearArray+0x12>
     47a:	fc 01       	movw	r30, r24
     47c:	86 0f       	add	r24, r22
     47e:	91 1d       	adc	r25, r1
	{
		a[i] = 0;
     480:	11 92       	st	Z+, r1
	
}

void clearArray(unsigned char *a, unsigned char size)
{
	for(int i = 0; i < size; i++)
     482:	e8 17       	cp	r30, r24
     484:	f9 07       	cpc	r31, r25
     486:	e1 f7       	brne	.-8      	; 0x480 <clearArray+0xa>
     488:	08 95       	ret

0000048a <GetKeypadKey>:
}

// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
     48a:	8f ee       	ldi	r24, 0xEF	; 239
     48c:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
     48e:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('1'); }
     490:	30 9b       	sbis	0x06, 0	; 6
     492:	29 c0       	rjmp	.+82     	; 0x4e6 <GetKeypadKey+0x5c>
    if (GetBit(PINC,1)==0) { return('4'); }
     494:	31 9b       	sbis	0x06, 1	; 6
     496:	29 c0       	rjmp	.+82     	; 0x4ea <GetKeypadKey+0x60>
    if (GetBit(PINC,2)==0) { return('7'); }
     498:	32 9b       	sbis	0x06, 2	; 6
     49a:	29 c0       	rjmp	.+82     	; 0x4ee <GetKeypadKey+0x64>
    if (GetBit(PINC,3)==0) { return('.'); }
     49c:	33 9b       	sbis	0x06, 3	; 6
     49e:	29 c0       	rjmp	.+82     	; 0x4f2 <GetKeypadKey+0x68>
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
     4a0:	8f ed       	ldi	r24, 0xDF	; 223
     4a2:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
     4a4:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('2'); }
     4a6:	30 9b       	sbis	0x06, 0	; 6
     4a8:	26 c0       	rjmp	.+76     	; 0x4f6 <GetKeypadKey+0x6c>
    if (GetBit(PINC,1)==0) { return('5'); }
     4aa:	31 9b       	sbis	0x06, 1	; 6
     4ac:	26 c0       	rjmp	.+76     	; 0x4fa <GetKeypadKey+0x70>
    if (GetBit(PINC,2)==0) { return('8'); }
     4ae:	32 9b       	sbis	0x06, 2	; 6
     4b0:	26 c0       	rjmp	.+76     	; 0x4fe <GetKeypadKey+0x74>
    if (GetBit(PINC,3)==0) { return('0'); }
     4b2:	33 9b       	sbis	0x06, 3	; 6
     4b4:	26 c0       	rjmp	.+76     	; 0x502 <GetKeypadKey+0x78>
    // ... *****FINISH*****
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
     4b6:	8f eb       	ldi	r24, 0xBF	; 191
     4b8:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
     4ba:	00 00       	nop
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
     4bc:	30 9b       	sbis	0x06, 0	; 6
     4be:	23 c0       	rjmp	.+70     	; 0x506 <GetKeypadKey+0x7c>
    if (GetBit(PINC,1)==0) { return('6'); }
     4c0:	31 9b       	sbis	0x06, 1	; 6
     4c2:	23 c0       	rjmp	.+70     	; 0x50a <GetKeypadKey+0x80>
    if (GetBit(PINC,2)==0) { return('9'); }
     4c4:	32 9b       	sbis	0x06, 2	; 6
     4c6:	23 c0       	rjmp	.+70     	; 0x50e <GetKeypadKey+0x84>
    if (GetBit(PINC,3)==0) { return('#'); }
     4c8:	33 9b       	sbis	0x06, 3	; 6
     4ca:	23 c0       	rjmp	.+70     	; 0x512 <GetKeypadKey+0x88>
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
     4cc:	8f e7       	ldi	r24, 0x7F	; 127
     4ce:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
     4d0:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('A'); }
     4d2:	30 9b       	sbis	0x06, 0	; 6
     4d4:	20 c0       	rjmp	.+64     	; 0x516 <GetKeypadKey+0x8c>
    if (GetBit(PINC,1)==0) { return('B'); }
     4d6:	31 9b       	sbis	0x06, 1	; 6
     4d8:	20 c0       	rjmp	.+64     	; 0x51a <GetKeypadKey+0x90>
    if (GetBit(PINC,2)==0) { return('C'); }
     4da:	32 9b       	sbis	0x06, 2	; 6
     4dc:	20 c0       	rjmp	.+64     	; 0x51e <GetKeypadKey+0x94>
    if (GetBit(PINC,3)==0) { return('D'); }
     4de:	33 9b       	sbis	0x06, 3	; 6
     4e0:	20 c0       	rjmp	.+64     	; 0x522 <GetKeypadKey+0x98>
    
    return('\0'); // default value
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	08 95       	ret
// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('1'); }
     4e6:	81 e3       	ldi	r24, 0x31	; 49
     4e8:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('4'); }
     4ea:	84 e3       	ldi	r24, 0x34	; 52
     4ec:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('7'); }
     4ee:	87 e3       	ldi	r24, 0x37	; 55
     4f0:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('.'); }
     4f2:	8e e2       	ldi	r24, 0x2E	; 46
     4f4:	08 95       	ret
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('2'); }
     4f6:	82 e3       	ldi	r24, 0x32	; 50
     4f8:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('5'); }
     4fa:	85 e3       	ldi	r24, 0x35	; 53
     4fc:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('8'); }
     4fe:	88 e3       	ldi	r24, 0x38	; 56
     500:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('0'); }
     502:	80 e3       	ldi	r24, 0x30	; 48
     504:	08 95       	ret
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
     506:	83 e3       	ldi	r24, 0x33	; 51
     508:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('6'); }
     50a:	86 e3       	ldi	r24, 0x36	; 54
     50c:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('9'); }
     50e:	89 e3       	ldi	r24, 0x39	; 57
     510:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('#'); }
     512:	83 e2       	ldi	r24, 0x23	; 35
     514:	08 95       	ret
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('A'); }
     516:	81 e4       	ldi	r24, 0x41	; 65
     518:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('B'); }
     51a:	82 e4       	ldi	r24, 0x42	; 66
     51c:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('C'); }
     51e:	83 e4       	ldi	r24, 0x43	; 67
     520:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('D'); }
     522:	84 e4       	ldi	r24, 0x44	; 68
    
    return('\0'); // default value
    
}
     524:	08 95       	ret

00000526 <Lock>:
enum SettingStates{startS, pauseS, opt, codeSet, codeWrite, pricePick, priceSet, priceWrite, done};
enum Keypad500states{startK, wait, press, unpress};
enum LockStates{startL, pauseL, enterPin, checkPin};

int Lock(int state)
{
     526:	df 92       	push	r13
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	ec 01       	movw	r28, r24
	static unsigned char count;
	static unsigned char numbers[7] = {0};
	static int address;
	static unsigned char holder;
	
	switch(state)
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	91 05       	cpc	r25, r1
     53a:	69 f1       	breq	.+90     	; 0x596 <Lock+0x70>
     53c:	1c f4       	brge	.+6      	; 0x544 <Lock+0x1e>
     53e:	89 2b       	or	r24, r25
     540:	49 f0       	breq	.+18     	; 0x554 <Lock+0x2e>
     542:	a0 c0       	rjmp	.+320    	; 0x684 <Lock+0x15e>
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	91 05       	cpc	r25, r1
     548:	09 f4       	brne	.+2      	; 0x54c <Lock+0x26>
     54a:	3d c0       	rjmp	.+122    	; 0x5c6 <Lock+0xa0>
     54c:	03 97       	sbiw	r24, 0x03	; 3
     54e:	09 f4       	brne	.+2      	; 0x552 <Lock+0x2c>
     550:	8b c0       	rjmp	.+278    	; 0x668 <Lock+0x142>
     552:	98 c0       	rjmp	.+304    	; 0x684 <Lock+0x15e>
	{
		case startL:
		{
			pos = 3;
     554:	83 e0       	ldi	r24, 0x03	; 3
     556:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pos>
			if(eeprom_read_byte((uint8_t *) 26) != '1')
     55a:	8a e1       	ldi	r24, 0x1A	; 26
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <eeprom_read_byte>
     562:	81 33       	cpi	r24, 0x31	; 49
     564:	09 f4       	brne	.+2      	; 0x568 <Lock+0x42>
     566:	91 c0       	rjmp	.+290    	; 0x68a <Lock+0x164>
			{
				eeprom_write_byte((uint8_t *) 20, '0');
     568:	60 e3       	ldi	r22, 0x30	; 48
     56a:	84 e1       	ldi	r24, 0x14	; 20
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <eeprom_write_byte>
				eeprom_write_byte((uint8_t *) 21, '0');
     572:	60 e3       	ldi	r22, 0x30	; 48
     574:	85 e1       	ldi	r24, 0x15	; 21
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <eeprom_write_byte>
				eeprom_write_byte((uint8_t *) 22, '0');
     57c:	60 e3       	ldi	r22, 0x30	; 48
     57e:	86 e1       	ldi	r24, 0x16	; 22
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <eeprom_write_byte>
				eeprom_write_byte((uint8_t *) 23, '0');
     586:	60 e3       	ldi	r22, 0x30	; 48
     588:	87 e1       	ldi	r24, 0x17	; 23
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <eeprom_write_byte>
			}
			state = pauseL;
     590:	c1 e0       	ldi	r28, 0x01	; 1
     592:	d0 e0       	ldi	r29, 0x00	; 0
     594:	7c c0       	rjmp	.+248    	; 0x68e <Lock+0x168>
			break;
		}
		case pauseL:
		{
			count = 0;
     596:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <count.2012>
			address = 20;
     59a:	84 e1       	ldi	r24, 0x14	; 20
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <address.2014+0x1>
     5a2:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <address.2014>
			holder = 0;
     5a6:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <holder.2015>
			clearArray(numbers, 7);
     5aa:	67 e0       	ldi	r22, 0x07	; 7
     5ac:	8a e5       	ldi	r24, 0x5A	; 90
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	62 df       	rcall	.-316    	; 0x476 <clearArray>
			if(pos == 3)
     5b2:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pos>
     5b6:	83 30       	cpi	r24, 0x03	; 3
     5b8:	09 f0       	breq	.+2      	; 0x5bc <Lock+0x96>
     5ba:	69 c0       	rjmp	.+210    	; 0x68e <Lock+0x168>
			{
				state = enterPin;
				LCD_DisplayString(1, "enter pin: ");
     5bc:	6a e2       	ldi	r22, 0x2A	; 42
     5be:	71 e0       	ldi	r23, 0x01	; 1
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	9b de       	rcall	.-714    	; 0x2fa <LCD_DisplayString>
     5c4:	57 c0       	rjmp	.+174    	; 0x674 <Lock+0x14e>
			}
			break;
		}
		case enterPin:
		{
			if(key == '#')
     5c6:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <key>
     5ca:	83 32       	cpi	r24, 0x23	; 35
     5cc:	09 f0       	breq	.+2      	; 0x5d0 <Lock+0xaa>
     5ce:	52 c0       	rjmp	.+164    	; 0x674 <Lock+0x14e>
		case enterPin:
		{
			key = GetKeypadKey();
			if(key != '\0')
			{
				LCD_WriteData(key);
     5d0:	10 c0       	rjmp	.+32     	; 0x5f2 <Lock+0xcc>
     5d2:	8a de       	rcall	.-748    	; 0x2e8 <LCD_WriteData>
				numbers[count] = key;
     5d4:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <count.2012>
     5d8:	e8 2f       	mov	r30, r24
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	e6 5a       	subi	r30, 0xA6	; 166
     5de:	fd 4f       	sbci	r31, 0xFD	; 253
     5e0:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <key>
     5e4:	90 83       	st	Z, r25
				count++;
     5e6:	8f 5f       	subi	r24, 0xFF	; 255
     5e8:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <count.2012>
     5ec:	c2 e0       	ldi	r28, 0x02	; 2
     5ee:	d0 e0       	ldi	r29, 0x00	; 0
     5f0:	4e c0       	rjmp	.+156    	; 0x68e <Lock+0x168>
			}
			break;
		}
		case checkPin:
		{
			holder = 0;
     5f2:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <holder.2015>
			address = 20;
     5f6:	84 e1       	ldi	r24, 0x14	; 20
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <address.2014+0x1>
     5fe:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <address.2014>
			LCD_WriteData(' ');
     602:	80 e2       	ldi	r24, 0x20	; 32
     604:	71 de       	rcall	.-798    	; 0x2e8 <LCD_WriteData>
			for(int i = 0; i < count-1 ; i++)
     606:	e0 90 64 02 	lds	r14, 0x0264	; 0x800264 <count.2012>
     60a:	8e 2d       	mov	r24, r14
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	18 16       	cp	r1, r24
     612:	19 06       	cpc	r1, r25
     614:	1c f5       	brge	.+70     	; 0x65c <Lock+0x136>
     616:	0a e5       	ldi	r16, 0x5A	; 90
     618:	12 e0       	ldi	r17, 0x02	; 2
     61a:	8e 2d       	mov	r24, r14
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	9c 01       	movw	r18, r24
     620:	27 5a       	subi	r18, 0xA7	; 167
     622:	3d 4f       	sbci	r19, 0xFD	; 253
     624:	79 01       	movw	r14, r18
			{
				//LCD_WriteData(numbers[i]);
				//LCD_WriteData(eeprom_read_byte((uint8_t *) address));
				if(eeprom_read_byte((uint8_t *) address) != numbers[i])
				{
					holder = 1;
     626:	dd 24       	eor	r13, r13
     628:	d3 94       	inc	r13
			LCD_WriteData(' ');
			for(int i = 0; i < count-1 ; i++)
			{
				//LCD_WriteData(numbers[i]);
				//LCD_WriteData(eeprom_read_byte((uint8_t *) address));
				if(eeprom_read_byte((uint8_t *) address) != numbers[i])
     62a:	c0 91 62 02 	lds	r28, 0x0262	; 0x800262 <address.2014>
     62e:	d0 91 63 02 	lds	r29, 0x0263	; 0x800263 <address.2014+0x1>
     632:	ce 01       	movw	r24, r28
     634:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <eeprom_read_byte>
     638:	f8 01       	movw	r30, r16
     63a:	91 91       	ld	r25, Z+
     63c:	8f 01       	movw	r16, r30
     63e:	89 13       	cpse	r24, r25
				{
					holder = 1;
     640:	d0 92 61 02 	sts	0x0261, r13	; 0x800261 <holder.2015>
					//LCD_WriteData(numbers[i]);
				}
				address++;
     644:	21 96       	adiw	r28, 0x01	; 1
     646:	d0 93 63 02 	sts	0x0263, r29	; 0x800263 <address.2014+0x1>
     64a:	c0 93 62 02 	sts	0x0262, r28	; 0x800262 <address.2014>
		case checkPin:
		{
			holder = 0;
			address = 20;
			LCD_WriteData(' ');
			for(int i = 0; i < count-1 ; i++)
     64e:	0e 15       	cp	r16, r14
     650:	1f 05       	cpc	r17, r15
     652:	59 f7       	brne	.-42     	; 0x62a <Lock+0x104>
					//LCD_WriteData(numbers[i]);
				}
				address++;
			}
			
			if(holder == 0)
     654:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <holder.2015>
     658:	81 11       	cpse	r24, r1
     65a:	09 c0       	rjmp	.+18     	; 0x66e <Lock+0x148>
			{
				pos = 1;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pos>
     662:	c3 e0       	ldi	r28, 0x03	; 3
     664:	d0 e0       	ldi	r29, 0x00	; 0
     666:	13 c0       	rjmp	.+38     	; 0x68e <Lock+0x168>
			}
			break;
		}
		case checkPin:
		{
			state = pauseL;
     668:	c1 e0       	ldi	r28, 0x01	; 1
     66a:	d0 e0       	ldi	r29, 0x00	; 0
     66c:	10 c0       	rjmp	.+32     	; 0x68e <Lock+0x168>
     66e:	c3 e0       	ldi	r28, 0x03	; 3
     670:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
		case enterPin:
		{
			key = GetKeypadKey();
     672:	0d c0       	rjmp	.+26     	; 0x68e <Lock+0x168>
     674:	0a df       	rcall	.-492    	; 0x48a <GetKeypadKey>
     676:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <key>
			if(key != '\0')
     67a:	81 11       	cpse	r24, r1
     67c:	aa cf       	rjmp	.-172    	; 0x5d2 <Lock+0xac>
     67e:	c2 e0       	ldi	r28, 0x02	; 2
     680:	d0 e0       	ldi	r29, 0x00	; 0
     682:	05 c0       	rjmp	.+10     	; 0x68e <Lock+0x168>
			state = pauseL;
			break;
		}
		default:
		{
			state = startL;
     684:	c0 e0       	ldi	r28, 0x00	; 0
     686:	d0 e0       	ldi	r29, 0x00	; 0
     688:	02 c0       	rjmp	.+4      	; 0x68e <Lock+0x168>
				eeprom_write_byte((uint8_t *) 20, '0');
				eeprom_write_byte((uint8_t *) 21, '0');
				eeprom_write_byte((uint8_t *) 22, '0');
				eeprom_write_byte((uint8_t *) 23, '0');
			}
			state = pauseL;
     68a:	c1 e0       	ldi	r28, 0x01	; 1
     68c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
	}
	return state;
}
     68e:	ce 01       	movw	r24, r28
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	df 90       	pop	r13
     69e:	08 95       	ret

000006a0 <trans>:
	return state;
}


int trans(int state)
{
     6a0:	4f 92       	push	r4
     6a2:	5f 92       	push	r5
     6a4:	6f 92       	push	r6
     6a6:	7f 92       	push	r7
     6a8:	8f 92       	push	r8
     6aa:	9f 92       	push	r9
     6ac:	af 92       	push	r10
     6ae:	bf 92       	push	r11
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	ec 01       	movw	r28, r24
	static unsigned char place;
	static unsigned char count;
	static unsigned char holder, holder2, holder3, num1, num2;
	static int decval, intval;
	
	switch (state)
     6be:	8a 30       	cpi	r24, 0x0A	; 10
     6c0:	91 05       	cpc	r25, r1
     6c2:	08 f0       	brcs	.+2      	; 0x6c6 <trans+0x26>
     6c4:	ae c3       	rjmp	.+1884   	; 0xe22 <trans+0x782>
     6c6:	fc 01       	movw	r30, r24
     6c8:	e7 5a       	subi	r30, 0xA7	; 167
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__tablejump2__>
			}
			break;
		}
		case picked:
		{
			state = picked1;
     6d0:	c5 e0       	ldi	r28, 0x05	; 5
     6d2:	d0 e0       	ldi	r29, 0x00	; 0
     6d4:	d9 c3       	rjmp	.+1970   	; 0xe88 <trans+0x7e8>
			state = pauseT;
			break;
		}
		case pauseT:
		{
			totalMoney = 0;
     6d6:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <totalMoney.2050>
     6da:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <totalMoney.2050+0x1>
     6de:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <totalMoney.2050+0x2>
     6e2:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <totalMoney.2050+0x3>
			changeMoney = 0;
			holderMoney = 0;
			place = 0;
     6e6:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <place.2054>
			count = 0;
     6ea:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <count.2055>
			holder = 0;
			holder2 = 0;
     6ee:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <holder2.2057>
			holder3 = 0;
			num1 = 0;
     6f2:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <num1.2059>
			num2 = 0;
     6f6:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <num2.2060>
			clearArray(number, 7);
     6fa:	67 e0       	ldi	r22, 0x07	; 7
     6fc:	8a e4       	ldi	r24, 0x4A	; 74
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	ba de       	rcall	.-652    	; 0x476 <clearArray>
			
			if(pos == 2)
     702:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pos>
     706:	82 30       	cpi	r24, 0x02	; 2
     708:	09 f0       	breq	.+2      	; 0x70c <trans+0x6c>
     70a:	be c3       	rjmp	.+1916   	; 0xe88 <trans+0x7e8>
			state = options1;
			break;
		}
		case options1:
		{
			key = GetKeypadKey();
     70c:	97 c3       	rjmp	.+1838   	; 0xe3c <trans+0x79c>
     70e:	bd de       	rcall	.-646    	; 0x48a <GetKeypadKey>
     710:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <key>
			if(key == 'A')
     714:	81 34       	cpi	r24, 0x41	; 65
     716:	c9 f4       	brne	.+50     	; 0x74a <trans+0xaa>
			{
				state = picked;
				totalMoney += eeprom_read_float((float *)1);
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <eeprom_read_dword>
     720:	9b 01       	movw	r18, r22
     722:	ac 01       	movw	r20, r24
     724:	60 91 56 02 	lds	r22, 0x0256	; 0x800256 <totalMoney.2050>
     728:	70 91 57 02 	lds	r23, 0x0257	; 0x800257 <totalMoney.2050+0x1>
     72c:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <totalMoney.2050+0x2>
     730:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <totalMoney.2050+0x3>
     734:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__addsf3>
     738:	60 93 56 02 	sts	0x0256, r22	; 0x800256 <totalMoney.2050>
     73c:	70 93 57 02 	sts	0x0257, r23	; 0x800257 <totalMoney.2050+0x1>
     740:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <totalMoney.2050+0x2>
     744:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <totalMoney.2050+0x3>
     748:	72 c3       	rjmp	.+1764   	; 0xe2e <trans+0x78e>
			}
			else if(key == 'B')
     74a:	82 34       	cpi	r24, 0x42	; 66
     74c:	09 f0       	breq	.+2      	; 0x750 <trans+0xb0>
     74e:	9c c3       	rjmp	.+1848   	; 0xe88 <trans+0x7e8>
			{
				state = picked;
				totalMoney += eeprom_read_float((float *)10);
     750:	8a e0       	ldi	r24, 0x0A	; 10
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <eeprom_read_dword>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	60 91 56 02 	lds	r22, 0x0256	; 0x800256 <totalMoney.2050>
     760:	70 91 57 02 	lds	r23, 0x0257	; 0x800257 <totalMoney.2050+0x1>
     764:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <totalMoney.2050+0x2>
     768:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <totalMoney.2050+0x3>
     76c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__addsf3>
     770:	60 93 56 02 	sts	0x0256, r22	; 0x800256 <totalMoney.2050>
     774:	70 93 57 02 	sts	0x0257, r23	; 0x800257 <totalMoney.2050+0x1>
     778:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <totalMoney.2050+0x2>
     77c:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <totalMoney.2050+0x3>
			state = picked1;
			break;
		}
		case picked1:
		{
			key = GetKeypadKey();
     780:	56 c3       	rjmp	.+1708   	; 0xe2e <trans+0x78e>
     782:	83 de       	rcall	.-762    	; 0x48a <GetKeypadKey>
     784:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <key>
			if(key == 'A')
     788:	81 34       	cpi	r24, 0x41	; 65
     78a:	09 f4       	brne	.+2      	; 0x78e <trans+0xee>
     78c:	9c c1       	rjmp	.+824    	; 0xac6 <trans+0x426>
			{
				state = payment;
			}
			else if(key == 'B')
     78e:	82 34       	cpi	r24, 0x42	; 66
     790:	09 f0       	breq	.+2      	; 0x794 <trans+0xf4>
     792:	7a c3       	rjmp	.+1780   	; 0xe88 <trans+0x7e8>
     794:	53 c3       	rjmp	.+1702   	; 0xe3c <trans+0x79c>
			state = payment1;
			break;
		}
		case payment1:
		{
			if(key == '#')
     796:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <key>
     79a:	83 32       	cpi	r24, 0x23	; 35
     79c:	09 f0       	breq	.+2      	; 0x7a0 <trans+0x100>
     79e:	9a c1       	rjmp	.+820    	; 0xad4 <trans+0x434>
		{
			state = change1;
		}
		case change1:
		{
			key = GetKeypadKey();
     7a0:	bd c1       	rjmp	.+890    	; 0xb1c <trans+0x47c>
     7a2:	73 de       	rcall	.-794    	; 0x48a <GetKeypadKey>
     7a4:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <key>
			if(key == '#')
     7a8:	83 32       	cpi	r24, 0x23	; 35
     7aa:	09 f0       	breq	.+2      	; 0x7ae <trans+0x10e>
     7ac:	3d c3       	rjmp	.+1658   	; 0xe28 <trans+0x788>
			{
				pos = 3;
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pos>
				state = pauseT;
     7b4:	c1 e0       	ldi	r28, 0x01	; 1
     7b6:	d0 e0       	ldi	r29, 0x00	; 0
     7b8:	67 c3       	rjmp	.+1742   	; 0xe88 <trans+0x7e8>
			num2 = (unsigned char)decval;
			
			
			if(num1 >= 99)
			{
				num1++;
     7ba:	83 94       	inc	r8
     7bc:	80 92 52 02 	sts	0x0252, r8	; 0x800252 <num1.2059>
			}
			place = findHowManyB4Dec(num1);
     7c0:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <num1.2059>
     7c4:	4a de       	rcall	.-876    	; 0x45a <findHowManyB4Dec>
     7c6:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <place.2054>
			
			holder2 = place - 1;
     7ca:	9f ef       	ldi	r25, 0xFF	; 255
     7cc:	98 0f       	add	r25, r24
     7ce:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <holder2.2057>
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     7d2:	e8 2e       	mov	r14, r24
     7d4:	f1 2c       	mov	r15, r1
     7d6:	1e 14       	cp	r1, r14
     7d8:	1f 04       	cpc	r1, r15
     7da:	0c f0       	brlt	.+2      	; 0x7de <trans+0x13e>
     7dc:	4f c0       	rjmp	.+158    	; 0x87c <trans+0x1dc>
     7de:	00 e0       	ldi	r16, 0x00	; 0
     7e0:	10 e0       	ldi	r17, 0x00	; 0
			{
				holder3 = num1/(pow(10,holder2));
     7e2:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <num1.2059>
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatsisf>
     7f0:	2b 01       	movw	r4, r22
     7f2:	3c 01       	movw	r6, r24
     7f4:	c0 91 53 02 	lds	r28, 0x0253	; 0x800253 <holder2.2057>
     7f8:	6c 2f       	mov	r22, r28
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__floatunsisf>
     804:	4b 01       	movw	r8, r22
     806:	5c 01       	movw	r10, r24
     808:	9b 01       	movw	r18, r22
     80a:	ac 01       	movw	r20, r24
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	80 e2       	ldi	r24, 0x20	; 32
     812:	91 e4       	ldi	r25, 0x41	; 65
     814:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <pow>
     818:	9b 01       	movw	r18, r22
     81a:	ac 01       	movw	r20, r24
     81c:	c3 01       	movw	r24, r6
     81e:	b2 01       	movw	r22, r4
     820:	0e 94 40 0c 	call	0x1880	; 0x1880 <__divsf3>
     824:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fixunssfsi>
     828:	d6 2f       	mov	r29, r22
				num1 = num1 - (holder3 * pow(10, holder2));
     82a:	a5 01       	movw	r20, r10
     82c:	94 01       	movw	r18, r8
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	80 e2       	ldi	r24, 0x20	; 32
     834:	91 e4       	ldi	r25, 0x41	; 65
     836:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <pow>
     83a:	4b 01       	movw	r8, r22
     83c:	5c 01       	movw	r10, r24
     83e:	6d 2f       	mov	r22, r29
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatsisf>
     84a:	a5 01       	movw	r20, r10
     84c:	94 01       	movw	r18, r8
     84e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__mulsf3>
     852:	9b 01       	movw	r18, r22
     854:	ac 01       	movw	r20, r24
     856:	c3 01       	movw	r24, r6
     858:	b2 01       	movw	r22, r4
     85a:	ad d7       	rcall	.+3930   	; 0x17b6 <__subsf3>
     85c:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fixunssfsi>
				LCD_WriteData(changetoChar(holder3));
     860:	60 93 52 02 	sts	0x0252, r22	; 0x800252 <num1.2059>
     864:	8d 2f       	mov	r24, r29
     866:	da dd       	rcall	.-1100   	; 0x41c <changetoChar>
     868:	3f dd       	rcall	.-1410   	; 0x2e8 <LCD_WriteData>
				holder2--;
     86a:	c1 50       	subi	r28, 0x01	; 1
     86c:	c0 93 53 02 	sts	0x0253, r28	; 0x800253 <holder2.2057>
			
			holder2 = place - 1;
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     870:	0f 5f       	subi	r16, 0xFF	; 255
     872:	1f 4f       	sbci	r17, 0xFF	; 255
     874:	0e 15       	cp	r16, r14
     876:	1f 05       	cpc	r17, r15
     878:	09 f0       	breq	.+2      	; 0x87c <trans+0x1dc>
				num1 = num1 - (holder3 * pow(10, holder2));
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			
			holder2 = 1;
     87a:	b3 cf       	rjmp	.-154    	; 0x7e2 <trans+0x142>
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <holder2.2057>
			LCD_WriteData('.');
     882:	8e e2       	ldi	r24, 0x2E	; 46
     884:	31 dd       	rcall	.-1438   	; 0x2e8 <LCD_WriteData>
     886:	02 e0       	ldi	r16, 0x02	; 2
     888:	10 e0       	ldi	r17, 0x00	; 0
			for(int i = 0; i < 2; i++)
			{
				holder3 = num2/(pow(10,holder2));
     88a:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <num2.2060>
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatsisf>
     898:	4b 01       	movw	r8, r22
     89a:	5c 01       	movw	r10, r24
     89c:	c0 91 53 02 	lds	r28, 0x0253	; 0x800253 <holder2.2057>
     8a0:	6c 2f       	mov	r22, r28
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__floatunsisf>
     8ac:	2b 01       	movw	r4, r22
     8ae:	3c 01       	movw	r6, r24
     8b0:	9b 01       	movw	r18, r22
     8b2:	ac 01       	movw	r20, r24
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	80 e2       	ldi	r24, 0x20	; 32
     8ba:	91 e4       	ldi	r25, 0x41	; 65
     8bc:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <pow>
     8c0:	9b 01       	movw	r18, r22
     8c2:	ac 01       	movw	r20, r24
     8c4:	c5 01       	movw	r24, r10
     8c6:	b4 01       	movw	r22, r8
     8c8:	db d7       	rcall	.+4022   	; 0x1880 <__divsf3>
     8ca:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fixunssfsi>
     8ce:	d6 2f       	mov	r29, r22
				num2 = num2 - (holder3 * pow(10, holder2));
     8d0:	a3 01       	movw	r20, r6
     8d2:	92 01       	movw	r18, r4
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	80 e2       	ldi	r24, 0x20	; 32
     8da:	91 e4       	ldi	r25, 0x41	; 65
     8dc:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <pow>
     8e0:	2b 01       	movw	r4, r22
     8e2:	3c 01       	movw	r6, r24
     8e4:	6d 2f       	mov	r22, r29
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatsisf>
     8f0:	a3 01       	movw	r20, r6
     8f2:	92 01       	movw	r18, r4
     8f4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__mulsf3>
     8f8:	9b 01       	movw	r18, r22
     8fa:	ac 01       	movw	r20, r24
     8fc:	c5 01       	movw	r24, r10
     8fe:	b4 01       	movw	r22, r8
     900:	5a d7       	rcall	.+3764   	; 0x17b6 <__subsf3>
     902:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fixunssfsi>
				LCD_WriteData(changetoChar(holder3));
     906:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <num2.2060>
     90a:	8d 2f       	mov	r24, r29
     90c:	87 dd       	rcall	.-1266   	; 0x41c <changetoChar>
     90e:	ec dc       	rcall	.-1576   	; 0x2e8 <LCD_WriteData>
				holder2--;
     910:	c1 50       	subi	r28, 0x01	; 1
     912:	c0 93 53 02 	sts	0x0253, r28	; 0x800253 <holder2.2057>
     916:	01 50       	subi	r16, 0x01	; 1
     918:	11 09       	sbc	r17, r1
				holder2--;
			}
			
			holder2 = 1;
			LCD_WriteData('.');
			for(int i = 0; i < 2; i++)
     91a:	09 f0       	breq	.+2      	; 0x91e <trans+0x27e>
     91c:	b6 cf       	rjmp	.-148    	; 0x88a <trans+0x1ea>
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			
			//writing $$ of B
			holderMoney = eeprom_read_float((float *)10);
     91e:	8a e0       	ldi	r24, 0x0A	; 10
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <eeprom_read_dword>
     926:	2b 01       	movw	r4, r22
     928:	3c 01       	movw	r6, r24
			
			intval = (int)holderMoney;
     92a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__fixsfsi>
     92e:	4b 01       	movw	r8, r22
     930:	5c 01       	movw	r10, r24
			holderMoney = (holderMoney - (int)holderMoney) * 100;
			decval = (int)holderMoney;
			
			num1 = (unsigned char)intval;
     932:	c6 2f       	mov	r28, r22
     934:	60 93 52 02 	sts	0x0252, r22	; 0x800252 <num1.2059>
			num2 = (unsigned char)decval;
     938:	07 2e       	mov	r0, r23
     93a:	00 0c       	add	r0, r0
     93c:	88 0b       	sbc	r24, r24
     93e:	99 0b       	sbc	r25, r25
     940:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatsisf>
     944:	9b 01       	movw	r18, r22
     946:	ac 01       	movw	r20, r24
     948:	c3 01       	movw	r24, r6
     94a:	b2 01       	movw	r22, r4
     94c:	34 d7       	rcall	.+3688   	; 0x17b6 <__subsf3>
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	48 ec       	ldi	r20, 0xC8	; 200
     954:	52 e4       	ldi	r21, 0x42	; 66
     956:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__mulsf3>
			
			LCD_WriteData(' ');
     95a:	fa d7       	rcall	.+4084   	; 0x1950 <__fixsfsi>
     95c:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <num2.2060>
			LCD_WriteData(' ');
     960:	80 e2       	ldi	r24, 0x20	; 32
     962:	c2 dc       	rcall	.-1660   	; 0x2e8 <LCD_WriteData>
			LCD_WriteData(' ');
     964:	80 e2       	ldi	r24, 0x20	; 32
     966:	c0 dc       	rcall	.-1664   	; 0x2e8 <LCD_WriteData>
     968:	80 e2       	ldi	r24, 0x20	; 32
			
			
			if(num1 >= 99)
     96a:	be dc       	rcall	.-1668   	; 0x2e8 <LCD_WriteData>
     96c:	c3 36       	cpi	r28, 0x63	; 99
			{
				num1++;
     96e:	18 f0       	brcs	.+6      	; 0x976 <trans+0x2d6>
     970:	83 94       	inc	r8
     972:	80 92 52 02 	sts	0x0252, r8	; 0x800252 <num1.2059>
			}
			place = findHowManyB4Dec(num1);
     976:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <num1.2059>
     97a:	6f dd       	rcall	.-1314   	; 0x45a <findHowManyB4Dec>
     97c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <place.2054>
			
			holder2 = place - 1;
     980:	9f ef       	ldi	r25, 0xFF	; 255
     982:	98 0f       	add	r25, r24
     984:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <holder2.2057>
			
			for(int i = 0; i < place; i++)
     988:	e8 2e       	mov	r14, r24
     98a:	f1 2c       	mov	r15, r1
     98c:	1e 14       	cp	r1, r14
     98e:	1f 04       	cpc	r1, r15
     990:	0c f0       	brlt	.+2      	; 0x994 <trans+0x2f4>
     992:	4a c0       	rjmp	.+148    	; 0xa28 <trans+0x388>
     994:	00 e0       	ldi	r16, 0x00	; 0
			{
				holder3 = num1/(pow(10,holder2));
     996:	10 e0       	ldi	r17, 0x00	; 0
     998:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <num1.2059>
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatsisf>
     9a6:	2b 01       	movw	r4, r22
     9a8:	3c 01       	movw	r6, r24
     9aa:	c0 91 53 02 	lds	r28, 0x0253	; 0x800253 <holder2.2057>
     9ae:	6c 2f       	mov	r22, r28
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	fd d7       	rcall	.+4090   	; 0x19b2 <__floatunsisf>
     9b8:	4b 01       	movw	r8, r22
     9ba:	5c 01       	movw	r10, r24
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	80 e2       	ldi	r24, 0x20	; 32
     9c6:	91 e4       	ldi	r25, 0x41	; 65
     9c8:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <pow>
     9cc:	9b 01       	movw	r18, r22
     9ce:	ac 01       	movw	r20, r24
     9d0:	c3 01       	movw	r24, r6
     9d2:	b2 01       	movw	r22, r4
     9d4:	55 d7       	rcall	.+3754   	; 0x1880 <__divsf3>
     9d6:	c1 d7       	rcall	.+3970   	; 0x195a <__fixunssfsi>
				num1 = num1 - (holder3 * pow(10, holder2));
     9d8:	d6 2f       	mov	r29, r22
     9da:	a5 01       	movw	r20, r10
     9dc:	94 01       	movw	r18, r8
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	80 e2       	ldi	r24, 0x20	; 32
     9e4:	91 e4       	ldi	r25, 0x41	; 65
     9e6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <pow>
     9ea:	4b 01       	movw	r8, r22
     9ec:	5c 01       	movw	r10, r24
     9ee:	6d 2f       	mov	r22, r29
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	df d7       	rcall	.+4030   	; 0x19b6 <__floatsisf>
     9f8:	a5 01       	movw	r20, r10
     9fa:	94 01       	movw	r18, r8
     9fc:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__mulsf3>
     a00:	9b 01       	movw	r18, r22
     a02:	ac 01       	movw	r20, r24
     a04:	c3 01       	movw	r24, r6
     a06:	b2 01       	movw	r22, r4
     a08:	d6 d6       	rcall	.+3500   	; 0x17b6 <__subsf3>
     a0a:	a7 d7       	rcall	.+3918   	; 0x195a <__fixunssfsi>
				LCD_WriteData(changetoChar(holder3));
     a0c:	60 93 52 02 	sts	0x0252, r22	; 0x800252 <num1.2059>
     a10:	8d 2f       	mov	r24, r29
				holder2--;
     a12:	04 dd       	rcall	.-1528   	; 0x41c <changetoChar>
     a14:	69 dc       	rcall	.-1838   	; 0x2e8 <LCD_WriteData>
     a16:	c1 50       	subi	r28, 0x01	; 1
			}
			place = findHowManyB4Dec(num1);
			
			holder2 = place - 1;
			
			for(int i = 0; i < place; i++)
     a18:	c0 93 53 02 	sts	0x0253, r28	; 0x800253 <holder2.2057>
     a1c:	0f 5f       	subi	r16, 0xFF	; 255
     a1e:	1f 4f       	sbci	r17, 0xFF	; 255
     a20:	e0 16       	cp	r14, r16
				num1 = num1 - (holder3 * pow(10, holder2));
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			
			holder2 = 1;
     a22:	f1 06       	cpc	r15, r17
     a24:	09 f0       	breq	.+2      	; 0xa28 <trans+0x388>
     a26:	b8 cf       	rjmp	.-144    	; 0x998 <trans+0x2f8>
			LCD_WriteData('.');
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <holder2.2057>
     a2e:	8e e2       	ldi	r24, 0x2E	; 46
     a30:	5b dc       	rcall	.-1866   	; 0x2e8 <LCD_WriteData>
			for(int i = 0; i < 2; i++)
			{
				holder3 = num2/(pow(10,holder2));
     a32:	02 e0       	ldi	r16, 0x02	; 2
     a34:	10 e0       	ldi	r17, 0x00	; 0
     a36:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <num2.2060>
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	ba d7       	rcall	.+3956   	; 0x19b6 <__floatsisf>
     a42:	4b 01       	movw	r8, r22
     a44:	5c 01       	movw	r10, r24
     a46:	c0 91 53 02 	lds	r28, 0x0253	; 0x800253 <holder2.2057>
     a4a:	6c 2f       	mov	r22, r28
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	af d7       	rcall	.+3934   	; 0x19b2 <__floatunsisf>
     a54:	2b 01       	movw	r4, r22
     a56:	3c 01       	movw	r6, r24
     a58:	9b 01       	movw	r18, r22
     a5a:	ac 01       	movw	r20, r24
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	80 e2       	ldi	r24, 0x20	; 32
     a62:	91 e4       	ldi	r25, 0x41	; 65
     a64:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <pow>
     a68:	9b 01       	movw	r18, r22
     a6a:	ac 01       	movw	r20, r24
     a6c:	c5 01       	movw	r24, r10
     a6e:	b4 01       	movw	r22, r8
     a70:	07 d7       	rcall	.+3598   	; 0x1880 <__divsf3>
				num2 = num2 - (holder3 * pow(10, holder2));
     a72:	73 d7       	rcall	.+3814   	; 0x195a <__fixunssfsi>
     a74:	d6 2f       	mov	r29, r22
     a76:	a3 01       	movw	r20, r6
     a78:	92 01       	movw	r18, r4
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	80 e2       	ldi	r24, 0x20	; 32
     a80:	91 e4       	ldi	r25, 0x41	; 65
     a82:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <pow>
     a86:	2b 01       	movw	r4, r22
     a88:	3c 01       	movw	r6, r24
     a8a:	6d 2f       	mov	r22, r29
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	91 d7       	rcall	.+3874   	; 0x19b6 <__floatsisf>
     a94:	a3 01       	movw	r20, r6
     a96:	92 01       	movw	r18, r4
     a98:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__mulsf3>
     a9c:	9b 01       	movw	r18, r22
     a9e:	ac 01       	movw	r20, r24
     aa0:	c5 01       	movw	r24, r10
     aa2:	b4 01       	movw	r22, r8
     aa4:	88 d6       	rcall	.+3344   	; 0x17b6 <__subsf3>
				LCD_WriteData(changetoChar(holder3));
     aa6:	59 d7       	rcall	.+3762   	; 0x195a <__fixunssfsi>
     aa8:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <num2.2060>
     aac:	8d 2f       	mov	r24, r29
     aae:	b6 dc       	rcall	.-1684   	; 0x41c <changetoChar>
				holder2--;
     ab0:	1b dc       	rcall	.-1994   	; 0x2e8 <LCD_WriteData>
     ab2:	c1 50       	subi	r28, 0x01	; 1
     ab4:	c0 93 53 02 	sts	0x0253, r28	; 0x800253 <holder2.2057>
				holder2--;
			}
			
			holder2 = 1;
			LCD_WriteData('.');
			for(int i = 0; i < 2; i++)
     ab8:	01 50       	subi	r16, 0x01	; 1
     aba:	11 09       	sbc	r17, r1
     abc:	09 f0       	breq	.+2      	; 0xac0 <trans+0x420>
     abe:	bb cf       	rjmp	.-138    	; 0xa36 <trans+0x396>
     ac0:	c2 e0       	ldi	r28, 0x02	; 2
		{
			break;
		}
		case payment:
		{
			LCD_DisplayString(1, "Enter Payment:   ");
     ac2:	d0 e0       	ldi	r29, 0x00	; 0
     ac4:	e1 c1       	rjmp	.+962    	; 0xe88 <trans+0x7e8>
     ac6:	66 e3       	ldi	r22, 0x36	; 54
     ac8:	71 e0       	ldi	r23, 0x01	; 1
     aca:	81 e0       	ldi	r24, 0x01	; 1
			break;
     acc:	16 dc       	rcall	.-2004   	; 0x2fa <LCD_DisplayString>
     ace:	c6 e0       	ldi	r28, 0x06	; 6
     ad0:	d0 e0       	ldi	r29, 0x00	; 0
		}
		case payment1:
		{
			key = GetKeypadKey();
     ad2:	da c1       	rjmp	.+948    	; 0xe88 <trans+0x7e8>
     ad4:	da dc       	rcall	.-1612   	; 0x48a <GetKeypadKey>
     ad6:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <key>
			if(key !=  '\0' && key != 'A' && key != 'B' && key!= 'C' && key != 'D')
     ada:	88 23       	and	r24, r24
     adc:	b9 f0       	breq	.+46     	; 0xb0c <trans+0x46c>
     ade:	9f eb       	ldi	r25, 0xBF	; 191
     ae0:	98 0f       	add	r25, r24
     ae2:	94 30       	cpi	r25, 0x04	; 4
     ae4:	98 f0       	brcs	.+38     	; 0xb0c <trans+0x46c>
			{
				LCD_WriteData(key);
     ae6:	00 dc       	rcall	.-2048   	; 0x2e8 <LCD_WriteData>
     ae8:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <key>
				if (key == '.')
     aec:	9e 32       	cpi	r25, 0x2E	; 46
     aee:	21 f4       	brne	.+8      	; 0xaf8 <trans+0x458>
				{
					place = count;
     af0:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <count.2055>
     af4:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <place.2054>
				}
				number[count] = key;
     af8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <count.2055>
     afc:	e8 2f       	mov	r30, r24
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	e6 5b       	subi	r30, 0xB6	; 182
     b02:	fd 4f       	sbci	r31, 0xFD	; 253
     b04:	90 83       	st	Z, r25
				count++;
     b06:	8f 5f       	subi	r24, 0xFF	; 255
     b08:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <count.2055>
			}
			holder2 = place - 1;
     b0c:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <place.2054>
     b10:	81 50       	subi	r24, 0x01	; 1
     b12:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <holder2.2057>
			holder = 0;
			break;
     b16:	c7 e0       	ldi	r28, 0x07	; 7
     b18:	d0 e0       	ldi	r29, 0x00	; 0
		}
		case change:
		{
			LCD_DisplayString(1, "change:          ");
     b1a:	b6 c1       	rjmp	.+876    	; 0xe88 <trans+0x7e8>
     b1c:	68 e4       	ldi	r22, 0x48	; 72
     b1e:	71 e0       	ldi	r23, 0x01	; 1
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	eb db       	rcall	.-2090   	; 0x2fa <LCD_DisplayString>
			for(int i = 0; i < place; i++)
     b24:	80 90 55 02 	lds	r8, 0x0255	; 0x800255 <place.2054>
     b28:	e8 2c       	mov	r14, r8
     b2a:	f1 2c       	mov	r15, r1
     b2c:	1e 14       	cp	r1, r14
     b2e:	1f 04       	cpc	r1, r15
     b30:	0c f0       	brlt	.+2      	; 0xb34 <trans+0x494>
     b32:	3e c0       	rjmp	.+124    	; 0xbb0 <trans+0x510>
     b34:	0a e4       	ldi	r16, 0x4A	; 74
     b36:	12 e0       	ldi	r17, 0x02	; 2
     b38:	c7 01       	movw	r24, r14
     b3a:	9c 01       	movw	r18, r24
     b3c:	26 5b       	subi	r18, 0xB6	; 182
     b3e:	3d 4f       	sbci	r19, 0xFD	; 253
			{
				LCD_WriteData(number[i]);
     b40:	59 01       	movw	r10, r18
     b42:	e8 01       	movw	r28, r16
     b44:	f8 01       	movw	r30, r16
     b46:	81 91       	ld	r24, Z+
				holder = changetoInteger(number[i]);
     b48:	8f 01       	movw	r16, r30
     b4a:	ce db       	rcall	.-2148   	; 0x2e8 <LCD_WriteData>
     b4c:	88 81       	ld	r24, Y
     b4e:	48 dc       	rcall	.-1904   	; 0x3e0 <changetoInteger>
				num1 = holder*pow(10, holder2) + num1;
     b50:	98 2e       	mov	r9, r24
     b52:	c0 91 53 02 	lds	r28, 0x0253	; 0x800253 <holder2.2057>
     b56:	6c 2f       	mov	r22, r28
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	29 d7       	rcall	.+3666   	; 0x19b2 <__floatunsisf>
     b60:	9b 01       	movw	r18, r22
     b62:	ac 01       	movw	r20, r24
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	80 e2       	ldi	r24, 0x20	; 32
     b6a:	91 e4       	ldi	r25, 0x41	; 65
     b6c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <pow>
     b70:	2b 01       	movw	r4, r22
     b72:	3c 01       	movw	r6, r24
     b74:	69 2d       	mov	r22, r9
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	1c d7       	rcall	.+3640   	; 0x19b6 <__floatsisf>
     b7e:	a3 01       	movw	r20, r6
     b80:	92 01       	movw	r18, r4
     b82:	a5 d7       	rcall	.+3914   	; 0x1ace <__mulsf3>
     b84:	2b 01       	movw	r4, r22
     b86:	3c 01       	movw	r6, r24
     b88:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <num1.2059>
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	11 d7       	rcall	.+3618   	; 0x19b6 <__floatsisf>
     b94:	9b 01       	movw	r18, r22
     b96:	ac 01       	movw	r20, r24
     b98:	c3 01       	movw	r24, r6
     b9a:	b2 01       	movw	r22, r4
     b9c:	0d d6       	rcall	.+3098   	; 0x17b8 <__addsf3>
     b9e:	dd d6       	rcall	.+3514   	; 0x195a <__fixunssfsi>
     ba0:	60 93 52 02 	sts	0x0252, r22	; 0x800252 <num1.2059>
     ba4:	c1 50       	subi	r28, 0x01	; 1
				holder2--;
     ba6:	c0 93 53 02 	sts	0x0253, r28	; 0x800253 <holder2.2057>
			break;
		}
		case change:
		{
			LCD_DisplayString(1, "change:          ");
			for(int i = 0; i < place; i++)
     baa:	a0 16       	cp	r10, r16
     bac:	b1 06       	cpc	r11, r17
     bae:	49 f6       	brne	.-110    	; 0xb42 <trans+0x4a2>
				LCD_WriteData(number[i]);
				holder = changetoInteger(number[i]);
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			LCD_WriteData('.');
     bb0:	8e e2       	ldi	r24, 0x2E	; 46
     bb2:	9a db       	rcall	.-2252   	; 0x2e8 <LCD_WriteData>
			holder2 = 1;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <holder2.2057>
			for(int j = place+1; j < count-1; j++)
     bba:	ff ef       	ldi	r31, 0xFF	; 255
     bbc:	ef 1a       	sub	r14, r31
     bbe:	ff 0a       	sbc	r15, r31
     bc0:	a0 90 54 02 	lds	r10, 0x0254	; 0x800254 <count.2055>
     bc4:	b1 2c       	mov	r11, r1
     bc6:	21 e0       	ldi	r18, 0x01	; 1
     bc8:	a2 1a       	sub	r10, r18
     bca:	b1 08       	sbc	r11, r1
     bcc:	ea 14       	cp	r14, r10
     bce:	fb 04       	cpc	r15, r11
     bd0:	0c f0       	brlt	.+2      	; 0xbd4 <trans+0x534>
     bd2:	3e c0       	rjmp	.+124    	; 0xc50 <trans+0x5b0>
     bd4:	08 2d       	mov	r16, r8
     bd6:	10 e0       	ldi	r17, 0x00	; 0
     bd8:	05 5b       	subi	r16, 0xB5	; 181
			{	
				LCD_WriteData(number[j]);
     bda:	1d 4f       	sbci	r17, 0xFD	; 253
     bdc:	e8 01       	movw	r28, r16
     bde:	f8 01       	movw	r30, r16
     be0:	81 91       	ld	r24, Z+
     be2:	8f 01       	movw	r16, r30
				holder = changetoInteger(number[j]);
     be4:	81 db       	rcall	.-2302   	; 0x2e8 <LCD_WriteData>
     be6:	88 81       	ld	r24, Y
     be8:	fb db       	rcall	.-2058   	; 0x3e0 <changetoInteger>
				num2 = holder*pow(10, holder2) + num2;
     bea:	d8 2f       	mov	r29, r24
     bec:	c0 91 53 02 	lds	r28, 0x0253	; 0x800253 <holder2.2057>
     bf0:	6c 2f       	mov	r22, r28
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	dc d6       	rcall	.+3512   	; 0x19b2 <__floatunsisf>
     bfa:	9b 01       	movw	r18, r22
     bfc:	ac 01       	movw	r20, r24
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	80 e2       	ldi	r24, 0x20	; 32
     c04:	91 e4       	ldi	r25, 0x41	; 65
     c06:	c6 d7       	rcall	.+3980   	; 0x1b94 <pow>
     c08:	2b 01       	movw	r4, r22
     c0a:	3c 01       	movw	r6, r24
     c0c:	6d 2f       	mov	r22, r29
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	d0 d6       	rcall	.+3488   	; 0x19b6 <__floatsisf>
     c16:	a3 01       	movw	r20, r6
     c18:	92 01       	movw	r18, r4
     c1a:	59 d7       	rcall	.+3762   	; 0x1ace <__mulsf3>
     c1c:	2b 01       	movw	r4, r22
     c1e:	3c 01       	movw	r6, r24
     c20:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <num2.2060>
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	c5 d6       	rcall	.+3466   	; 0x19b6 <__floatsisf>
     c2c:	9b 01       	movw	r18, r22
     c2e:	ac 01       	movw	r20, r24
     c30:	c3 01       	movw	r24, r6
     c32:	b2 01       	movw	r22, r4
     c34:	c1 d5       	rcall	.+2946   	; 0x17b8 <__addsf3>
     c36:	91 d6       	rcall	.+3362   	; 0x195a <__fixunssfsi>
     c38:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <num2.2060>
				holder2--;
     c3c:	c1 50       	subi	r28, 0x01	; 1
     c3e:	c0 93 53 02 	sts	0x0253, r28	; 0x800253 <holder2.2057>
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			LCD_WriteData('.');
			holder2 = 1;
			for(int j = place+1; j < count-1; j++)
     c42:	ff ef       	ldi	r31, 0xFF	; 255
     c44:	ef 1a       	sub	r14, r31
     c46:	ff 0a       	sbc	r15, r31
     c48:	ea 14       	cp	r14, r10
     c4a:	fb 04       	cpc	r15, r11
				num2 = holder*pow(10, holder2) + num2;
				holder2--;
			}
			
			holderMoney = (float)num1 + ((float)num2/100);
			changeMoney = holderMoney - totalMoney;
     c4c:	0c f4       	brge	.+2      	; 0xc50 <trans+0x5b0>
     c4e:	c6 cf       	rjmp	.-116    	; 0xbdc <trans+0x53c>
     c50:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <num2.2060>
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	ab d6       	rcall	.+3414   	; 0x19b2 <__floatunsisf>
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	48 ec       	ldi	r20, 0xC8	; 200
     c62:	52 e4       	ldi	r21, 0x42	; 66
     c64:	0d d6       	rcall	.+3098   	; 0x1880 <__divsf3>
     c66:	4b 01       	movw	r8, r22
     c68:	5c 01       	movw	r10, r24
     c6a:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <num1.2059>
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	9e d6       	rcall	.+3388   	; 0x19b2 <__floatunsisf>
     c76:	9b 01       	movw	r18, r22
     c78:	ac 01       	movw	r20, r24
     c7a:	c5 01       	movw	r24, r10
     c7c:	b4 01       	movw	r22, r8
     c7e:	9c d5       	rcall	.+2872   	; 0x17b8 <__addsf3>
     c80:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <totalMoney.2050>
     c84:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <totalMoney.2050+0x1>
     c88:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <totalMoney.2050+0x2>
     c8c:	50 91 59 02 	lds	r21, 0x0259	; 0x800259 <totalMoney.2050+0x3>
			holderMoney = (changeMoney - (int)changeMoney) * 100;
     c90:	92 d5       	rcall	.+2852   	; 0x17b6 <__subsf3>
     c92:	2b 01       	movw	r4, r22
     c94:	3c 01       	movw	r6, r24
     c96:	5c d6       	rcall	.+3256   	; 0x1950 <__fixsfsi>
			decval = (int)holderMoney;
			intval = (int)changeMoney;
			
			num1 = (unsigned char)intval;
     c98:	4b 01       	movw	r8, r22
     c9a:	5c 01       	movw	r10, r24
			num2 = (unsigned char)decval;
     c9c:	c6 2f       	mov	r28, r22
     c9e:	60 93 52 02 	sts	0x0252, r22	; 0x800252 <num1.2059>
     ca2:	07 2e       	mov	r0, r23
     ca4:	00 0c       	add	r0, r0
     ca6:	88 0b       	sbc	r24, r24
     ca8:	99 0b       	sbc	r25, r25
     caa:	85 d6       	rcall	.+3338   	; 0x19b6 <__floatsisf>
     cac:	9b 01       	movw	r18, r22
     cae:	ac 01       	movw	r20, r24
     cb0:	c3 01       	movw	r24, r6
     cb2:	b2 01       	movw	r22, r4
     cb4:	80 d5       	rcall	.+2816   	; 0x17b6 <__subsf3>
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	48 ec       	ldi	r20, 0xC8	; 200
     cbc:	52 e4       	ldi	r21, 0x42	; 66
     cbe:	07 d7       	rcall	.+3598   	; 0x1ace <__mulsf3>
     cc0:	47 d6       	rcall	.+3214   	; 0x1950 <__fixsfsi>
			
			LCD_WriteData(' ');
     cc2:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <num2.2060>
			
			
			if(num1 >= 99)
     cc6:	80 e2       	ldi	r24, 0x20	; 32
     cc8:	0f db       	rcall	.-2530   	; 0x2e8 <LCD_WriteData>
			{
				num1++;
     cca:	c3 36       	cpi	r28, 0x63	; 99
     ccc:	18 f0       	brcs	.+6      	; 0xcd4 <trans+0x634>
     cce:	83 94       	inc	r8
			}
			place = findHowManyB4Dec(num1);
     cd0:	80 92 52 02 	sts	0x0252, r8	; 0x800252 <num1.2059>
     cd4:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <num1.2059>
     cd8:	c0 db       	rcall	.-2176   	; 0x45a <findHowManyB4Dec>
     cda:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <place.2054>
			
			holder2 = place - 1;
     cde:	9f ef       	ldi	r25, 0xFF	; 255
     ce0:	98 0f       	add	r25, r24
     ce2:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <holder2.2057>
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     ce6:	e8 2e       	mov	r14, r24
     ce8:	f1 2c       	mov	r15, r1
     cea:	1e 14       	cp	r1, r14
     cec:	1f 04       	cpc	r1, r15
     cee:	0c f0       	brlt	.+2      	; 0xcf2 <trans+0x652>
			{
				holder3 = num1/(pow(10,holder2));
     cf0:	46 c0       	rjmp	.+140    	; 0xd7e <trans+0x6de>
     cf2:	00 e0       	ldi	r16, 0x00	; 0
     cf4:	10 e0       	ldi	r17, 0x00	; 0
     cf6:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <num1.2059>
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	5a d6       	rcall	.+3252   	; 0x19b6 <__floatsisf>
     d02:	2b 01       	movw	r4, r22
     d04:	3c 01       	movw	r6, r24
     d06:	c0 91 53 02 	lds	r28, 0x0253	; 0x800253 <holder2.2057>
     d0a:	6c 2f       	mov	r22, r28
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	4f d6       	rcall	.+3230   	; 0x19b2 <__floatunsisf>
     d14:	4b 01       	movw	r8, r22
     d16:	5c 01       	movw	r10, r24
     d18:	9b 01       	movw	r18, r22
     d1a:	ac 01       	movw	r20, r24
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	80 e2       	ldi	r24, 0x20	; 32
     d22:	91 e4       	ldi	r25, 0x41	; 65
     d24:	37 d7       	rcall	.+3694   	; 0x1b94 <pow>
     d26:	9b 01       	movw	r18, r22
     d28:	ac 01       	movw	r20, r24
     d2a:	c3 01       	movw	r24, r6
				num1 = num1 - (holder3 * pow(10, holder2));
     d2c:	b2 01       	movw	r22, r4
     d2e:	a8 d5       	rcall	.+2896   	; 0x1880 <__divsf3>
     d30:	14 d6       	rcall	.+3112   	; 0x195a <__fixunssfsi>
     d32:	d6 2f       	mov	r29, r22
     d34:	a5 01       	movw	r20, r10
     d36:	94 01       	movw	r18, r8
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	80 e2       	ldi	r24, 0x20	; 32
     d3e:	91 e4       	ldi	r25, 0x41	; 65
     d40:	29 d7       	rcall	.+3666   	; 0x1b94 <pow>
     d42:	4b 01       	movw	r8, r22
     d44:	5c 01       	movw	r10, r24
     d46:	6d 2f       	mov	r22, r29
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	33 d6       	rcall	.+3174   	; 0x19b6 <__floatsisf>
     d50:	a5 01       	movw	r20, r10
     d52:	94 01       	movw	r18, r8
     d54:	bc d6       	rcall	.+3448   	; 0x1ace <__mulsf3>
     d56:	9b 01       	movw	r18, r22
     d58:	ac 01       	movw	r20, r24
     d5a:	c3 01       	movw	r24, r6
     d5c:	b2 01       	movw	r22, r4
				LCD_WriteData(changetoChar(holder3));
     d5e:	2b d5       	rcall	.+2646   	; 0x17b6 <__subsf3>
     d60:	fc d5       	rcall	.+3064   	; 0x195a <__fixunssfsi>
     d62:	60 93 52 02 	sts	0x0252, r22	; 0x800252 <num1.2059>
				holder2--;
     d66:	8d 2f       	mov	r24, r29
     d68:	59 db       	rcall	.-2382   	; 0x41c <changetoChar>
     d6a:	be da       	rcall	.-2692   	; 0x2e8 <LCD_WriteData>
			
			holder2 = place - 1;
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     d6c:	c1 50       	subi	r28, 0x01	; 1
     d6e:	c0 93 53 02 	sts	0x0253, r28	; 0x800253 <holder2.2057>
     d72:	0f 5f       	subi	r16, 0xFF	; 255
				num1 = num1 - (holder3 * pow(10, holder2));
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			
			holder2 = 1;
     d74:	1f 4f       	sbci	r17, 0xFF	; 255
			LCD_WriteData('.');
     d76:	e0 16       	cp	r14, r16
     d78:	f1 06       	cpc	r15, r17
     d7a:	09 f0       	breq	.+2      	; 0xd7e <trans+0x6de>
     d7c:	bc cf       	rjmp	.-136    	; 0xcf6 <trans+0x656>
     d7e:	81 e0       	ldi	r24, 0x01	; 1
			for(int i = 0; i < 2; i++)
			{
				holder3 = num2/(pow(10,holder2));
     d80:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <holder2.2057>
     d84:	8e e2       	ldi	r24, 0x2E	; 46
     d86:	b0 da       	rcall	.-2720   	; 0x2e8 <LCD_WriteData>
     d88:	02 e0       	ldi	r16, 0x02	; 2
     d8a:	10 e0       	ldi	r17, 0x00	; 0
     d8c:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <num2.2060>
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0f d6       	rcall	.+3102   	; 0x19b6 <__floatsisf>
     d98:	4b 01       	movw	r8, r22
     d9a:	5c 01       	movw	r10, r24
     d9c:	c0 91 53 02 	lds	r28, 0x0253	; 0x800253 <holder2.2057>
     da0:	6c 2f       	mov	r22, r28
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	04 d6       	rcall	.+3080   	; 0x19b2 <__floatunsisf>
     daa:	2b 01       	movw	r4, r22
     dac:	3c 01       	movw	r6, r24
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	80 e2       	ldi	r24, 0x20	; 32
     db8:	91 e4       	ldi	r25, 0x41	; 65
     dba:	ec d6       	rcall	.+3544   	; 0x1b94 <pow>
     dbc:	9b 01       	movw	r18, r22
     dbe:	ac 01       	movw	r20, r24
     dc0:	c5 01       	movw	r24, r10
				num2 = num2 - (holder3 * pow(10, holder2));
     dc2:	b4 01       	movw	r22, r8
     dc4:	5d d5       	rcall	.+2746   	; 0x1880 <__divsf3>
     dc6:	c9 d5       	rcall	.+2962   	; 0x195a <__fixunssfsi>
     dc8:	d6 2f       	mov	r29, r22
     dca:	a3 01       	movw	r20, r6
     dcc:	92 01       	movw	r18, r4
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	80 e2       	ldi	r24, 0x20	; 32
     dd4:	91 e4       	ldi	r25, 0x41	; 65
     dd6:	de d6       	rcall	.+3516   	; 0x1b94 <pow>
     dd8:	2b 01       	movw	r4, r22
     dda:	3c 01       	movw	r6, r24
     ddc:	6d 2f       	mov	r22, r29
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	e8 d5       	rcall	.+3024   	; 0x19b6 <__floatsisf>
     de6:	a3 01       	movw	r20, r6
     de8:	92 01       	movw	r18, r4
     dea:	71 d6       	rcall	.+3298   	; 0x1ace <__mulsf3>
     dec:	9b 01       	movw	r18, r22
     dee:	ac 01       	movw	r20, r24
     df0:	c5 01       	movw	r24, r10
     df2:	b4 01       	movw	r22, r8
     df4:	e0 d4       	rcall	.+2496   	; 0x17b6 <__subsf3>
				LCD_WriteData(changetoChar(holder3));
     df6:	b1 d5       	rcall	.+2914   	; 0x195a <__fixunssfsi>
     df8:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <num2.2060>
     dfc:	8d 2f       	mov	r24, r29
     dfe:	0e db       	rcall	.-2532   	; 0x41c <changetoChar>
				holder2--;
     e00:	73 da       	rcall	.-2842   	; 0x2e8 <LCD_WriteData>
     e02:	c1 50       	subi	r28, 0x01	; 1
     e04:	c0 93 53 02 	sts	0x0253, r28	; 0x800253 <holder2.2057>
     e08:	01 50       	subi	r16, 0x01	; 1
				holder2--;
			}
			
			holder2 = 1;
			LCD_WriteData('.');
			for(int i = 0; i < 2; i++)
     e0a:	11 09       	sbc	r17, r1
     e0c:	09 f0       	breq	.+2      	; 0xe10 <trans+0x770>
     e0e:	be cf       	rjmp	.-132    	; 0xd8c <trans+0x6ec>
     e10:	c8 e0       	ldi	r28, 0x08	; 8
     e12:	d0 e0       	ldi	r29, 0x00	; 0
	
	switch (state)
	{
		case startT:
		{
			state = pauseT;
     e14:	39 c0       	rjmp	.+114    	; 0xe88 <trans+0x7e8>
     e16:	c1 e0       	ldi	r28, 0x01	; 1
     e18:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		case options:
		{
			state = options1;
     e1a:	36 c0       	rjmp	.+108    	; 0xe88 <trans+0x7e8>
     e1c:	c3 e0       	ldi	r28, 0x03	; 3
     e1e:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		default:
		{
			state = startT;
     e20:	33 c0       	rjmp	.+102    	; 0xe88 <trans+0x7e8>
     e22:	c0 e0       	ldi	r28, 0x00	; 0
     e24:	d0 e0       	ldi	r29, 0x00	; 0
     e26:	30 c0       	rjmp	.+96     	; 0xe88 <trans+0x7e8>
     e28:	c9 e0       	ldi	r28, 0x09	; 9
     e2a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
		case picked:
		{
			LCD_DisplayString(1, "Done  |  AddItem A    |    B");
     e2c:	2d c0       	rjmp	.+90     	; 0xe88 <trans+0x7e8>
     e2e:	6a e5       	ldi	r22, 0x5A	; 90
     e30:	71 e0       	ldi	r23, 0x01	; 1
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	62 da       	rcall	.-2876   	; 0x2fa <LCD_DisplayString>
			break;
     e36:	c4 e0       	ldi	r28, 0x04	; 4
     e38:	d0 e0       	ldi	r29, 0x00	; 0
		default:
		{
			break;
		}
	}
	return state;
     e3a:	26 c0       	rjmp	.+76     	; 0xe88 <trans+0x7e8>
		{
			break;
		}
		case options:
		{
			LCD_DisplayString(1, "A       B           ");
     e3c:	67 e7       	ldi	r22, 0x77	; 119
     e3e:	71 e0       	ldi	r23, 0x01	; 1
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	5b da       	rcall	.-2890   	; 0x2fa <LCD_DisplayString>
     e44:	81 e0       	ldi	r24, 0x01	; 1
			
			holderMoney = eeprom_read_float((float *)1);
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <eeprom_read_dword>
     e4c:	2b 01       	movw	r4, r22
     e4e:	3c 01       	movw	r6, r24
     e50:	7f d5       	rcall	.+2814   	; 0x1950 <__fixsfsi>

			intval = (int)holderMoney;
     e52:	4b 01       	movw	r8, r22
     e54:	5c 01       	movw	r10, r24
     e56:	c6 2f       	mov	r28, r22
     e58:	60 93 52 02 	sts	0x0252, r22	; 0x800252 <num1.2059>
			holderMoney = (holderMoney - (int)holderMoney) * 100;
			decval = (int)holderMoney;
			
			num1 = (unsigned char)intval;
     e5c:	07 2e       	mov	r0, r23
     e5e:	00 0c       	add	r0, r0
			num2 = (unsigned char)decval;
     e60:	88 0b       	sbc	r24, r24
     e62:	99 0b       	sbc	r25, r25
     e64:	a8 d5       	rcall	.+2896   	; 0x19b6 <__floatsisf>
     e66:	9b 01       	movw	r18, r22
     e68:	ac 01       	movw	r20, r24
     e6a:	c3 01       	movw	r24, r6
     e6c:	b2 01       	movw	r22, r4
     e6e:	a3 d4       	rcall	.+2374   	; 0x17b6 <__subsf3>
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	48 ec       	ldi	r20, 0xC8	; 200
     e76:	52 e4       	ldi	r21, 0x42	; 66
     e78:	2a d6       	rcall	.+3156   	; 0x1ace <__mulsf3>
     e7a:	6a d5       	rcall	.+2772   	; 0x1950 <__fixsfsi>
     e7c:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <num2.2060>
     e80:	c3 36       	cpi	r28, 0x63	; 99
     e82:	08 f0       	brcs	.+2      	; 0xe86 <trans+0x7e6>
     e84:	9a cc       	rjmp	.-1740   	; 0x7ba <trans+0x11a>
     e86:	9c cc       	rjmp	.-1736   	; 0x7c0 <trans+0x120>
     e88:	ce 01       	movw	r24, r28
     e8a:	df 91       	pop	r29
			
			
			if(num1 >= 99)
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
		{
			break;
		}
	}
	return state;
}
     e94:	ef 90       	pop	r14
     e96:	bf 90       	pop	r11
     e98:	af 90       	pop	r10
     e9a:	9f 90       	pop	r9
     e9c:	8f 90       	pop	r8
     e9e:	7f 90       	pop	r7
     ea0:	6f 90       	pop	r6
     ea2:	5f 90       	pop	r5
     ea4:	4f 90       	pop	r4
     ea6:	08 95       	ret

00000ea8 <setting>:
     ea8:	4f 92       	push	r4
     eaa:	5f 92       	push	r5
     eac:	6f 92       	push	r6
     eae:	7f 92       	push	r7
     eb0:	8f 92       	push	r8
     eb2:	9f 92       	push	r9

int setting(int state)
{
     eb4:	af 92       	push	r10
     eb6:	bf 92       	push	r11
     eb8:	cf 92       	push	r12
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	ec 01       	movw	r28, r24
	static unsigned char holder, holder2, holder3, num1, num2;
	static int decval, intval;
	static unsigned char number[7] = {0};

	
	switch(state)
     eca:	89 30       	cpi	r24, 0x09	; 9
     ecc:	91 05       	cpc	r25, r1
     ece:	08 f0       	brcs	.+2      	; 0xed2 <setting+0x2a>
     ed0:	2b c3       	rjmp	.+1622   	; 0x1528 <setting+0x680>
     ed2:	fc 01       	movw	r30, r24
     ed4:	ed 59       	subi	r30, 0x9D	; 157
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	c2 c7       	rjmp	.+3972   	; 0x1e5e <__tablejump2__>
			break;
		}
		case pauseS:
		{
			holderMoney = 0;
			place = 0;
     eda:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <place.2133>
			count = 0;
     ede:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <count.2134>
			holder = 0;
			holder2 = 0;
     ee2:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <holder2.2137>
			whichAddr = 0;
     ee6:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <whichAddr.2135>
			holder3 = 0;
			num1 = 0;
     eea:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <num1.2139>
			num2 = 0;
     eee:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <num2.2140>
			clearArray(number, 7);
     ef2:	67 e0       	ldi	r22, 0x07	; 7
     ef4:	8d e3       	ldi	r24, 0x3D	; 61
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	be da       	rcall	.-2692   	; 0x476 <clearArray>
			if(pos == 4)
     efa:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pos>
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	09 f0       	breq	.+2      	; 0xf04 <setting+0x5c>
     f02:	28 c3       	rjmp	.+1616   	; 0x1554 <setting+0x6ac>
			{
				state = opt;
				LCD_DisplayString(1, "  A    |   B      code |   items");
     f04:	6c e8       	ldi	r22, 0x8C	; 140
     f06:	71 e0       	ldi	r23, 0x01	; 1
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	f7 d9       	rcall	.-3090   	; 0x2fa <LCD_DisplayString>
			num1 = 0;
			num2 = 0;
			clearArray(number, 7);
			if(pos == 4)
			{
				state = opt;
     f0c:	c2 e0       	ldi	r28, 0x02	; 2
     f0e:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		case opt:
		{
			key = GetKeypadKey();
     f10:	21 c3       	rjmp	.+1602   	; 0x1554 <setting+0x6ac>
     f12:	bb da       	rcall	.-2698   	; 0x48a <GetKeypadKey>
     f14:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <key>
			if (key == 'A')
     f18:	81 34       	cpi	r24, 0x41	; 65
     f1a:	29 f4       	brne	.+10     	; 0xf26 <setting+0x7e>
			{
				state = codeSet;
				LCD_DisplayString(1, "enter new code:  ");
     f1c:	6d ea       	ldi	r22, 0xAD	; 173
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	eb d9       	rcall	.-3114   	; 0x2fa <LCD_DisplayString>
     f24:	07 c3       	rjmp	.+1550   	; 0x1534 <setting+0x68c>
			}
			else if(key == 'B')
     f26:	82 34       	cpi	r24, 0x42	; 66
     f28:	09 f0       	breq	.+2      	; 0xf2c <setting+0x84>
			{
				LCD_DisplayString(1, "A     B           ");
     f2a:	14 c3       	rjmp	.+1576   	; 0x1554 <setting+0x6ac>
     f2c:	6f eb       	ldi	r22, 0xBF	; 191
     f2e:	71 e0       	ldi	r23, 0x01	; 1
     f30:	81 e0       	ldi	r24, 0x01	; 1
				
				//writing $$ of A
				holderMoney = eeprom_read_float((float *)1);
     f32:	e3 d9       	rcall	.-3130   	; 0x2fa <LCD_DisplayString>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a3 d7       	rcall	.+3910   	; 0x1e80 <eeprom_read_dword>
     f3a:	4b 01       	movw	r8, r22
				
				intval = (int)holderMoney;
     f3c:	5c 01       	movw	r10, r24
     f3e:	08 d5       	rcall	.+2576   	; 0x1950 <__fixsfsi>
     f40:	6b 01       	movw	r12, r22
     f42:	7c 01       	movw	r14, r24
     f44:	70 93 3c 02 	sts	0x023C, r23	; 0x80023c <intval.2142+0x1>
     f48:	60 93 3b 02 	sts	0x023B, r22	; 0x80023b <intval.2142>
				holderMoney = (holderMoney - (int)holderMoney) * 100;
				decval = (int)holderMoney;
				
				num1 = (unsigned char)intval;
     f4c:	c6 2f       	mov	r28, r22
     f4e:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <num1.2139>
				num2 = (unsigned char)decval;
     f52:	07 2e       	mov	r0, r23
     f54:	00 0c       	add	r0, r0
     f56:	88 0b       	sbc	r24, r24
     f58:	99 0b       	sbc	r25, r25
     f5a:	2d d5       	rcall	.+2650   	; 0x19b6 <__floatsisf>
     f5c:	9b 01       	movw	r18, r22
     f5e:	ac 01       	movw	r20, r24
     f60:	c5 01       	movw	r24, r10
     f62:	b4 01       	movw	r22, r8
     f64:	28 d4       	rcall	.+2128   	; 0x17b6 <__subsf3>
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	48 ec       	ldi	r20, 0xC8	; 200
     f6c:	52 e4       	ldi	r21, 0x42	; 66
     f6e:	af d5       	rcall	.+2910   	; 0x1ace <__mulsf3>
     f70:	ef d4       	rcall	.+2526   	; 0x1950 <__fixsfsi>
     f72:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <num2.2140>
								
				
				if(num1 >= 99)
     f76:	c3 36       	cpi	r28, 0x63	; 99
     f78:	18 f0       	brcs	.+6      	; 0xf80 <setting+0xd8>
				{
					num1++;
     f7a:	c3 94       	inc	r12
     f7c:	c0 92 45 02 	sts	0x0245, r12	; 0x800245 <num1.2139>
				}
				place = findHowManyB4Dec(num1);
     f80:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <num1.2139>
     f84:	6a da       	rcall	.-2860   	; 0x45a <findHowManyB4Dec>
     f86:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <place.2133>
     f8a:	9f ef       	ldi	r25, 0xFF	; 255
				
				holder2 = place - 1;
     f8c:	98 0f       	add	r25, r24
     f8e:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <holder2.2137>
     f92:	e8 2e       	mov	r14, r24
				
				unsigned char holder3 = 0;
				
				for(int i = 0; i < place; i++)
     f94:	f1 2c       	mov	r15, r1
     f96:	1e 14       	cp	r1, r14
     f98:	1f 04       	cpc	r1, r15
     f9a:	0c f0       	brlt	.+2      	; 0xf9e <setting+0xf6>
     f9c:	46 c0       	rjmp	.+140    	; 0x102a <setting+0x182>
     f9e:	00 e0       	ldi	r16, 0x00	; 0
     fa0:	10 e0       	ldi	r17, 0x00	; 0
				{
					holder3 = num1/(pow(10,holder2));
     fa2:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <num1.2139>
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	04 d5       	rcall	.+2568   	; 0x19b6 <__floatsisf>
     fae:	2b 01       	movw	r4, r22
     fb0:	3c 01       	movw	r6, r24
     fb2:	c0 91 47 02 	lds	r28, 0x0247	; 0x800247 <holder2.2137>
     fb6:	6c 2f       	mov	r22, r28
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	f9 d4       	rcall	.+2546   	; 0x19b2 <__floatunsisf>
     fc0:	4b 01       	movw	r8, r22
     fc2:	5c 01       	movw	r10, r24
     fc4:	9b 01       	movw	r18, r22
     fc6:	ac 01       	movw	r20, r24
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	80 e2       	ldi	r24, 0x20	; 32
     fce:	91 e4       	ldi	r25, 0x41	; 65
     fd0:	e1 d5       	rcall	.+3010   	; 0x1b94 <pow>
     fd2:	9b 01       	movw	r18, r22
     fd4:	ac 01       	movw	r20, r24
     fd6:	c3 01       	movw	r24, r6
     fd8:	b2 01       	movw	r22, r4
     fda:	52 d4       	rcall	.+2212   	; 0x1880 <__divsf3>
     fdc:	be d4       	rcall	.+2428   	; 0x195a <__fixunssfsi>
     fde:	d6 2f       	mov	r29, r22
					num1 = num1 - (holder3 * pow(10, holder2));
     fe0:	a5 01       	movw	r20, r10
     fe2:	94 01       	movw	r18, r8
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	80 e2       	ldi	r24, 0x20	; 32
     fea:	91 e4       	ldi	r25, 0x41	; 65
     fec:	d3 d5       	rcall	.+2982   	; 0x1b94 <pow>
     fee:	4b 01       	movw	r8, r22
     ff0:	5c 01       	movw	r10, r24
     ff2:	6d 2f       	mov	r22, r29
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	dd d4       	rcall	.+2490   	; 0x19b6 <__floatsisf>
     ffc:	a5 01       	movw	r20, r10
     ffe:	94 01       	movw	r18, r8
    1000:	66 d5       	rcall	.+2764   	; 0x1ace <__mulsf3>
    1002:	9b 01       	movw	r18, r22
    1004:	ac 01       	movw	r20, r24
    1006:	c3 01       	movw	r24, r6
    1008:	b2 01       	movw	r22, r4
    100a:	d5 d3       	rcall	.+1962   	; 0x17b6 <__subsf3>
    100c:	a6 d4       	rcall	.+2380   	; 0x195a <__fixunssfsi>
    100e:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <num1.2139>
					LCD_WriteData(changetoChar(holder3));
    1012:	8d 2f       	mov	r24, r29
    1014:	03 da       	rcall	.-3066   	; 0x41c <changetoChar>
    1016:	68 d9       	rcall	.-3376   	; 0x2e8 <LCD_WriteData>
    1018:	c1 50       	subi	r28, 0x01	; 1
					holder2--;
    101a:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <holder2.2137>
    101e:	0f 5f       	subi	r16, 0xFF	; 255
				
				holder2 = place - 1;
				
				unsigned char holder3 = 0;
				
				for(int i = 0; i < place; i++)
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	0e 15       	cp	r16, r14
    1024:	1f 05       	cpc	r17, r15
    1026:	09 f0       	breq	.+2      	; 0x102a <setting+0x182>
    1028:	bc cf       	rjmp	.-136    	; 0xfa2 <setting+0xfa>
					num1 = num1 - (holder3 * pow(10, holder2));
					LCD_WriteData(changetoChar(holder3));
					holder2--;
				}
				
				holder2 = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <holder2.2137>
				LCD_WriteData('.');
    1030:	8e e2       	ldi	r24, 0x2E	; 46
    1032:	5a d9       	rcall	.-3404   	; 0x2e8 <LCD_WriteData>
    1034:	02 e0       	ldi	r16, 0x02	; 2
    1036:	10 e0       	ldi	r17, 0x00	; 0
				for(int i = 0; i < 2; i++)
				{
					holder3 = num2/(pow(10,holder2));
    1038:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <num2.2140>
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	b9 d4       	rcall	.+2418   	; 0x19b6 <__floatsisf>
    1044:	6b 01       	movw	r12, r22
    1046:	7c 01       	movw	r14, r24
    1048:	c0 91 47 02 	lds	r28, 0x0247	; 0x800247 <holder2.2137>
    104c:	6c 2f       	mov	r22, r28
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	ae d4       	rcall	.+2396   	; 0x19b2 <__floatunsisf>
    1056:	4b 01       	movw	r8, r22
    1058:	5c 01       	movw	r10, r24
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 e2       	ldi	r24, 0x20	; 32
    1064:	91 e4       	ldi	r25, 0x41	; 65
    1066:	96 d5       	rcall	.+2860   	; 0x1b94 <pow>
    1068:	9b 01       	movw	r18, r22
    106a:	ac 01       	movw	r20, r24
    106c:	c7 01       	movw	r24, r14
    106e:	b6 01       	movw	r22, r12
    1070:	07 d4       	rcall	.+2062   	; 0x1880 <__divsf3>
					num2 = num2 - (holder3 * pow(10, holder2));
    1072:	73 d4       	rcall	.+2278   	; 0x195a <__fixunssfsi>
    1074:	d6 2f       	mov	r29, r22
    1076:	a5 01       	movw	r20, r10
    1078:	94 01       	movw	r18, r8
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	80 e2       	ldi	r24, 0x20	; 32
    1080:	91 e4       	ldi	r25, 0x41	; 65
    1082:	88 d5       	rcall	.+2832   	; 0x1b94 <pow>
    1084:	4b 01       	movw	r8, r22
    1086:	5c 01       	movw	r10, r24
    1088:	6d 2f       	mov	r22, r29
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	92 d4       	rcall	.+2340   	; 0x19b6 <__floatsisf>
    1092:	a5 01       	movw	r20, r10
    1094:	94 01       	movw	r18, r8
    1096:	1b d5       	rcall	.+2614   	; 0x1ace <__mulsf3>
    1098:	9b 01       	movw	r18, r22
    109a:	ac 01       	movw	r20, r24
    109c:	c7 01       	movw	r24, r14
    109e:	b6 01       	movw	r22, r12
    10a0:	8a d3       	rcall	.+1812   	; 0x17b6 <__subsf3>
    10a2:	5b d4       	rcall	.+2230   	; 0x195a <__fixunssfsi>
    10a4:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <num2.2140>
					LCD_WriteData(changetoChar(holder3));
    10a8:	8d 2f       	mov	r24, r29
    10aa:	b8 d9       	rcall	.-3216   	; 0x41c <changetoChar>
    10ac:	1d d9       	rcall	.-3526   	; 0x2e8 <LCD_WriteData>
    10ae:	c1 50       	subi	r28, 0x01	; 1
					holder2--;
    10b0:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <holder2.2137>
    10b4:	01 50       	subi	r16, 0x01	; 1
					holder2--;
				}
				
				holder2 = 1;
				LCD_WriteData('.');
				for(int i = 0; i < 2; i++)
    10b6:	11 09       	sbc	r17, r1
					LCD_WriteData(changetoChar(holder3));
					holder2--;
				}
				
				//writing $$ of B
				holderMoney = eeprom_read_float((float *)10);
    10b8:	09 f0       	breq	.+2      	; 0x10bc <setting+0x214>
    10ba:	be cf       	rjmp	.-132    	; 0x1038 <setting+0x190>
    10bc:	8a e0       	ldi	r24, 0x0A	; 10
    10be:	90 e0       	ldi	r25, 0x00	; 0
				
				intval = (int)holderMoney;
    10c0:	df d6       	rcall	.+3518   	; 0x1e80 <eeprom_read_dword>
    10c2:	4b 01       	movw	r8, r22
    10c4:	5c 01       	movw	r10, r24
    10c6:	44 d4       	rcall	.+2184   	; 0x1950 <__fixsfsi>
    10c8:	6b 01       	movw	r12, r22
    10ca:	7c 01       	movw	r14, r24
    10cc:	70 93 3c 02 	sts	0x023C, r23	; 0x80023c <intval.2142+0x1>
				holderMoney = (holderMoney - (int)holderMoney) * 100;
				decval = (int)holderMoney;
				
				num1 = (unsigned char)intval;
    10d0:	60 93 3b 02 	sts	0x023B, r22	; 0x80023b <intval.2142>
				num2 = (unsigned char)decval;
    10d4:	c6 2f       	mov	r28, r22
    10d6:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <num1.2139>
    10da:	07 2e       	mov	r0, r23
    10dc:	00 0c       	add	r0, r0
    10de:	88 0b       	sbc	r24, r24
    10e0:	99 0b       	sbc	r25, r25
    10e2:	69 d4       	rcall	.+2258   	; 0x19b6 <__floatsisf>
    10e4:	9b 01       	movw	r18, r22
    10e6:	ac 01       	movw	r20, r24
    10e8:	c5 01       	movw	r24, r10
    10ea:	b4 01       	movw	r22, r8
    10ec:	64 d3       	rcall	.+1736   	; 0x17b6 <__subsf3>
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	48 ec       	ldi	r20, 0xC8	; 200
    10f4:	52 e4       	ldi	r21, 0x42	; 66
    10f6:	eb d4       	rcall	.+2518   	; 0x1ace <__mulsf3>
    10f8:	2b d4       	rcall	.+2134   	; 0x1950 <__fixsfsi>
    10fa:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <num2.2140>
				
				LCD_WriteData(' ');
    10fe:	80 e2       	ldi	r24, 0x20	; 32
    1100:	f3 d8       	rcall	.-3610   	; 0x2e8 <LCD_WriteData>
				LCD_WriteData(' ');
    1102:	80 e2       	ldi	r24, 0x20	; 32
    1104:	f1 d8       	rcall	.-3614   	; 0x2e8 <LCD_WriteData>
    1106:	80 e2       	ldi	r24, 0x20	; 32
				LCD_WriteData(' ');
    1108:	ef d8       	rcall	.-3618   	; 0x2e8 <LCD_WriteData>
    110a:	c3 36       	cpi	r28, 0x63	; 99
    110c:	18 f0       	brcs	.+6      	; 0x1114 <setting+0x26c>
				
				
				if(num1 >= 99)
    110e:	c3 94       	inc	r12
				{
					num1++;
    1110:	c0 92 45 02 	sts	0x0245, r12	; 0x800245 <num1.2139>
    1114:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <num1.2139>
				}
				place = findHowManyB4Dec(num1);
    1118:	a0 d9       	rcall	.-3264   	; 0x45a <findHowManyB4Dec>
    111a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <place.2133>
				
				holder2 = place - 1;
    111e:	9f ef       	ldi	r25, 0xFF	; 255
    1120:	98 0f       	add	r25, r24
    1122:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <holder2.2137>
				
				for(int i = 0; i < place; i++)
    1126:	e8 2e       	mov	r14, r24
    1128:	f1 2c       	mov	r15, r1
    112a:	1e 14       	cp	r1, r14
    112c:	1f 04       	cpc	r1, r15
    112e:	0c f0       	brlt	.+2      	; 0x1132 <setting+0x28a>
    1130:	46 c0       	rjmp	.+140    	; 0x11be <setting+0x316>
				{
					holder3 = num1/(pow(10,holder2));
    1132:	00 e0       	ldi	r16, 0x00	; 0
    1134:	10 e0       	ldi	r17, 0x00	; 0
    1136:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <num1.2139>
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	3a d4       	rcall	.+2164   	; 0x19b6 <__floatsisf>
    1142:	2b 01       	movw	r4, r22
    1144:	3c 01       	movw	r6, r24
    1146:	c0 91 47 02 	lds	r28, 0x0247	; 0x800247 <holder2.2137>
    114a:	6c 2f       	mov	r22, r28
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	2f d4       	rcall	.+2142   	; 0x19b2 <__floatunsisf>
    1154:	4b 01       	movw	r8, r22
    1156:	5c 01       	movw	r10, r24
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	80 e2       	ldi	r24, 0x20	; 32
    1162:	91 e4       	ldi	r25, 0x41	; 65
    1164:	17 d5       	rcall	.+2606   	; 0x1b94 <pow>
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	c3 01       	movw	r24, r6
    116c:	b2 01       	movw	r22, r4
					num1 = num1 - (holder3 * pow(10, holder2));
    116e:	88 d3       	rcall	.+1808   	; 0x1880 <__divsf3>
    1170:	f4 d3       	rcall	.+2024   	; 0x195a <__fixunssfsi>
    1172:	d6 2f       	mov	r29, r22
    1174:	a5 01       	movw	r20, r10
    1176:	94 01       	movw	r18, r8
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	80 e2       	ldi	r24, 0x20	; 32
    117e:	91 e4       	ldi	r25, 0x41	; 65
    1180:	09 d5       	rcall	.+2578   	; 0x1b94 <pow>
    1182:	4b 01       	movw	r8, r22
    1184:	5c 01       	movw	r10, r24
    1186:	6d 2f       	mov	r22, r29
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	13 d4       	rcall	.+2086   	; 0x19b6 <__floatsisf>
    1190:	a5 01       	movw	r20, r10
    1192:	94 01       	movw	r18, r8
    1194:	9c d4       	rcall	.+2360   	; 0x1ace <__mulsf3>
    1196:	9b 01       	movw	r18, r22
    1198:	ac 01       	movw	r20, r24
    119a:	c3 01       	movw	r24, r6
    119c:	b2 01       	movw	r22, r4
    119e:	0b d3       	rcall	.+1558   	; 0x17b6 <__subsf3>
    11a0:	dc d3       	rcall	.+1976   	; 0x195a <__fixunssfsi>
					LCD_WriteData(changetoChar(holder3));
    11a2:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <num1.2139>
    11a6:	8d 2f       	mov	r24, r29
    11a8:	39 d9       	rcall	.-3470   	; 0x41c <changetoChar>
					holder2--;
    11aa:	9e d8       	rcall	.-3780   	; 0x2e8 <LCD_WriteData>
    11ac:	c1 50       	subi	r28, 0x01	; 1
				}
				place = findHowManyB4Dec(num1);
				
				holder2 = place - 1;
				
				for(int i = 0; i < place; i++)
    11ae:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <holder2.2137>
    11b2:	0f 5f       	subi	r16, 0xFF	; 255
    11b4:	1f 4f       	sbci	r17, 0xFF	; 255
    11b6:	e0 16       	cp	r14, r16
					num1 = num1 - (holder3 * pow(10, holder2));
					LCD_WriteData(changetoChar(holder3));
					holder2--;
				}
				
				holder2 = 1;
    11b8:	f1 06       	cpc	r15, r17
    11ba:	09 f0       	breq	.+2      	; 0x11be <setting+0x316>
				LCD_WriteData('.');
    11bc:	bc cf       	rjmp	.-136    	; 0x1136 <setting+0x28e>
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <holder2.2137>
				for(int i = 0; i < 2; i++)
				{
					holder3 = num2/(pow(10,holder2));
    11c4:	8e e2       	ldi	r24, 0x2E	; 46
    11c6:	90 d8       	rcall	.-3808   	; 0x2e8 <LCD_WriteData>
    11c8:	02 e0       	ldi	r16, 0x02	; 2
    11ca:	10 e0       	ldi	r17, 0x00	; 0
    11cc:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <num2.2140>
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	ef d3       	rcall	.+2014   	; 0x19b6 <__floatsisf>
    11d8:	6b 01       	movw	r12, r22
    11da:	7c 01       	movw	r14, r24
    11dc:	c0 91 47 02 	lds	r28, 0x0247	; 0x800247 <holder2.2137>
    11e0:	6c 2f       	mov	r22, r28
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	e4 d3       	rcall	.+1992   	; 0x19b2 <__floatunsisf>
    11ea:	4b 01       	movw	r8, r22
    11ec:	5c 01       	movw	r10, r24
    11ee:	9b 01       	movw	r18, r22
    11f0:	ac 01       	movw	r20, r24
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	80 e2       	ldi	r24, 0x20	; 32
    11f8:	91 e4       	ldi	r25, 0x41	; 65
    11fa:	cc d4       	rcall	.+2456   	; 0x1b94 <pow>
    11fc:	9b 01       	movw	r18, r22
    11fe:	ac 01       	movw	r20, r24
    1200:	c7 01       	movw	r24, r14
    1202:	b6 01       	movw	r22, r12
    1204:	3d d3       	rcall	.+1658   	; 0x1880 <__divsf3>
					num2 = num2 - (holder3 * pow(10, holder2));
    1206:	a9 d3       	rcall	.+1874   	; 0x195a <__fixunssfsi>
    1208:	d6 2f       	mov	r29, r22
    120a:	a5 01       	movw	r20, r10
    120c:	94 01       	movw	r18, r8
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	80 e2       	ldi	r24, 0x20	; 32
    1214:	91 e4       	ldi	r25, 0x41	; 65
    1216:	be d4       	rcall	.+2428   	; 0x1b94 <pow>
    1218:	4b 01       	movw	r8, r22
    121a:	5c 01       	movw	r10, r24
    121c:	6d 2f       	mov	r22, r29
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	c8 d3       	rcall	.+1936   	; 0x19b6 <__floatsisf>
    1226:	a5 01       	movw	r20, r10
    1228:	94 01       	movw	r18, r8
    122a:	51 d4       	rcall	.+2210   	; 0x1ace <__mulsf3>
    122c:	9b 01       	movw	r18, r22
    122e:	ac 01       	movw	r20, r24
    1230:	c7 01       	movw	r24, r14
    1232:	b6 01       	movw	r22, r12
    1234:	c0 d2       	rcall	.+1408   	; 0x17b6 <__subsf3>
    1236:	91 d3       	rcall	.+1826   	; 0x195a <__fixunssfsi>
    1238:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <num2.2140>
					LCD_WriteData(changetoChar(holder3));
    123c:	8d 2f       	mov	r24, r29
    123e:	ee d8       	rcall	.-3620   	; 0x41c <changetoChar>
    1240:	53 d8       	rcall	.-3930   	; 0x2e8 <LCD_WriteData>
    1242:	c1 50       	subi	r28, 0x01	; 1
					holder2--;
    1244:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <holder2.2137>
    1248:	01 50       	subi	r16, 0x01	; 1
    124a:	11 09       	sbc	r17, r1
    124c:	09 f0       	breq	.+2      	; 0x1250 <setting+0x3a8>
					holder2--;
				}
				
				holder2 = 1;
				LCD_WriteData('.');
				for(int i = 0; i < 2; i++)
    124e:	be cf       	rjmp	.-132    	; 0x11cc <setting+0x324>
    1250:	c5 e0       	ldi	r28, 0x05	; 5
					holder3 = num2/(pow(10,holder2));
					num2 = num2 - (holder3 * pow(10, holder2));
					LCD_WriteData(changetoChar(holder3));
					holder2--;
				}
				state = pricePick;
    1252:	d0 e0       	ldi	r29, 0x00	; 0
    1254:	7f c1       	rjmp	.+766    	; 0x1554 <setting+0x6ac>
			}
			break;
		}
		case codeSet:
		{
			if (key == '#')
    1256:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <key>
    125a:	83 32       	cpi	r24, 0x23	; 35
    125c:	09 f0       	breq	.+2      	; 0x1260 <setting+0x3b8>
    125e:	6a c1       	rjmp	.+724    	; 0x1534 <setting+0x68c>
			{
				state = codeWrite;
				intval = 20;
    1260:	84 e1       	ldi	r24, 0x14	; 20
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <intval.2142+0x1>
    1268:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <intval.2142>
			}
			break;
		}
		case codeWrite:
		{
			eeprom_write_byte(((uint8_t *) 26), '1');
    126c:	61 e3       	ldi	r22, 0x31	; 49
    126e:	8a e1       	ldi	r24, 0x1A	; 26
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0b d6       	rcall	.+3094   	; 0x1e8a <eeprom_write_byte>
    1274:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <count.2134>
			for(int i = 0; i < count ; i++)
    1278:	81 11       	cpse	r24, r1
    127a:	4e c0       	rjmp	.+156    	; 0x1318 <setting+0x470>
    127c:	c4 e0       	ldi	r28, 0x04	; 4
    127e:	d0 e0       	ldi	r29, 0x00	; 0
    1280:	69 c1       	rjmp	.+722    	; 0x1554 <setting+0x6ac>
    1282:	62 ed       	ldi	r22, 0xD2	; 210
			break;
		}
		case codeWrite:
		{
			state = done;
			LCD_DisplayString(1, "A        |   #  settings | menu");
    1284:	71 e0       	ldi	r23, 0x01	; 1
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	38 d8       	rcall	.-3984   	; 0x2fa <LCD_DisplayString>
    128a:	c8 e0       	ldi	r28, 0x08	; 8
    128c:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		case codeWrite:
		{
			state = done;
    128e:	62 c1       	rjmp	.+708    	; 0x1554 <setting+0x6ac>
    1290:	fc d8       	rcall	.-3592   	; 0x48a <GetKeypadKey>
			LCD_DisplayString(1, "A        |   #  settings | menu");
			break;
    1292:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <key>
		}
		case pricePick:
		{
			key = GetKeypadKey();
    1296:	81 34       	cpi	r24, 0x41	; 65
    1298:	39 f4       	brne	.+14     	; 0x12a8 <setting+0x400>
    129a:	81 e0       	ldi	r24, 0x01	; 1
			if(key == 'A')
    129c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <whichAddr.2135>
			{
				state = priceSet;
				whichAddr = 1;
    12a0:	62 ef       	ldi	r22, 0xF2	; 242
    12a2:	71 e0       	ldi	r23, 0x01	; 1
    12a4:	2a d8       	rcall	.-4012   	; 0x2fa <LCD_DisplayString>
				LCD_DisplayString(1, "Enter Price:     ");
    12a6:	4f c1       	rjmp	.+670    	; 0x1546 <setting+0x69e>
    12a8:	82 34       	cpi	r24, 0x42	; 66
    12aa:	09 f0       	breq	.+2      	; 0x12ae <setting+0x406>
    12ac:	53 c1       	rjmp	.+678    	; 0x1554 <setting+0x6ac>
				//variable set to indicate A chosen;
			}
			else if(key == 'B')
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <whichAddr.2135>
			{
				state = priceSet;
				whichAddr = 2;
    12b4:	62 ef       	ldi	r22, 0xF2	; 242
    12b6:	71 e0       	ldi	r23, 0x01	; 1
    12b8:	81 e0       	ldi	r24, 0x01	; 1
				LCD_DisplayString(1, "Enter Price:     ");
    12ba:	1f d8       	rcall	.-4034   	; 0x2fa <LCD_DisplayString>
    12bc:	44 c1       	rjmp	.+648    	; 0x1546 <setting+0x69e>
    12be:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <key>
    12c2:	83 32       	cpi	r24, 0x23	; 35
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <setting+0x420>
			}
			break;
		}
		case priceSet:
		{
			if (key == '#')
    12c6:	3f c1       	rjmp	.+638    	; 0x1546 <setting+0x69e>
    12c8:	66 c0       	rjmp	.+204    	; 0x1396 <setting+0x4ee>
    12ca:	62 ed       	ldi	r22, 0xD2	; 210
    12cc:	71 e0       	ldi	r23, 0x01	; 1
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	14 d8       	rcall	.-4056   	; 0x2fa <LCD_DisplayString>
			}
			break;
		}
		case priceWrite:
		{
			LCD_DisplayString(1, "A        |   #  settings | menu");	
    12d2:	c8 e0       	ldi	r28, 0x08	; 8
    12d4:	d0 e0       	ldi	r29, 0x00	; 0
    12d6:	3e c1       	rjmp	.+636    	; 0x1554 <setting+0x6ac>
    12d8:	d8 d8       	rcall	.-3664   	; 0x48a <GetKeypadKey>
    12da:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <key>
			state = done;
    12de:	81 34       	cpi	r24, 0x41	; 65
			break;
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <setting+0x43c>
		}
		case done:
		{
			key = GetKeypadKey();
    12e2:	25 c1       	rjmp	.+586    	; 0x152e <setting+0x686>
    12e4:	83 32       	cpi	r24, 0x23	; 35
    12e6:	09 f0       	breq	.+2      	; 0x12ea <setting+0x442>
    12e8:	35 c1       	rjmp	.+618    	; 0x1554 <setting+0x6ac>
			if(key == 'A')
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pos>
			{
				state = opt;
			}
			else if(key == '#')
    12f0:	c1 e0       	ldi	r28, 0x01	; 1
    12f2:	d0 e0       	ldi	r29, 0x00	; 0
    12f4:	2f c1       	rjmp	.+606    	; 0x1554 <setting+0x6ac>
			{
				pos = 3;
    12f6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_WriteData>
    12fa:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <count.2134>
				state = pauseS;
    12fe:	e8 2f       	mov	r30, r24
    1300:	f0 e0       	ldi	r31, 0x00	; 0
		case codeSet:
		{
			key = GetKeypadKey();
			if(key !=  '\0')
			{
				LCD_WriteData(key);
    1302:	e3 5c       	subi	r30, 0xC3	; 195
    1304:	fd 4f       	sbci	r31, 0xFD	; 253
				number[count] = key;
    1306:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <key>
    130a:	90 83       	st	Z, r25
    130c:	8f 5f       	subi	r24, 0xFF	; 255
    130e:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <count.2134>
    1312:	c3 e0       	ldi	r28, 0x03	; 3
    1314:	d0 e0       	ldi	r29, 0x00	; 0
    1316:	1e c1       	rjmp	.+572    	; 0x1554 <setting+0x6ac>
				count++;
    1318:	0d e3       	ldi	r16, 0x3D	; 61
    131a:	12 e0       	ldi	r17, 0x02	; 2
    131c:	c0 e0       	ldi	r28, 0x00	; 0
    131e:	d0 e0       	ldi	r29, 0x00	; 0
    1320:	f8 01       	movw	r30, r16
    1322:	61 91       	ld	r22, Z+
    1324:	8f 01       	movw	r16, r30
    1326:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <intval.2142>
			break;
		}
		case codeWrite:
		{
			eeprom_write_byte(((uint8_t *) 26), '1');
			for(int i = 0; i < count ; i++)
    132a:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <intval.2142+0x1>
			{
				eeprom_write_byte(((uint8_t *) intval), number[i]);
    132e:	ad d5       	rcall	.+2906   	; 0x1e8a <eeprom_write_byte>
    1330:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <intval.2142>
    1334:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <intval.2142+0x1>
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <intval.2142+0x1>
				//LCD_WriteData(eeprom_read_byte((uint8_t *) intval));
				intval++;
    133e:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <intval.2142>
    1342:	21 96       	adiw	r28, 0x01	; 1
    1344:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <count.2134>
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	c8 17       	cp	r28, r24
    134c:	d9 07       	cpc	r29, r25
			break;
		}
		case codeWrite:
		{
			eeprom_write_byte(((uint8_t *) 26), '1');
			for(int i = 0; i < count ; i++)
    134e:	44 f3       	brlt	.-48     	; 0x1320 <setting+0x478>
    1350:	c4 e0       	ldi	r28, 0x04	; 4
    1352:	d0 e0       	ldi	r29, 0x00	; 0
    1354:	ff c0       	rjmp	.+510    	; 0x1554 <setting+0x6ac>
    1356:	9f eb       	ldi	r25, 0xBF	; 191
    1358:	98 0f       	add	r25, r24
    135a:	94 30       	cpi	r25, 0x04	; 4
    135c:	a0 f0       	brcs	.+40     	; 0x1386 <setting+0x4de>
    135e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_WriteData>
			break;
		}
		case priceSet:
		{
			key = GetKeypadKey();
			if(key !=  '\0' && key != 'A' && key != 'B' && key!= 'C' && key != 'D')
    1362:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <key>
			{
				LCD_WriteData(key);
    1366:	9e 32       	cpi	r25, 0x2E	; 46
    1368:	21 f4       	brne	.+8      	; 0x1372 <setting+0x4ca>
				if (key == '.')
    136a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <count.2134>
    136e:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <place.2133>
				{
					place = count;
    1372:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <count.2134>
				}
				number[count] = key;
    1376:	e8 2f       	mov	r30, r24
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	e3 5c       	subi	r30, 0xC3	; 195
    137c:	fd 4f       	sbci	r31, 0xFD	; 253
    137e:	90 83       	st	Z, r25
    1380:	8f 5f       	subi	r24, 0xFF	; 255
				count++;
    1382:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <count.2134>
			}
			holder2 = place - 1;
    1386:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <place.2133>
    138a:	81 50       	subi	r24, 0x01	; 1
    138c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <holder2.2137>
			holder = 0;
			break;
    1390:	c6 e0       	ldi	r28, 0x06	; 6
    1392:	d0 e0       	ldi	r29, 0x00	; 0
		}
		case priceWrite:
		{
			//write to corresponding eeprom price
			holder2 = place - 1;
    1394:	df c0       	rjmp	.+446    	; 0x1554 <setting+0x6ac>
    1396:	e0 90 49 02 	lds	r14, 0x0249	; 0x800249 <place.2133>
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	8e 0d       	add	r24, r14
    139e:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <holder2.2137>
			holder = 0;
			//LCD_DisplayString(1, "change:          ");
			for(int i = 0; i < place; i++)
    13a2:	0e 2d       	mov	r16, r14
    13a4:	10 e0       	ldi	r17, 0x00	; 0
    13a6:	10 16       	cp	r1, r16
    13a8:	11 06       	cpc	r1, r17
    13aa:	0c f0       	brlt	.+2      	; 0x13ae <setting+0x506>
    13ac:	3e c0       	rjmp	.+124    	; 0x142a <setting+0x582>
    13ae:	0f 2e       	mov	r0, r31
    13b0:	fd e3       	ldi	r31, 0x3D	; 61
    13b2:	cf 2e       	mov	r12, r31
    13b4:	f2 e0       	ldi	r31, 0x02	; 2
    13b6:	df 2e       	mov	r13, r31
    13b8:	f0 2d       	mov	r31, r0
    13ba:	c8 01       	movw	r24, r16
    13bc:	9c 01       	movw	r18, r24
    13be:	23 5c       	subi	r18, 0xC3	; 195
    13c0:	3d 4f       	sbci	r19, 0xFD	; 253
			{
				//LCD_WriteData(number[i]);
				holder = changetoInteger(number[i]);
    13c2:	59 01       	movw	r10, r18
    13c4:	f6 01       	movw	r30, r12
    13c6:	81 91       	ld	r24, Z+
    13c8:	6f 01       	movw	r12, r30
    13ca:	0a d8       	rcall	.-4076   	; 0x3e0 <changetoInteger>
    13cc:	d8 2f       	mov	r29, r24
				num1 = holder*pow(10, holder2) + num1;
    13ce:	c0 91 47 02 	lds	r28, 0x0247	; 0x800247 <holder2.2137>
    13d2:	6c 2f       	mov	r22, r28
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	eb d2       	rcall	.+1494   	; 0x19b2 <__floatunsisf>
    13dc:	9b 01       	movw	r18, r22
    13de:	ac 01       	movw	r20, r24
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	80 e2       	ldi	r24, 0x20	; 32
    13e6:	91 e4       	ldi	r25, 0x41	; 65
    13e8:	d5 d3       	rcall	.+1962   	; 0x1b94 <pow>
    13ea:	2b 01       	movw	r4, r22
    13ec:	3c 01       	movw	r6, r24
    13ee:	6d 2f       	mov	r22, r29
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	df d2       	rcall	.+1470   	; 0x19b6 <__floatsisf>
    13f8:	a3 01       	movw	r20, r6
    13fa:	92 01       	movw	r18, r4
    13fc:	68 d3       	rcall	.+1744   	; 0x1ace <__mulsf3>
    13fe:	2b 01       	movw	r4, r22
    1400:	3c 01       	movw	r6, r24
    1402:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <num1.2139>
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	d4 d2       	rcall	.+1448   	; 0x19b6 <__floatsisf>
    140e:	9b 01       	movw	r18, r22
    1410:	ac 01       	movw	r20, r24
    1412:	c3 01       	movw	r24, r6
    1414:	b2 01       	movw	r22, r4
    1416:	d0 d1       	rcall	.+928    	; 0x17b8 <__addsf3>
    1418:	a0 d2       	rcall	.+1344   	; 0x195a <__fixunssfsi>
    141a:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <num1.2139>
				holder2--;
    141e:	c1 50       	subi	r28, 0x01	; 1
    1420:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <holder2.2137>
		{
			//write to corresponding eeprom price
			holder2 = place - 1;
			holder = 0;
			//LCD_DisplayString(1, "change:          ");
			for(int i = 0; i < place; i++)
    1424:	ca 14       	cp	r12, r10
    1426:	db 04       	cpc	r13, r11
				holder = changetoInteger(number[i]);
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			//LCD_WriteData('.');
			holder2 = 1;
    1428:	69 f6       	brne	.-102    	; 0x13c4 <setting+0x51c>
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <holder2.2137>
			for(int j = place+1; j < count-1; j++)
    1430:	0f 5f       	subi	r16, 0xFF	; 255
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	c0 90 48 02 	lds	r12, 0x0248	; 0x800248 <count.2134>
    1438:	d1 2c       	mov	r13, r1
    143a:	f1 e0       	ldi	r31, 0x01	; 1
    143c:	cf 1a       	sub	r12, r31
    143e:	d1 08       	sbc	r13, r1
    1440:	0c 15       	cp	r16, r12
    1442:	1d 05       	cpc	r17, r13
    1444:	0c f0       	brlt	.+2      	; 0x1448 <setting+0x5a0>
    1446:	3c c0       	rjmp	.+120    	; 0x14c0 <setting+0x618>
    1448:	8e 2d       	mov	r24, r14
    144a:	90 e0       	ldi	r25, 0x00	; 0
			{
				//LCD_WriteData(number[j]);
				holder = changetoInteger(number[j]);
    144c:	9c 01       	movw	r18, r24
    144e:	22 5c       	subi	r18, 0xC2	; 194
    1450:	3d 4f       	sbci	r19, 0xFD	; 253
    1452:	79 01       	movw	r14, r18
    1454:	f7 01       	movw	r30, r14
				num2 = holder*pow(10, holder2) + num2;
    1456:	81 91       	ld	r24, Z+
    1458:	7f 01       	movw	r14, r30
    145a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <changetoInteger>
    145e:	d8 2f       	mov	r29, r24
    1460:	c0 91 47 02 	lds	r28, 0x0247	; 0x800247 <holder2.2137>
    1464:	6c 2f       	mov	r22, r28
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a2 d2       	rcall	.+1348   	; 0x19b2 <__floatunsisf>
    146e:	9b 01       	movw	r18, r22
    1470:	ac 01       	movw	r20, r24
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	80 e2       	ldi	r24, 0x20	; 32
    1478:	91 e4       	ldi	r25, 0x41	; 65
    147a:	8c d3       	rcall	.+1816   	; 0x1b94 <pow>
    147c:	4b 01       	movw	r8, r22
    147e:	5c 01       	movw	r10, r24
    1480:	6d 2f       	mov	r22, r29
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	96 d2       	rcall	.+1324   	; 0x19b6 <__floatsisf>
    148a:	a5 01       	movw	r20, r10
    148c:	94 01       	movw	r18, r8
    148e:	1f d3       	rcall	.+1598   	; 0x1ace <__mulsf3>
    1490:	4b 01       	movw	r8, r22
    1492:	5c 01       	movw	r10, r24
    1494:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <num2.2140>
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	8b d2       	rcall	.+1302   	; 0x19b6 <__floatsisf>
    14a0:	9b 01       	movw	r18, r22
    14a2:	ac 01       	movw	r20, r24
    14a4:	c5 01       	movw	r24, r10
    14a6:	b4 01       	movw	r22, r8
    14a8:	87 d1       	rcall	.+782    	; 0x17b8 <__addsf3>
    14aa:	57 d2       	rcall	.+1198   	; 0x195a <__fixunssfsi>
    14ac:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <num2.2140>
    14b0:	c1 50       	subi	r28, 0x01	; 1
				holder2--;
    14b2:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <holder2.2137>
    14b6:	0f 5f       	subi	r16, 0xFF	; 255
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			//LCD_WriteData('.');
			holder2 = 1;
			for(int j = place+1; j < count-1; j++)
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	0c 15       	cp	r16, r12
    14bc:	1d 05       	cpc	r17, r13
    14be:	54 f2       	brlt	.-108    	; 0x1454 <setting+0x5ac>
    14c0:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <num2.2140>
				holder = changetoInteger(number[j]);
				num2 = holder*pow(10, holder2) + num2;
				holder2--;
			}
			
			holderMoney = (float)num1 + ((float)num2/100);
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	73 d2       	rcall	.+1254   	; 0x19b2 <__floatunsisf>
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	48 ec       	ldi	r20, 0xC8	; 200
    14d2:	52 e4       	ldi	r21, 0x42	; 66
    14d4:	d5 d1       	rcall	.+938    	; 0x1880 <__divsf3>
    14d6:	6b 01       	movw	r12, r22
    14d8:	7c 01       	movw	r14, r24
    14da:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <num1.2139>
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	66 d2       	rcall	.+1228   	; 0x19b2 <__floatunsisf>
    14e6:	9b 01       	movw	r18, r22
    14e8:	ac 01       	movw	r20, r24
    14ea:	c7 01       	movw	r24, r14
    14ec:	b6 01       	movw	r22, r12
    14ee:	64 d1       	rcall	.+712    	; 0x17b8 <__addsf3>
    14f0:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <whichAddr.2135>
    14f4:	21 30       	cpi	r18, 0x01	; 1
    14f6:	41 f4       	brne	.+16     	; 0x1508 <setting+0x660>
    14f8:	ab 01       	movw	r20, r22
			if(whichAddr == 1)
    14fa:	bc 01       	movw	r22, r24
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	d2 d4       	rcall	.+2468   	; 0x1ea6 <eeprom_write_dword>
			{
				eeprom_write_float((float *)1, holderMoney);
    1502:	c7 e0       	ldi	r28, 0x07	; 7
    1504:	d0 e0       	ldi	r29, 0x00	; 0
    1506:	26 c0       	rjmp	.+76     	; 0x1554 <setting+0x6ac>
    1508:	22 30       	cpi	r18, 0x02	; 2
    150a:	59 f4       	brne	.+22     	; 0x1522 <setting+0x67a>
    150c:	ab 01       	movw	r20, r22
    150e:	bc 01       	movw	r22, r24
    1510:	8a e0       	ldi	r24, 0x0A	; 10
    1512:	90 e0       	ldi	r25, 0x00	; 0
			}	
			else if(whichAddr == 2)
    1514:	c8 d4       	rcall	.+2448   	; 0x1ea6 <eeprom_write_dword>
    1516:	c7 e0       	ldi	r28, 0x07	; 7
			{
				eeprom_write_float((float *)10, holderMoney);
    1518:	d0 e0       	ldi	r29, 0x00	; 0
    151a:	1c c0       	rjmp	.+56     	; 0x1554 <setting+0x6ac>
    151c:	c1 e0       	ldi	r28, 0x01	; 1
    151e:	d0 e0       	ldi	r29, 0x00	; 0
    1520:	19 c0       	rjmp	.+50     	; 0x1554 <setting+0x6ac>
    1522:	c7 e0       	ldi	r28, 0x07	; 7
    1524:	d0 e0       	ldi	r29, 0x00	; 0
    1526:	16 c0       	rjmp	.+44     	; 0x1554 <setting+0x6ac>
    1528:	c0 e0       	ldi	r28, 0x00	; 0
	
	switch(state)
	{
		case startS:
		{
			state = pauseS;
    152a:	d0 e0       	ldi	r29, 0x00	; 0
    152c:	13 c0       	rjmp	.+38     	; 0x1554 <setting+0x6ac>
    152e:	c2 e0       	ldi	r28, 0x02	; 2
    1530:	d0 e0       	ldi	r29, 0x00	; 0
    1532:	10 c0       	rjmp	.+32     	; 0x1554 <setting+0x6ac>
    1534:	0e 94 45 02 	call	0x48a	; 0x48a <GetKeypadKey>
			}
			break;
		}
		default:
		{
			state = startS;
    1538:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <key>
		case done:
		{
			key = GetKeypadKey();
			if(key == 'A')
			{
				state = opt;
    153c:	81 11       	cpse	r24, r1
    153e:	db ce       	rjmp	.-586    	; 0x12f6 <setting+0x44e>
    1540:	c3 e0       	ldi	r28, 0x03	; 3
		{
			break;
		}
		case codeSet:
		{
			key = GetKeypadKey();
    1542:	d0 e0       	ldi	r29, 0x00	; 0
    1544:	07 c0       	rjmp	.+14     	; 0x1554 <setting+0x6ac>
    1546:	0e 94 45 02 	call	0x48a	; 0x48a <GetKeypadKey>
			if(key !=  '\0')
    154a:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <key>
    154e:	81 11       	cpse	r24, r1
    1550:	02 cf       	rjmp	.-508    	; 0x1356 <setting+0x4ae>
		default:
		{
			break;
		}
	}
	return state;
    1552:	19 cf       	rjmp	.-462    	; 0x1386 <setting+0x4de>
		{
			break;
		}
		case priceSet:
		{
			key = GetKeypadKey();
    1554:	ce 01       	movw	r24, r28
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
			if(key !=  '\0' && key != 'A' && key != 'B' && key!= 'C' && key != 'D')
    155c:	0f 91       	pop	r16
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
		{
			break;
		}
	}
	return state;
}
    1562:	df 90       	pop	r13
    1564:	cf 90       	pop	r12
    1566:	bf 90       	pop	r11
    1568:	af 90       	pop	r10
    156a:	9f 90       	pop	r9
    156c:	8f 90       	pop	r8
    156e:	7f 90       	pop	r7
    1570:	6f 90       	pop	r6
    1572:	5f 90       	pop	r5
    1574:	4f 90       	pop	r4
    1576:	08 95       	ret

00001578 <keypad>:
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	91 05       	cpc	r25, r1
    157c:	69 f0       	breq	.+26     	; 0x1598 <keypad+0x20>
    157e:	1c f4       	brge	.+6      	; 0x1586 <keypad+0xe>
    1580:	89 2b       	or	r24, r25
    1582:	39 f0       	breq	.+14     	; 0x1592 <keypad+0x1a>
    1584:	38 c0       	rjmp	.+112    	; 0x15f6 <keypad+0x7e>

unsigned char count, x, y;
int keypad(int state)
{
	switch(state)
    1586:	82 30       	cpi	r24, 0x02	; 2
    1588:	91 05       	cpc	r25, r1
    158a:	69 f0       	breq	.+26     	; 0x15a6 <keypad+0x2e>
    158c:	03 97       	sbiw	r24, 0x03	; 3
    158e:	91 f0       	breq	.+36     	; 0x15b4 <keypad+0x3c>
    1590:	32 c0       	rjmp	.+100    	; 0x15f6 <keypad+0x7e>
	{
		case startK:
		{
			count = 0;
    1592:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <count>
    1596:	17 c0       	rjmp	.+46     	; 0x15c6 <keypad+0x4e>
			state = wait;
			break;
		}
		case wait:
		{
			x = GetKeypadKey();
    1598:	0e 94 45 02 	call	0x48a	; 0x48a <GetKeypadKey>
    159c:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <x>
			if(x != '\0')
    15a0:	81 11       	cpse	r24, r1
    15a2:	34 c0       	rjmp	.+104    	; 0x160c <keypad+0x94>
    15a4:	2e c0       	rjmp	.+92     	; 0x1602 <keypad+0x8a>
			}
			break;
		}
		case press:
		{
			y = GetKeypadKey();
    15a6:	0e 94 45 02 	call	0x48a	; 0x48a <GetKeypadKey>
    15aa:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <y>
			if(y == '\0')
    15ae:	88 23       	and	r24, r24
    15b0:	91 f1       	breq	.+100    	; 0x1616 <keypad+0x9e>
    15b2:	36 c0       	rjmp	.+108    	; 0x1620 <keypad+0xa8>
			}
			break;
		}
		case unpress:
		{
			key2 = x;
    15b4:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <x>
    15b8:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <key2>
			if(count == 9)
    15bc:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <count>
    15c0:	89 30       	cpi	r24, 0x09	; 9
    15c2:	89 f4       	brne	.+34     	; 0x15e6 <keypad+0x6e>
    15c4:	1b c0       	rjmp	.+54     	; 0x15fc <keypad+0x84>
		{
			break;
		}
		case wait:
		{
			count++;
    15c6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <count>
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <count>
			break;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	08 95       	ret
		}
		case press:
		{
			count++;
    15d6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <count>
    15da:	8f 5f       	subi	r24, 0xFF	; 255
    15dc:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <count>
			break;
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	08 95       	ret
		}
		case unpress:
		{
			count++;
    15e6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <count>
    15ea:	8f 5f       	subi	r24, 0xFF	; 255
    15ec:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <count>
			break;
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	08 95       	ret
			}
			break;
		}
		default:
		{
			state = startK;
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	08 95       	ret
			break;
		}
		case unpress:
		{
			count++;
			break;
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
		default:
		{
			break;
		}
	}
	return state;
    1600:	08 95       	ret
			x = GetKeypadKey();
			if(x != '\0')
			{
				state = press;
			}
			if(count == 9)
    1602:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <count>
    1606:	89 30       	cpi	r24, 0x09	; 9
    1608:	c9 f3       	breq	.-14     	; 0x15fc <keypad+0x84>
    160a:	dd cf       	rjmp	.-70     	; 0x15c6 <keypad+0x4e>
    160c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <count>
    1610:	89 30       	cpi	r24, 0x09	; 9
    1612:	09 f7       	brne	.-62     	; 0x15d6 <keypad+0x5e>
    1614:	f3 cf       	rjmp	.-26     	; 0x15fc <keypad+0x84>
			y = GetKeypadKey();
			if(y == '\0')
			{
				state = unpress;
			}
			if(count == 9)
    1616:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <count>
    161a:	89 30       	cpi	r24, 0x09	; 9
    161c:	79 f3       	breq	.-34     	; 0x15fc <keypad+0x84>
    161e:	e3 cf       	rjmp	.-58     	; 0x15e6 <keypad+0x6e>
    1620:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <count>
    1624:	89 30       	cpi	r24, 0x09	; 9
    1626:	b9 f6       	brne	.-82     	; 0x15d6 <keypad+0x5e>
    1628:	e9 cf       	rjmp	.-46     	; 0x15fc <keypad+0x84>

0000162a <main>:
	}
	return state;
}
	
int main()
{
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	2a 97       	sbiw	r28, 0x0a	; 10
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
    163e:	8f ef       	ldi	r24, 0xFF	; 255
    1640:	81 b9       	out	0x01, r24	; 1
    1642:	12 b8       	out	0x02, r1	; 2
	DDRD = 0xFF; PORTD = 0x00;
    1644:	8a b9       	out	0x0a, r24	; 10
    1646:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xF0; PORTC = 0x0F;
    1648:	80 ef       	ldi	r24, 0xF0	; 240
    164a:	87 b9       	out	0x07, r24	; 7
    164c:	8f e0       	ldi	r24, 0x0F	; 15
    164e:	88 b9       	out	0x08, r24	; 8
	unsigned long int SMTick5_period = keypadperiod/100;

	
	//Declare an array of tasks
	static task j,a,b,c,e;
	task *tasks[] = {&j, &a, &b, &c, &e};
    1650:	8a e0       	ldi	r24, 0x0A	; 10
    1652:	e4 e0       	ldi	r30, 0x04	; 4
    1654:	f1 e0       	ldi	r31, 0x01	; 1
    1656:	de 01       	movw	r26, r28
    1658:	11 96       	adiw	r26, 0x01	; 1
    165a:	01 90       	ld	r0, Z+
    165c:	0d 92       	st	X+, r0
    165e:	8a 95       	dec	r24
    1660:	e1 f7       	brne	.-8      	; 0x165a <main+0x30>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	// Task 1
	j.state = startL;//Task initial state.
    1662:	e0 e3       	ldi	r30, 0x30	; 48
    1664:	f2 e0       	ldi	r31, 0x02	; 2
    1666:	10 82       	st	Z, r1
	j.period = SMTick0_period;//Task Period.
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a0 e0       	ldi	r26, 0x00	; 0
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	81 83       	std	Z+1, r24	; 0x01
    1672:	92 83       	std	Z+2, r25	; 0x02
    1674:	a3 83       	std	Z+3, r26	; 0x03
    1676:	b4 83       	std	Z+4, r27	; 0x04
	j.elapsedTime = SMTick0_period;//Task current elapsed time.
    1678:	85 83       	std	Z+5, r24	; 0x05
    167a:	96 83       	std	Z+6, r25	; 0x06
    167c:	a7 83       	std	Z+7, r26	; 0x07
    167e:	b0 87       	std	Z+8, r27	; 0x08
	j.TickFct = &Lock;//Function pointer for the tick.
    1680:	83 e9       	ldi	r24, 0x93	; 147
    1682:	92 e0       	ldi	r25, 0x02	; 2
    1684:	92 87       	std	Z+10, r25	; 0x0a
    1686:	81 87       	std	Z+9, r24	; 0x09
	
	a.state = startM;//Task initial state.
    1688:	e5 e2       	ldi	r30, 0x25	; 37
    168a:	f2 e0       	ldi	r31, 0x02	; 2
    168c:	10 82       	st	Z, r1
	a.period = SMTick1_period;//Task Period.
    168e:	8a e0       	ldi	r24, 0x0A	; 10
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a0 e0       	ldi	r26, 0x00	; 0
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	81 83       	std	Z+1, r24	; 0x01
    1698:	92 83       	std	Z+2, r25	; 0x02
    169a:	a3 83       	std	Z+3, r26	; 0x03
    169c:	b4 83       	std	Z+4, r27	; 0x04
	a.elapsedTime = SMTick1_period;//Task current elapsed time.
    169e:	85 83       	std	Z+5, r24	; 0x05
    16a0:	96 83       	std	Z+6, r25	; 0x06
    16a2:	a7 83       	std	Z+7, r26	; 0x07
    16a4:	b0 87       	std	Z+8, r27	; 0x08
	a.TickFct = &Menu;//Function pointer for the tick.
    16a6:	86 e9       	ldi	r24, 0x96	; 150
    16a8:	91 e0       	ldi	r25, 0x01	; 1
    16aa:	92 87       	std	Z+10, r25	; 0x0a
    16ac:	81 87       	std	Z+9, r24	; 0x09
	
	// Task 2
	b.state = startT;//Task initial state.
    16ae:	ea e1       	ldi	r30, 0x1A	; 26
    16b0:	f2 e0       	ldi	r31, 0x02	; 2
    16b2:	10 82       	st	Z, r1
	b.period = SMTick2_period;//Task Period.
    16b4:	82 e0       	ldi	r24, 0x02	; 2
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a0 e0       	ldi	r26, 0x00	; 0
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	81 83       	std	Z+1, r24	; 0x01
    16be:	92 83       	std	Z+2, r25	; 0x02
    16c0:	a3 83       	std	Z+3, r26	; 0x03
    16c2:	b4 83       	std	Z+4, r27	; 0x04
	b.elapsedTime = SMTick2_period;//Task current elapsed time.
    16c4:	85 83       	std	Z+5, r24	; 0x05
    16c6:	96 83       	std	Z+6, r25	; 0x06
    16c8:	a7 83       	std	Z+7, r26	; 0x07
    16ca:	b0 87       	std	Z+8, r27	; 0x08
	b.TickFct = &trans;//Function pointer for the tick.
    16cc:	20 e5       	ldi	r18, 0x50	; 80
    16ce:	33 e0       	ldi	r19, 0x03	; 3
    16d0:	32 87       	std	Z+10, r19	; 0x0a
    16d2:	21 87       	std	Z+9, r18	; 0x09
	
	c.state = startS;//Task initial state.
    16d4:	ef e0       	ldi	r30, 0x0F	; 15
    16d6:	f2 e0       	ldi	r31, 0x02	; 2
    16d8:	10 82       	st	Z, r1
	c.period = SMTick3_period;//Task Period.
    16da:	81 83       	std	Z+1, r24	; 0x01
    16dc:	92 83       	std	Z+2, r25	; 0x02
    16de:	a3 83       	std	Z+3, r26	; 0x03
    16e0:	b4 83       	std	Z+4, r27	; 0x04
	c.elapsedTime = SMTick3_period;//Task current elapsed time.
    16e2:	85 83       	std	Z+5, r24	; 0x05
    16e4:	96 83       	std	Z+6, r25	; 0x06
    16e6:	a7 83       	std	Z+7, r26	; 0x07
    16e8:	b0 87       	std	Z+8, r27	; 0x08
	c.TickFct = &setting;//Function pointer for the tick.
    16ea:	84 e5       	ldi	r24, 0x54	; 84
    16ec:	97 e0       	ldi	r25, 0x07	; 7
    16ee:	92 87       	std	Z+10, r25	; 0x0a
    16f0:	81 87       	std	Z+9, r24	; 0x09
	
	e.state = startK;//Task initial state.
    16f2:	e4 e0       	ldi	r30, 0x04	; 4
    16f4:	f2 e0       	ldi	r31, 0x02	; 2
    16f6:	10 82       	st	Z, r1
	e.period = SMTick5_period;//Task Period.
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	81 83       	std	Z+1, r24	; 0x01
    1702:	92 83       	std	Z+2, r25	; 0x02
    1704:	a3 83       	std	Z+3, r26	; 0x03
    1706:	b4 83       	std	Z+4, r27	; 0x04
	e.elapsedTime = SMTick5_period;//Task current elapsed time.
    1708:	85 83       	std	Z+5, r24	; 0x05
    170a:	96 83       	std	Z+6, r25	; 0x06
    170c:	a7 83       	std	Z+7, r26	; 0x07
    170e:	b0 87       	std	Z+8, r27	; 0x08
	e.TickFct = &keypad;//Function pointer for the tick.
    1710:	8c eb       	ldi	r24, 0xBC	; 188
    1712:	9a e0       	ldi	r25, 0x0A	; 10
    1714:	92 87       	std	Z+10, r25	; 0x0a
    1716:	81 87       	std	Z+9, r24	; 0x09
	
	// Set the timer and turn it on
	TimerSet(100);
    1718:	64 e6       	ldi	r22, 0x64	; 100
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	0e 94 cd 00 	call	0x19a	; 0x19a <TimerSet>
	TimerOn();
    1724:	0e 94 de 00 	call	0x1bc	; 0x1bc <TimerOn>
	
	LCD_init();
    1728:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_init>
	LCD_ClearScreen();
    172c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_ClearScreen>
    1730:	7e 01       	movw	r14, r28
    1732:	8b e0       	ldi	r24, 0x0B	; 11
    1734:	e8 0e       	add	r14, r24
    1736:	f1 1c       	adc	r15, r1
    1738:	de 01       	movw	r26, r28
    173a:	11 96       	adiw	r26, 0x01	; 1
    173c:	6d 01       	movw	r12, r26
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
    173e:	f6 01       	movw	r30, r12
    1740:	01 91       	ld	r16, Z+
    1742:	11 91       	ld	r17, Z+
    1744:	6f 01       	movw	r12, r30
    1746:	d8 01       	movw	r26, r16
    1748:	15 96       	adiw	r26, 0x05	; 5
    174a:	4d 91       	ld	r20, X+
    174c:	5d 91       	ld	r21, X+
    174e:	6d 91       	ld	r22, X+
    1750:	7c 91       	ld	r23, X
    1752:	18 97       	sbiw	r26, 0x08	; 8
    1754:	11 96       	adiw	r26, 0x01	; 1
    1756:	8d 91       	ld	r24, X+
    1758:	9d 91       	ld	r25, X+
    175a:	0d 90       	ld	r0, X+
    175c:	bc 91       	ld	r27, X
    175e:	a0 2d       	mov	r26, r0
    1760:	48 17       	cp	r20, r24
    1762:	59 07       	cpc	r21, r25
    1764:	6a 07       	cpc	r22, r26
    1766:	7b 07       	cpc	r23, r27
    1768:	81 f4       	brne	.+32     	; 0x178a <main+0x160>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
    176a:	f8 01       	movw	r30, r16
    176c:	80 81       	ld	r24, Z
    176e:	01 84       	ldd	r0, Z+9	; 0x09
    1770:	f2 85       	ldd	r31, Z+10	; 0x0a
    1772:	e0 2d       	mov	r30, r0
    1774:	08 2e       	mov	r0, r24
    1776:	00 0c       	add	r0, r0
    1778:	99 0b       	sbc	r25, r25
    177a:	09 95       	icall
    177c:	d8 01       	movw	r26, r16
    177e:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
    1780:	f8 01       	movw	r30, r16
    1782:	15 82       	std	Z+5, r1	; 0x05
    1784:	16 82       	std	Z+6, r1	; 0x06
    1786:	17 82       	std	Z+7, r1	; 0x07
    1788:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
    178a:	f8 01       	movw	r30, r16
    178c:	85 81       	ldd	r24, Z+5	; 0x05
    178e:	96 81       	ldd	r25, Z+6	; 0x06
    1790:	a7 81       	ldd	r26, Z+7	; 0x07
    1792:	b0 85       	ldd	r27, Z+8	; 0x08
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	a1 1d       	adc	r26, r1
    1798:	b1 1d       	adc	r27, r1
    179a:	85 83       	std	Z+5, r24	; 0x05
    179c:	96 83       	std	Z+6, r25	; 0x06
    179e:	a7 83       	std	Z+7, r26	; 0x07
    17a0:	b0 87       	std	Z+8, r27	; 0x08
	LCD_ClearScreen();
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
    17a2:	ce 14       	cp	r12, r14
    17a4:	df 04       	cpc	r13, r15
    17a6:	59 f6       	brne	.-106    	; 0x173e <main+0x114>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
    17a8:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <TimerFlag>
    17ac:	88 23       	and	r24, r24
    17ae:	e1 f3       	breq	.-8      	; 0x17a8 <main+0x17e>
		TimerFlag = 0;
    17b0:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <TimerFlag>
	}
    17b4:	c1 cf       	rjmp	.-126    	; 0x1738 <main+0x10e>

000017b6 <__subsf3>:
    17b6:	50 58       	subi	r21, 0x80	; 128

000017b8 <__addsf3>:
    17b8:	bb 27       	eor	r27, r27
    17ba:	aa 27       	eor	r26, r26
    17bc:	0e d0       	rcall	.+28     	; 0x17da <__addsf3x>
    17be:	4d c1       	rjmp	.+666    	; 0x1a5a <__fp_round>
    17c0:	3e d1       	rcall	.+636    	; 0x1a3e <__fp_pscA>
    17c2:	30 f0       	brcs	.+12     	; 0x17d0 <__addsf3+0x18>
    17c4:	43 d1       	rcall	.+646    	; 0x1a4c <__fp_pscB>
    17c6:	20 f0       	brcs	.+8      	; 0x17d0 <__addsf3+0x18>
    17c8:	31 f4       	brne	.+12     	; 0x17d6 <__addsf3+0x1e>
    17ca:	9f 3f       	cpi	r25, 0xFF	; 255
    17cc:	11 f4       	brne	.+4      	; 0x17d2 <__addsf3+0x1a>
    17ce:	1e f4       	brtc	.+6      	; 0x17d6 <__addsf3+0x1e>
    17d0:	33 c1       	rjmp	.+614    	; 0x1a38 <__fp_nan>
    17d2:	0e f4       	brtc	.+2      	; 0x17d6 <__addsf3+0x1e>
    17d4:	e0 95       	com	r30
    17d6:	e7 fb       	bst	r30, 7
    17d8:	29 c1       	rjmp	.+594    	; 0x1a2c <__fp_inf>

000017da <__addsf3x>:
    17da:	e9 2f       	mov	r30, r25
    17dc:	4f d1       	rcall	.+670    	; 0x1a7c <__fp_split3>
    17de:	80 f3       	brcs	.-32     	; 0x17c0 <__addsf3+0x8>
    17e0:	ba 17       	cp	r27, r26
    17e2:	62 07       	cpc	r22, r18
    17e4:	73 07       	cpc	r23, r19
    17e6:	84 07       	cpc	r24, r20
    17e8:	95 07       	cpc	r25, r21
    17ea:	18 f0       	brcs	.+6      	; 0x17f2 <__addsf3x+0x18>
    17ec:	71 f4       	brne	.+28     	; 0x180a <__addsf3x+0x30>
    17ee:	9e f5       	brtc	.+102    	; 0x1856 <__addsf3x+0x7c>
    17f0:	67 c1       	rjmp	.+718    	; 0x1ac0 <__fp_zero>
    17f2:	0e f4       	brtc	.+2      	; 0x17f6 <__addsf3x+0x1c>
    17f4:	e0 95       	com	r30
    17f6:	0b 2e       	mov	r0, r27
    17f8:	ba 2f       	mov	r27, r26
    17fa:	a0 2d       	mov	r26, r0
    17fc:	0b 01       	movw	r0, r22
    17fe:	b9 01       	movw	r22, r18
    1800:	90 01       	movw	r18, r0
    1802:	0c 01       	movw	r0, r24
    1804:	ca 01       	movw	r24, r20
    1806:	a0 01       	movw	r20, r0
    1808:	11 24       	eor	r1, r1
    180a:	ff 27       	eor	r31, r31
    180c:	59 1b       	sub	r21, r25
    180e:	99 f0       	breq	.+38     	; 0x1836 <__addsf3x+0x5c>
    1810:	59 3f       	cpi	r21, 0xF9	; 249
    1812:	50 f4       	brcc	.+20     	; 0x1828 <__addsf3x+0x4e>
    1814:	50 3e       	cpi	r21, 0xE0	; 224
    1816:	68 f1       	brcs	.+90     	; 0x1872 <__addsf3x+0x98>
    1818:	1a 16       	cp	r1, r26
    181a:	f0 40       	sbci	r31, 0x00	; 0
    181c:	a2 2f       	mov	r26, r18
    181e:	23 2f       	mov	r18, r19
    1820:	34 2f       	mov	r19, r20
    1822:	44 27       	eor	r20, r20
    1824:	58 5f       	subi	r21, 0xF8	; 248
    1826:	f3 cf       	rjmp	.-26     	; 0x180e <__addsf3x+0x34>
    1828:	46 95       	lsr	r20
    182a:	37 95       	ror	r19
    182c:	27 95       	ror	r18
    182e:	a7 95       	ror	r26
    1830:	f0 40       	sbci	r31, 0x00	; 0
    1832:	53 95       	inc	r21
    1834:	c9 f7       	brne	.-14     	; 0x1828 <__addsf3x+0x4e>
    1836:	7e f4       	brtc	.+30     	; 0x1856 <__addsf3x+0x7c>
    1838:	1f 16       	cp	r1, r31
    183a:	ba 0b       	sbc	r27, r26
    183c:	62 0b       	sbc	r22, r18
    183e:	73 0b       	sbc	r23, r19
    1840:	84 0b       	sbc	r24, r20
    1842:	ba f0       	brmi	.+46     	; 0x1872 <__addsf3x+0x98>
    1844:	91 50       	subi	r25, 0x01	; 1
    1846:	a1 f0       	breq	.+40     	; 0x1870 <__addsf3x+0x96>
    1848:	ff 0f       	add	r31, r31
    184a:	bb 1f       	adc	r27, r27
    184c:	66 1f       	adc	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	88 1f       	adc	r24, r24
    1852:	c2 f7       	brpl	.-16     	; 0x1844 <__addsf3x+0x6a>
    1854:	0e c0       	rjmp	.+28     	; 0x1872 <__addsf3x+0x98>
    1856:	ba 0f       	add	r27, r26
    1858:	62 1f       	adc	r22, r18
    185a:	73 1f       	adc	r23, r19
    185c:	84 1f       	adc	r24, r20
    185e:	48 f4       	brcc	.+18     	; 0x1872 <__addsf3x+0x98>
    1860:	87 95       	ror	r24
    1862:	77 95       	ror	r23
    1864:	67 95       	ror	r22
    1866:	b7 95       	ror	r27
    1868:	f7 95       	ror	r31
    186a:	9e 3f       	cpi	r25, 0xFE	; 254
    186c:	08 f0       	brcs	.+2      	; 0x1870 <__addsf3x+0x96>
    186e:	b3 cf       	rjmp	.-154    	; 0x17d6 <__addsf3+0x1e>
    1870:	93 95       	inc	r25
    1872:	88 0f       	add	r24, r24
    1874:	08 f0       	brcs	.+2      	; 0x1878 <__addsf3x+0x9e>
    1876:	99 27       	eor	r25, r25
    1878:	ee 0f       	add	r30, r30
    187a:	97 95       	ror	r25
    187c:	87 95       	ror	r24
    187e:	08 95       	ret

00001880 <__divsf3>:
    1880:	0c d0       	rcall	.+24     	; 0x189a <__divsf3x>
    1882:	eb c0       	rjmp	.+470    	; 0x1a5a <__fp_round>
    1884:	e3 d0       	rcall	.+454    	; 0x1a4c <__fp_pscB>
    1886:	40 f0       	brcs	.+16     	; 0x1898 <__divsf3+0x18>
    1888:	da d0       	rcall	.+436    	; 0x1a3e <__fp_pscA>
    188a:	30 f0       	brcs	.+12     	; 0x1898 <__divsf3+0x18>
    188c:	21 f4       	brne	.+8      	; 0x1896 <__divsf3+0x16>
    188e:	5f 3f       	cpi	r21, 0xFF	; 255
    1890:	19 f0       	breq	.+6      	; 0x1898 <__divsf3+0x18>
    1892:	cc c0       	rjmp	.+408    	; 0x1a2c <__fp_inf>
    1894:	51 11       	cpse	r21, r1
    1896:	15 c1       	rjmp	.+554    	; 0x1ac2 <__fp_szero>
    1898:	cf c0       	rjmp	.+414    	; 0x1a38 <__fp_nan>

0000189a <__divsf3x>:
    189a:	f0 d0       	rcall	.+480    	; 0x1a7c <__fp_split3>
    189c:	98 f3       	brcs	.-26     	; 0x1884 <__divsf3+0x4>

0000189e <__divsf3_pse>:
    189e:	99 23       	and	r25, r25
    18a0:	c9 f3       	breq	.-14     	; 0x1894 <__divsf3+0x14>
    18a2:	55 23       	and	r21, r21
    18a4:	b1 f3       	breq	.-20     	; 0x1892 <__divsf3+0x12>
    18a6:	95 1b       	sub	r25, r21
    18a8:	55 0b       	sbc	r21, r21
    18aa:	bb 27       	eor	r27, r27
    18ac:	aa 27       	eor	r26, r26
    18ae:	62 17       	cp	r22, r18
    18b0:	73 07       	cpc	r23, r19
    18b2:	84 07       	cpc	r24, r20
    18b4:	38 f0       	brcs	.+14     	; 0x18c4 <__divsf3_pse+0x26>
    18b6:	9f 5f       	subi	r25, 0xFF	; 255
    18b8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ba:	22 0f       	add	r18, r18
    18bc:	33 1f       	adc	r19, r19
    18be:	44 1f       	adc	r20, r20
    18c0:	aa 1f       	adc	r26, r26
    18c2:	a9 f3       	breq	.-22     	; 0x18ae <__divsf3_pse+0x10>
    18c4:	33 d0       	rcall	.+102    	; 0x192c <__divsf3_pse+0x8e>
    18c6:	0e 2e       	mov	r0, r30
    18c8:	3a f0       	brmi	.+14     	; 0x18d8 <__divsf3_pse+0x3a>
    18ca:	e0 e8       	ldi	r30, 0x80	; 128
    18cc:	30 d0       	rcall	.+96     	; 0x192e <__divsf3_pse+0x90>
    18ce:	91 50       	subi	r25, 0x01	; 1
    18d0:	50 40       	sbci	r21, 0x00	; 0
    18d2:	e6 95       	lsr	r30
    18d4:	00 1c       	adc	r0, r0
    18d6:	ca f7       	brpl	.-14     	; 0x18ca <__divsf3_pse+0x2c>
    18d8:	29 d0       	rcall	.+82     	; 0x192c <__divsf3_pse+0x8e>
    18da:	fe 2f       	mov	r31, r30
    18dc:	27 d0       	rcall	.+78     	; 0x192c <__divsf3_pse+0x8e>
    18de:	66 0f       	add	r22, r22
    18e0:	77 1f       	adc	r23, r23
    18e2:	88 1f       	adc	r24, r24
    18e4:	bb 1f       	adc	r27, r27
    18e6:	26 17       	cp	r18, r22
    18e8:	37 07       	cpc	r19, r23
    18ea:	48 07       	cpc	r20, r24
    18ec:	ab 07       	cpc	r26, r27
    18ee:	b0 e8       	ldi	r27, 0x80	; 128
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <__divsf3_pse+0x56>
    18f2:	bb 0b       	sbc	r27, r27
    18f4:	80 2d       	mov	r24, r0
    18f6:	bf 01       	movw	r22, r30
    18f8:	ff 27       	eor	r31, r31
    18fa:	93 58       	subi	r25, 0x83	; 131
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	2a f0       	brmi	.+10     	; 0x190a <__divsf3_pse+0x6c>
    1900:	9e 3f       	cpi	r25, 0xFE	; 254
    1902:	51 05       	cpc	r21, r1
    1904:	68 f0       	brcs	.+26     	; 0x1920 <__divsf3_pse+0x82>
    1906:	92 c0       	rjmp	.+292    	; 0x1a2c <__fp_inf>
    1908:	dc c0       	rjmp	.+440    	; 0x1ac2 <__fp_szero>
    190a:	5f 3f       	cpi	r21, 0xFF	; 255
    190c:	ec f3       	brlt	.-6      	; 0x1908 <__divsf3_pse+0x6a>
    190e:	98 3e       	cpi	r25, 0xE8	; 232
    1910:	dc f3       	brlt	.-10     	; 0x1908 <__divsf3_pse+0x6a>
    1912:	86 95       	lsr	r24
    1914:	77 95       	ror	r23
    1916:	67 95       	ror	r22
    1918:	b7 95       	ror	r27
    191a:	f7 95       	ror	r31
    191c:	9f 5f       	subi	r25, 0xFF	; 255
    191e:	c9 f7       	brne	.-14     	; 0x1912 <__divsf3_pse+0x74>
    1920:	88 0f       	add	r24, r24
    1922:	91 1d       	adc	r25, r1
    1924:	96 95       	lsr	r25
    1926:	87 95       	ror	r24
    1928:	97 f9       	bld	r25, 7
    192a:	08 95       	ret
    192c:	e1 e0       	ldi	r30, 0x01	; 1
    192e:	66 0f       	add	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	88 1f       	adc	r24, r24
    1934:	bb 1f       	adc	r27, r27
    1936:	62 17       	cp	r22, r18
    1938:	73 07       	cpc	r23, r19
    193a:	84 07       	cpc	r24, r20
    193c:	ba 07       	cpc	r27, r26
    193e:	20 f0       	brcs	.+8      	; 0x1948 <__divsf3_pse+0xaa>
    1940:	62 1b       	sub	r22, r18
    1942:	73 0b       	sbc	r23, r19
    1944:	84 0b       	sbc	r24, r20
    1946:	ba 0b       	sbc	r27, r26
    1948:	ee 1f       	adc	r30, r30
    194a:	88 f7       	brcc	.-30     	; 0x192e <__divsf3_pse+0x90>
    194c:	e0 95       	com	r30
    194e:	08 95       	ret

00001950 <__fixsfsi>:
    1950:	04 d0       	rcall	.+8      	; 0x195a <__fixunssfsi>
    1952:	68 94       	set
    1954:	b1 11       	cpse	r27, r1
    1956:	b5 c0       	rjmp	.+362    	; 0x1ac2 <__fp_szero>
    1958:	08 95       	ret

0000195a <__fixunssfsi>:
    195a:	98 d0       	rcall	.+304    	; 0x1a8c <__fp_splitA>
    195c:	88 f0       	brcs	.+34     	; 0x1980 <__fixunssfsi+0x26>
    195e:	9f 57       	subi	r25, 0x7F	; 127
    1960:	90 f0       	brcs	.+36     	; 0x1986 <__fixunssfsi+0x2c>
    1962:	b9 2f       	mov	r27, r25
    1964:	99 27       	eor	r25, r25
    1966:	b7 51       	subi	r27, 0x17	; 23
    1968:	a0 f0       	brcs	.+40     	; 0x1992 <__fixunssfsi+0x38>
    196a:	d1 f0       	breq	.+52     	; 0x19a0 <__fixunssfsi+0x46>
    196c:	66 0f       	add	r22, r22
    196e:	77 1f       	adc	r23, r23
    1970:	88 1f       	adc	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	1a f0       	brmi	.+6      	; 0x197c <__fixunssfsi+0x22>
    1976:	ba 95       	dec	r27
    1978:	c9 f7       	brne	.-14     	; 0x196c <__fixunssfsi+0x12>
    197a:	12 c0       	rjmp	.+36     	; 0x19a0 <__fixunssfsi+0x46>
    197c:	b1 30       	cpi	r27, 0x01	; 1
    197e:	81 f0       	breq	.+32     	; 0x19a0 <__fixunssfsi+0x46>
    1980:	9f d0       	rcall	.+318    	; 0x1ac0 <__fp_zero>
    1982:	b1 e0       	ldi	r27, 0x01	; 1
    1984:	08 95       	ret
    1986:	9c c0       	rjmp	.+312    	; 0x1ac0 <__fp_zero>
    1988:	67 2f       	mov	r22, r23
    198a:	78 2f       	mov	r23, r24
    198c:	88 27       	eor	r24, r24
    198e:	b8 5f       	subi	r27, 0xF8	; 248
    1990:	39 f0       	breq	.+14     	; 0x19a0 <__fixunssfsi+0x46>
    1992:	b9 3f       	cpi	r27, 0xF9	; 249
    1994:	cc f3       	brlt	.-14     	; 0x1988 <__fixunssfsi+0x2e>
    1996:	86 95       	lsr	r24
    1998:	77 95       	ror	r23
    199a:	67 95       	ror	r22
    199c:	b3 95       	inc	r27
    199e:	d9 f7       	brne	.-10     	; 0x1996 <__fixunssfsi+0x3c>
    19a0:	3e f4       	brtc	.+14     	; 0x19b0 <__fixunssfsi+0x56>
    19a2:	90 95       	com	r25
    19a4:	80 95       	com	r24
    19a6:	70 95       	com	r23
    19a8:	61 95       	neg	r22
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255
    19ac:	8f 4f       	sbci	r24, 0xFF	; 255
    19ae:	9f 4f       	sbci	r25, 0xFF	; 255
    19b0:	08 95       	ret

000019b2 <__floatunsisf>:
    19b2:	e8 94       	clt
    19b4:	09 c0       	rjmp	.+18     	; 0x19c8 <__floatsisf+0x12>

000019b6 <__floatsisf>:
    19b6:	97 fb       	bst	r25, 7
    19b8:	3e f4       	brtc	.+14     	; 0x19c8 <__floatsisf+0x12>
    19ba:	90 95       	com	r25
    19bc:	80 95       	com	r24
    19be:	70 95       	com	r23
    19c0:	61 95       	neg	r22
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	8f 4f       	sbci	r24, 0xFF	; 255
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	99 23       	and	r25, r25
    19ca:	a9 f0       	breq	.+42     	; 0x19f6 <__floatsisf+0x40>
    19cc:	f9 2f       	mov	r31, r25
    19ce:	96 e9       	ldi	r25, 0x96	; 150
    19d0:	bb 27       	eor	r27, r27
    19d2:	93 95       	inc	r25
    19d4:	f6 95       	lsr	r31
    19d6:	87 95       	ror	r24
    19d8:	77 95       	ror	r23
    19da:	67 95       	ror	r22
    19dc:	b7 95       	ror	r27
    19de:	f1 11       	cpse	r31, r1
    19e0:	f8 cf       	rjmp	.-16     	; 0x19d2 <__floatsisf+0x1c>
    19e2:	fa f4       	brpl	.+62     	; 0x1a22 <__floatsisf+0x6c>
    19e4:	bb 0f       	add	r27, r27
    19e6:	11 f4       	brne	.+4      	; 0x19ec <__floatsisf+0x36>
    19e8:	60 ff       	sbrs	r22, 0
    19ea:	1b c0       	rjmp	.+54     	; 0x1a22 <__floatsisf+0x6c>
    19ec:	6f 5f       	subi	r22, 0xFF	; 255
    19ee:	7f 4f       	sbci	r23, 0xFF	; 255
    19f0:	8f 4f       	sbci	r24, 0xFF	; 255
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
    19f4:	16 c0       	rjmp	.+44     	; 0x1a22 <__floatsisf+0x6c>
    19f6:	88 23       	and	r24, r24
    19f8:	11 f0       	breq	.+4      	; 0x19fe <__floatsisf+0x48>
    19fa:	96 e9       	ldi	r25, 0x96	; 150
    19fc:	11 c0       	rjmp	.+34     	; 0x1a20 <__floatsisf+0x6a>
    19fe:	77 23       	and	r23, r23
    1a00:	21 f0       	breq	.+8      	; 0x1a0a <__floatsisf+0x54>
    1a02:	9e e8       	ldi	r25, 0x8E	; 142
    1a04:	87 2f       	mov	r24, r23
    1a06:	76 2f       	mov	r23, r22
    1a08:	05 c0       	rjmp	.+10     	; 0x1a14 <__floatsisf+0x5e>
    1a0a:	66 23       	and	r22, r22
    1a0c:	71 f0       	breq	.+28     	; 0x1a2a <__floatsisf+0x74>
    1a0e:	96 e8       	ldi	r25, 0x86	; 134
    1a10:	86 2f       	mov	r24, r22
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	2a f0       	brmi	.+10     	; 0x1a22 <__floatsisf+0x6c>
    1a18:	9a 95       	dec	r25
    1a1a:	66 0f       	add	r22, r22
    1a1c:	77 1f       	adc	r23, r23
    1a1e:	88 1f       	adc	r24, r24
    1a20:	da f7       	brpl	.-10     	; 0x1a18 <__floatsisf+0x62>
    1a22:	88 0f       	add	r24, r24
    1a24:	96 95       	lsr	r25
    1a26:	87 95       	ror	r24
    1a28:	97 f9       	bld	r25, 7
    1a2a:	08 95       	ret

00001a2c <__fp_inf>:
    1a2c:	97 f9       	bld	r25, 7
    1a2e:	9f 67       	ori	r25, 0x7F	; 127
    1a30:	80 e8       	ldi	r24, 0x80	; 128
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	08 95       	ret

00001a38 <__fp_nan>:
    1a38:	9f ef       	ldi	r25, 0xFF	; 255
    1a3a:	80 ec       	ldi	r24, 0xC0	; 192
    1a3c:	08 95       	ret

00001a3e <__fp_pscA>:
    1a3e:	00 24       	eor	r0, r0
    1a40:	0a 94       	dec	r0
    1a42:	16 16       	cp	r1, r22
    1a44:	17 06       	cpc	r1, r23
    1a46:	18 06       	cpc	r1, r24
    1a48:	09 06       	cpc	r0, r25
    1a4a:	08 95       	ret

00001a4c <__fp_pscB>:
    1a4c:	00 24       	eor	r0, r0
    1a4e:	0a 94       	dec	r0
    1a50:	12 16       	cp	r1, r18
    1a52:	13 06       	cpc	r1, r19
    1a54:	14 06       	cpc	r1, r20
    1a56:	05 06       	cpc	r0, r21
    1a58:	08 95       	ret

00001a5a <__fp_round>:
    1a5a:	09 2e       	mov	r0, r25
    1a5c:	03 94       	inc	r0
    1a5e:	00 0c       	add	r0, r0
    1a60:	11 f4       	brne	.+4      	; 0x1a66 <__fp_round+0xc>
    1a62:	88 23       	and	r24, r24
    1a64:	52 f0       	brmi	.+20     	; 0x1a7a <__fp_round+0x20>
    1a66:	bb 0f       	add	r27, r27
    1a68:	40 f4       	brcc	.+16     	; 0x1a7a <__fp_round+0x20>
    1a6a:	bf 2b       	or	r27, r31
    1a6c:	11 f4       	brne	.+4      	; 0x1a72 <__fp_round+0x18>
    1a6e:	60 ff       	sbrs	r22, 0
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <__fp_round+0x20>
    1a72:	6f 5f       	subi	r22, 0xFF	; 255
    1a74:	7f 4f       	sbci	r23, 0xFF	; 255
    1a76:	8f 4f       	sbci	r24, 0xFF	; 255
    1a78:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7a:	08 95       	ret

00001a7c <__fp_split3>:
    1a7c:	57 fd       	sbrc	r21, 7
    1a7e:	90 58       	subi	r25, 0x80	; 128
    1a80:	44 0f       	add	r20, r20
    1a82:	55 1f       	adc	r21, r21
    1a84:	59 f0       	breq	.+22     	; 0x1a9c <__fp_splitA+0x10>
    1a86:	5f 3f       	cpi	r21, 0xFF	; 255
    1a88:	71 f0       	breq	.+28     	; 0x1aa6 <__fp_splitA+0x1a>
    1a8a:	47 95       	ror	r20

00001a8c <__fp_splitA>:
    1a8c:	88 0f       	add	r24, r24
    1a8e:	97 fb       	bst	r25, 7
    1a90:	99 1f       	adc	r25, r25
    1a92:	61 f0       	breq	.+24     	; 0x1aac <__fp_splitA+0x20>
    1a94:	9f 3f       	cpi	r25, 0xFF	; 255
    1a96:	79 f0       	breq	.+30     	; 0x1ab6 <__fp_splitA+0x2a>
    1a98:	87 95       	ror	r24
    1a9a:	08 95       	ret
    1a9c:	12 16       	cp	r1, r18
    1a9e:	13 06       	cpc	r1, r19
    1aa0:	14 06       	cpc	r1, r20
    1aa2:	55 1f       	adc	r21, r21
    1aa4:	f2 cf       	rjmp	.-28     	; 0x1a8a <__fp_split3+0xe>
    1aa6:	46 95       	lsr	r20
    1aa8:	f1 df       	rcall	.-30     	; 0x1a8c <__fp_splitA>
    1aaa:	08 c0       	rjmp	.+16     	; 0x1abc <__fp_splitA+0x30>
    1aac:	16 16       	cp	r1, r22
    1aae:	17 06       	cpc	r1, r23
    1ab0:	18 06       	cpc	r1, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	f1 cf       	rjmp	.-30     	; 0x1a98 <__fp_splitA+0xc>
    1ab6:	86 95       	lsr	r24
    1ab8:	71 05       	cpc	r23, r1
    1aba:	61 05       	cpc	r22, r1
    1abc:	08 94       	sec
    1abe:	08 95       	ret

00001ac0 <__fp_zero>:
    1ac0:	e8 94       	clt

00001ac2 <__fp_szero>:
    1ac2:	bb 27       	eor	r27, r27
    1ac4:	66 27       	eor	r22, r22
    1ac6:	77 27       	eor	r23, r23
    1ac8:	cb 01       	movw	r24, r22
    1aca:	97 f9       	bld	r25, 7
    1acc:	08 95       	ret

00001ace <__mulsf3>:
    1ace:	0b d0       	rcall	.+22     	; 0x1ae6 <__mulsf3x>
    1ad0:	c4 cf       	rjmp	.-120    	; 0x1a5a <__fp_round>
    1ad2:	b5 df       	rcall	.-150    	; 0x1a3e <__fp_pscA>
    1ad4:	28 f0       	brcs	.+10     	; 0x1ae0 <__mulsf3+0x12>
    1ad6:	ba df       	rcall	.-140    	; 0x1a4c <__fp_pscB>
    1ad8:	18 f0       	brcs	.+6      	; 0x1ae0 <__mulsf3+0x12>
    1ada:	95 23       	and	r25, r21
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <__mulsf3+0x12>
    1ade:	a6 cf       	rjmp	.-180    	; 0x1a2c <__fp_inf>
    1ae0:	ab cf       	rjmp	.-170    	; 0x1a38 <__fp_nan>
    1ae2:	11 24       	eor	r1, r1
    1ae4:	ee cf       	rjmp	.-36     	; 0x1ac2 <__fp_szero>

00001ae6 <__mulsf3x>:
    1ae6:	ca df       	rcall	.-108    	; 0x1a7c <__fp_split3>
    1ae8:	a0 f3       	brcs	.-24     	; 0x1ad2 <__mulsf3+0x4>

00001aea <__mulsf3_pse>:
    1aea:	95 9f       	mul	r25, r21
    1aec:	d1 f3       	breq	.-12     	; 0x1ae2 <__mulsf3+0x14>
    1aee:	95 0f       	add	r25, r21
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	55 1f       	adc	r21, r21
    1af4:	62 9f       	mul	r22, r18
    1af6:	f0 01       	movw	r30, r0
    1af8:	72 9f       	mul	r23, r18
    1afa:	bb 27       	eor	r27, r27
    1afc:	f0 0d       	add	r31, r0
    1afe:	b1 1d       	adc	r27, r1
    1b00:	63 9f       	mul	r22, r19
    1b02:	aa 27       	eor	r26, r26
    1b04:	f0 0d       	add	r31, r0
    1b06:	b1 1d       	adc	r27, r1
    1b08:	aa 1f       	adc	r26, r26
    1b0a:	64 9f       	mul	r22, r20
    1b0c:	66 27       	eor	r22, r22
    1b0e:	b0 0d       	add	r27, r0
    1b10:	a1 1d       	adc	r26, r1
    1b12:	66 1f       	adc	r22, r22
    1b14:	82 9f       	mul	r24, r18
    1b16:	22 27       	eor	r18, r18
    1b18:	b0 0d       	add	r27, r0
    1b1a:	a1 1d       	adc	r26, r1
    1b1c:	62 1f       	adc	r22, r18
    1b1e:	73 9f       	mul	r23, r19
    1b20:	b0 0d       	add	r27, r0
    1b22:	a1 1d       	adc	r26, r1
    1b24:	62 1f       	adc	r22, r18
    1b26:	83 9f       	mul	r24, r19
    1b28:	a0 0d       	add	r26, r0
    1b2a:	61 1d       	adc	r22, r1
    1b2c:	22 1f       	adc	r18, r18
    1b2e:	74 9f       	mul	r23, r20
    1b30:	33 27       	eor	r19, r19
    1b32:	a0 0d       	add	r26, r0
    1b34:	61 1d       	adc	r22, r1
    1b36:	23 1f       	adc	r18, r19
    1b38:	84 9f       	mul	r24, r20
    1b3a:	60 0d       	add	r22, r0
    1b3c:	21 1d       	adc	r18, r1
    1b3e:	82 2f       	mov	r24, r18
    1b40:	76 2f       	mov	r23, r22
    1b42:	6a 2f       	mov	r22, r26
    1b44:	11 24       	eor	r1, r1
    1b46:	9f 57       	subi	r25, 0x7F	; 127
    1b48:	50 40       	sbci	r21, 0x00	; 0
    1b4a:	8a f0       	brmi	.+34     	; 0x1b6e <__mulsf3_pse+0x84>
    1b4c:	e1 f0       	breq	.+56     	; 0x1b86 <__mulsf3_pse+0x9c>
    1b4e:	88 23       	and	r24, r24
    1b50:	4a f0       	brmi	.+18     	; 0x1b64 <__mulsf3_pse+0x7a>
    1b52:	ee 0f       	add	r30, r30
    1b54:	ff 1f       	adc	r31, r31
    1b56:	bb 1f       	adc	r27, r27
    1b58:	66 1f       	adc	r22, r22
    1b5a:	77 1f       	adc	r23, r23
    1b5c:	88 1f       	adc	r24, r24
    1b5e:	91 50       	subi	r25, 0x01	; 1
    1b60:	50 40       	sbci	r21, 0x00	; 0
    1b62:	a9 f7       	brne	.-22     	; 0x1b4e <__mulsf3_pse+0x64>
    1b64:	9e 3f       	cpi	r25, 0xFE	; 254
    1b66:	51 05       	cpc	r21, r1
    1b68:	70 f0       	brcs	.+28     	; 0x1b86 <__mulsf3_pse+0x9c>
    1b6a:	60 cf       	rjmp	.-320    	; 0x1a2c <__fp_inf>
    1b6c:	aa cf       	rjmp	.-172    	; 0x1ac2 <__fp_szero>
    1b6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b70:	ec f3       	brlt	.-6      	; 0x1b6c <__mulsf3_pse+0x82>
    1b72:	98 3e       	cpi	r25, 0xE8	; 232
    1b74:	dc f3       	brlt	.-10     	; 0x1b6c <__mulsf3_pse+0x82>
    1b76:	86 95       	lsr	r24
    1b78:	77 95       	ror	r23
    1b7a:	67 95       	ror	r22
    1b7c:	b7 95       	ror	r27
    1b7e:	f7 95       	ror	r31
    1b80:	e7 95       	ror	r30
    1b82:	9f 5f       	subi	r25, 0xFF	; 255
    1b84:	c1 f7       	brne	.-16     	; 0x1b76 <__mulsf3_pse+0x8c>
    1b86:	fe 2b       	or	r31, r30
    1b88:	88 0f       	add	r24, r24
    1b8a:	91 1d       	adc	r25, r1
    1b8c:	96 95       	lsr	r25
    1b8e:	87 95       	ror	r24
    1b90:	97 f9       	bld	r25, 7
    1b92:	08 95       	ret

00001b94 <pow>:
    1b94:	fa 01       	movw	r30, r20
    1b96:	ee 0f       	add	r30, r30
    1b98:	ff 1f       	adc	r31, r31
    1b9a:	30 96       	adiw	r30, 0x00	; 0
    1b9c:	21 05       	cpc	r18, r1
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	99 f1       	breq	.+102    	; 0x1c08 <pow+0x74>
    1ba2:	61 15       	cp	r22, r1
    1ba4:	71 05       	cpc	r23, r1
    1ba6:	61 f4       	brne	.+24     	; 0x1bc0 <pow+0x2c>
    1ba8:	80 38       	cpi	r24, 0x80	; 128
    1baa:	bf e3       	ldi	r27, 0x3F	; 63
    1bac:	9b 07       	cpc	r25, r27
    1bae:	49 f1       	breq	.+82     	; 0x1c02 <pow+0x6e>
    1bb0:	68 94       	set
    1bb2:	90 38       	cpi	r25, 0x80	; 128
    1bb4:	81 05       	cpc	r24, r1
    1bb6:	61 f0       	breq	.+24     	; 0x1bd0 <pow+0x3c>
    1bb8:	80 38       	cpi	r24, 0x80	; 128
    1bba:	bf ef       	ldi	r27, 0xFF	; 255
    1bbc:	9b 07       	cpc	r25, r27
    1bbe:	41 f0       	breq	.+16     	; 0x1bd0 <pow+0x3c>
    1bc0:	99 23       	and	r25, r25
    1bc2:	42 f5       	brpl	.+80     	; 0x1c14 <pow+0x80>
    1bc4:	ff 3f       	cpi	r31, 0xFF	; 255
    1bc6:	e1 05       	cpc	r30, r1
    1bc8:	31 05       	cpc	r19, r1
    1bca:	21 05       	cpc	r18, r1
    1bcc:	11 f1       	breq	.+68     	; 0x1c12 <pow+0x7e>
    1bce:	e8 94       	clt
    1bd0:	08 94       	sec
    1bd2:	e7 95       	ror	r30
    1bd4:	d9 01       	movw	r26, r18
    1bd6:	aa 23       	and	r26, r26
    1bd8:	29 f4       	brne	.+10     	; 0x1be4 <pow+0x50>
    1bda:	ab 2f       	mov	r26, r27
    1bdc:	be 2f       	mov	r27, r30
    1bde:	f8 5f       	subi	r31, 0xF8	; 248
    1be0:	d0 f3       	brcs	.-12     	; 0x1bd6 <pow+0x42>
    1be2:	10 c0       	rjmp	.+32     	; 0x1c04 <pow+0x70>
    1be4:	ff 5f       	subi	r31, 0xFF	; 255
    1be6:	70 f4       	brcc	.+28     	; 0x1c04 <pow+0x70>
    1be8:	a6 95       	lsr	r26
    1bea:	e0 f7       	brcc	.-8      	; 0x1be4 <pow+0x50>
    1bec:	f7 39       	cpi	r31, 0x97	; 151
    1bee:	50 f0       	brcs	.+20     	; 0x1c04 <pow+0x70>
    1bf0:	19 f0       	breq	.+6      	; 0x1bf8 <pow+0x64>
    1bf2:	ff 3a       	cpi	r31, 0xAF	; 175
    1bf4:	38 f4       	brcc	.+14     	; 0x1c04 <pow+0x70>
    1bf6:	9f 77       	andi	r25, 0x7F	; 127
    1bf8:	9f 93       	push	r25
    1bfa:	0c d0       	rcall	.+24     	; 0x1c14 <pow+0x80>
    1bfc:	0f 90       	pop	r0
    1bfe:	07 fc       	sbrc	r0, 7
    1c00:	90 58       	subi	r25, 0x80	; 128
    1c02:	08 95       	ret
    1c04:	3e f0       	brts	.+14     	; 0x1c14 <pow+0x80>
    1c06:	18 cf       	rjmp	.-464    	; 0x1a38 <__fp_nan>
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	80 e8       	ldi	r24, 0x80	; 128
    1c0e:	9f e3       	ldi	r25, 0x3F	; 63
    1c10:	08 95       	ret
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	9f 77       	andi	r25, 0x7F	; 127
    1c16:	5f 93       	push	r21
    1c18:	4f 93       	push	r20
    1c1a:	3f 93       	push	r19
    1c1c:	2f 93       	push	r18
    1c1e:	9e d0       	rcall	.+316    	; 0x1d5c <log>
    1c20:	2f 91       	pop	r18
    1c22:	3f 91       	pop	r19
    1c24:	4f 91       	pop	r20
    1c26:	5f 91       	pop	r21
    1c28:	52 df       	rcall	.-348    	; 0x1ace <__mulsf3>
    1c2a:	05 c0       	rjmp	.+10     	; 0x1c36 <exp>
    1c2c:	19 f4       	brne	.+6      	; 0x1c34 <pow+0xa0>
    1c2e:	0e f0       	brts	.+2      	; 0x1c32 <pow+0x9e>
    1c30:	fd ce       	rjmp	.-518    	; 0x1a2c <__fp_inf>
    1c32:	46 cf       	rjmp	.-372    	; 0x1ac0 <__fp_zero>
    1c34:	01 cf       	rjmp	.-510    	; 0x1a38 <__fp_nan>

00001c36 <exp>:
    1c36:	2a df       	rcall	.-428    	; 0x1a8c <__fp_splitA>
    1c38:	c8 f3       	brcs	.-14     	; 0x1c2c <pow+0x98>
    1c3a:	96 38       	cpi	r25, 0x86	; 134
    1c3c:	c0 f7       	brcc	.-16     	; 0x1c2e <pow+0x9a>
    1c3e:	07 f8       	bld	r0, 7
    1c40:	0f 92       	push	r0
    1c42:	e8 94       	clt
    1c44:	2b e3       	ldi	r18, 0x3B	; 59
    1c46:	3a ea       	ldi	r19, 0xAA	; 170
    1c48:	48 eb       	ldi	r20, 0xB8	; 184
    1c4a:	5f e7       	ldi	r21, 0x7F	; 127
    1c4c:	4e df       	rcall	.-356    	; 0x1aea <__mulsf3_pse>
    1c4e:	0f 92       	push	r0
    1c50:	0f 92       	push	r0
    1c52:	0f 92       	push	r0
    1c54:	4d b7       	in	r20, 0x3d	; 61
    1c56:	5e b7       	in	r21, 0x3e	; 62
    1c58:	0f 92       	push	r0
    1c5a:	c0 d0       	rcall	.+384    	; 0x1ddc <modf>
    1c5c:	e8 ed       	ldi	r30, 0xD8	; 216
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	16 d0       	rcall	.+44     	; 0x1c8e <__fp_powser>
    1c62:	4f 91       	pop	r20
    1c64:	5f 91       	pop	r21
    1c66:	ef 91       	pop	r30
    1c68:	ff 91       	pop	r31
    1c6a:	e5 95       	asr	r30
    1c6c:	ee 1f       	adc	r30, r30
    1c6e:	ff 1f       	adc	r31, r31
    1c70:	49 f0       	breq	.+18     	; 0x1c84 <exp+0x4e>
    1c72:	fe 57       	subi	r31, 0x7E	; 126
    1c74:	e0 68       	ori	r30, 0x80	; 128
    1c76:	44 27       	eor	r20, r20
    1c78:	ee 0f       	add	r30, r30
    1c7a:	44 1f       	adc	r20, r20
    1c7c:	fa 95       	dec	r31
    1c7e:	e1 f7       	brne	.-8      	; 0x1c78 <exp+0x42>
    1c80:	41 95       	neg	r20
    1c82:	55 0b       	sbc	r21, r21
    1c84:	32 d0       	rcall	.+100    	; 0x1cea <ldexp>
    1c86:	0f 90       	pop	r0
    1c88:	07 fe       	sbrs	r0, 7
    1c8a:	26 c0       	rjmp	.+76     	; 0x1cd8 <inverse>
    1c8c:	08 95       	ret

00001c8e <__fp_powser>:
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	1f 93       	push	r17
    1c94:	0f 93       	push	r16
    1c96:	ff 92       	push	r15
    1c98:	ef 92       	push	r14
    1c9a:	df 92       	push	r13
    1c9c:	7b 01       	movw	r14, r22
    1c9e:	8c 01       	movw	r16, r24
    1ca0:	68 94       	set
    1ca2:	05 c0       	rjmp	.+10     	; 0x1cae <__fp_powser+0x20>
    1ca4:	da 2e       	mov	r13, r26
    1ca6:	ef 01       	movw	r28, r30
    1ca8:	1e df       	rcall	.-452    	; 0x1ae6 <__mulsf3x>
    1caa:	fe 01       	movw	r30, r28
    1cac:	e8 94       	clt
    1cae:	a5 91       	lpm	r26, Z+
    1cb0:	25 91       	lpm	r18, Z+
    1cb2:	35 91       	lpm	r19, Z+
    1cb4:	45 91       	lpm	r20, Z+
    1cb6:	55 91       	lpm	r21, Z+
    1cb8:	ae f3       	brts	.-22     	; 0x1ca4 <__fp_powser+0x16>
    1cba:	ef 01       	movw	r28, r30
    1cbc:	8e dd       	rcall	.-1252   	; 0x17da <__addsf3x>
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	97 01       	movw	r18, r14
    1cc2:	a8 01       	movw	r20, r16
    1cc4:	da 94       	dec	r13
    1cc6:	79 f7       	brne	.-34     	; 0x1ca6 <__fp_powser+0x18>
    1cc8:	df 90       	pop	r13
    1cca:	ef 90       	pop	r14
    1ccc:	ff 90       	pop	r15
    1cce:	0f 91       	pop	r16
    1cd0:	1f 91       	pop	r17
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <inverse>:
    1cd8:	9b 01       	movw	r18, r22
    1cda:	ac 01       	movw	r20, r24
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	80 e8       	ldi	r24, 0x80	; 128
    1ce2:	9f e3       	ldi	r25, 0x3F	; 63
    1ce4:	cd cd       	rjmp	.-1126   	; 0x1880 <__divsf3>
    1ce6:	a2 ce       	rjmp	.-700    	; 0x1a2c <__fp_inf>
    1ce8:	ac c0       	rjmp	.+344    	; 0x1e42 <__fp_mpack>

00001cea <ldexp>:
    1cea:	d0 de       	rcall	.-608    	; 0x1a8c <__fp_splitA>
    1cec:	e8 f3       	brcs	.-6      	; 0x1ce8 <inverse+0x10>
    1cee:	99 23       	and	r25, r25
    1cf0:	d9 f3       	breq	.-10     	; 0x1ce8 <inverse+0x10>
    1cf2:	94 0f       	add	r25, r20
    1cf4:	51 1d       	adc	r21, r1
    1cf6:	bb f3       	brvs	.-18     	; 0x1ce6 <inverse+0xe>
    1cf8:	91 50       	subi	r25, 0x01	; 1
    1cfa:	50 40       	sbci	r21, 0x00	; 0
    1cfc:	94 f0       	brlt	.+36     	; 0x1d22 <ldexp+0x38>
    1cfe:	59 f0       	breq	.+22     	; 0x1d16 <ldexp+0x2c>
    1d00:	88 23       	and	r24, r24
    1d02:	32 f0       	brmi	.+12     	; 0x1d10 <ldexp+0x26>
    1d04:	66 0f       	add	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	88 1f       	adc	r24, r24
    1d0a:	91 50       	subi	r25, 0x01	; 1
    1d0c:	50 40       	sbci	r21, 0x00	; 0
    1d0e:	c1 f7       	brne	.-16     	; 0x1d00 <ldexp+0x16>
    1d10:	9e 3f       	cpi	r25, 0xFE	; 254
    1d12:	51 05       	cpc	r21, r1
    1d14:	44 f7       	brge	.-48     	; 0x1ce6 <inverse+0xe>
    1d16:	88 0f       	add	r24, r24
    1d18:	91 1d       	adc	r25, r1
    1d1a:	96 95       	lsr	r25
    1d1c:	87 95       	ror	r24
    1d1e:	97 f9       	bld	r25, 7
    1d20:	08 95       	ret
    1d22:	5f 3f       	cpi	r21, 0xFF	; 255
    1d24:	ac f0       	brlt	.+42     	; 0x1d50 <ldexp+0x66>
    1d26:	98 3e       	cpi	r25, 0xE8	; 232
    1d28:	9c f0       	brlt	.+38     	; 0x1d50 <ldexp+0x66>
    1d2a:	bb 27       	eor	r27, r27
    1d2c:	86 95       	lsr	r24
    1d2e:	77 95       	ror	r23
    1d30:	67 95       	ror	r22
    1d32:	b7 95       	ror	r27
    1d34:	08 f4       	brcc	.+2      	; 0x1d38 <ldexp+0x4e>
    1d36:	b1 60       	ori	r27, 0x01	; 1
    1d38:	93 95       	inc	r25
    1d3a:	c1 f7       	brne	.-16     	; 0x1d2c <ldexp+0x42>
    1d3c:	bb 0f       	add	r27, r27
    1d3e:	58 f7       	brcc	.-42     	; 0x1d16 <ldexp+0x2c>
    1d40:	11 f4       	brne	.+4      	; 0x1d46 <ldexp+0x5c>
    1d42:	60 ff       	sbrs	r22, 0
    1d44:	e8 cf       	rjmp	.-48     	; 0x1d16 <ldexp+0x2c>
    1d46:	6f 5f       	subi	r22, 0xFF	; 255
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4e:	e3 cf       	rjmp	.-58     	; 0x1d16 <ldexp+0x2c>
    1d50:	b8 ce       	rjmp	.-656    	; 0x1ac2 <__fp_szero>
    1d52:	0e f0       	brts	.+2      	; 0x1d56 <ldexp+0x6c>
    1d54:	76 c0       	rjmp	.+236    	; 0x1e42 <__fp_mpack>
    1d56:	70 ce       	rjmp	.-800    	; 0x1a38 <__fp_nan>
    1d58:	68 94       	set
    1d5a:	68 ce       	rjmp	.-816    	; 0x1a2c <__fp_inf>

00001d5c <log>:
    1d5c:	97 de       	rcall	.-722    	; 0x1a8c <__fp_splitA>
    1d5e:	c8 f3       	brcs	.-14     	; 0x1d52 <ldexp+0x68>
    1d60:	99 23       	and	r25, r25
    1d62:	d1 f3       	breq	.-12     	; 0x1d58 <ldexp+0x6e>
    1d64:	c6 f3       	brts	.-16     	; 0x1d56 <ldexp+0x6c>
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	1f 93       	push	r17
    1d6c:	0f 93       	push	r16
    1d6e:	ff 92       	push	r15
    1d70:	c9 2f       	mov	r28, r25
    1d72:	dd 27       	eor	r29, r29
    1d74:	88 23       	and	r24, r24
    1d76:	2a f0       	brmi	.+10     	; 0x1d82 <log+0x26>
    1d78:	21 97       	sbiw	r28, 0x01	; 1
    1d7a:	66 0f       	add	r22, r22
    1d7c:	77 1f       	adc	r23, r23
    1d7e:	88 1f       	adc	r24, r24
    1d80:	da f7       	brpl	.-10     	; 0x1d78 <log+0x1c>
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f eb       	ldi	r21, 0xBF	; 191
    1d8a:	9f e3       	ldi	r25, 0x3F	; 63
    1d8c:	88 39       	cpi	r24, 0x98	; 152
    1d8e:	20 f0       	brcs	.+8      	; 0x1d98 <log+0x3c>
    1d90:	80 3e       	cpi	r24, 0xE0	; 224
    1d92:	30 f0       	brcs	.+12     	; 0x1da0 <log+0x44>
    1d94:	21 96       	adiw	r28, 0x01	; 1
    1d96:	8f 77       	andi	r24, 0x7F	; 127
    1d98:	0f dd       	rcall	.-1506   	; 0x17b8 <__addsf3>
    1d9a:	e0 e0       	ldi	r30, 0x00	; 0
    1d9c:	f1 e0       	ldi	r31, 0x01	; 1
    1d9e:	03 c0       	rjmp	.+6      	; 0x1da6 <log+0x4a>
    1da0:	0b dd       	rcall	.-1514   	; 0x17b8 <__addsf3>
    1da2:	ed e2       	ldi	r30, 0x2D	; 45
    1da4:	f1 e0       	ldi	r31, 0x01	; 1
    1da6:	73 df       	rcall	.-282    	; 0x1c8e <__fp_powser>
    1da8:	8b 01       	movw	r16, r22
    1daa:	be 01       	movw	r22, r28
    1dac:	ec 01       	movw	r28, r24
    1dae:	fb 2e       	mov	r15, r27
    1db0:	6f 57       	subi	r22, 0x7F	; 127
    1db2:	71 09       	sbc	r23, r1
    1db4:	75 95       	asr	r23
    1db6:	77 1f       	adc	r23, r23
    1db8:	88 0b       	sbc	r24, r24
    1dba:	99 0b       	sbc	r25, r25
    1dbc:	fc dd       	rcall	.-1032   	; 0x19b6 <__floatsisf>
    1dbe:	28 e1       	ldi	r18, 0x18	; 24
    1dc0:	32 e7       	ldi	r19, 0x72	; 114
    1dc2:	41 e3       	ldi	r20, 0x31	; 49
    1dc4:	5f e3       	ldi	r21, 0x3F	; 63
    1dc6:	8f de       	rcall	.-738    	; 0x1ae6 <__mulsf3x>
    1dc8:	af 2d       	mov	r26, r15
    1dca:	98 01       	movw	r18, r16
    1dcc:	ae 01       	movw	r20, r28
    1dce:	ff 90       	pop	r15
    1dd0:	0f 91       	pop	r16
    1dd2:	1f 91       	pop	r17
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	00 dd       	rcall	.-1536   	; 0x17da <__addsf3x>
    1dda:	3f ce       	rjmp	.-898    	; 0x1a5a <__fp_round>

00001ddc <modf>:
    1ddc:	fa 01       	movw	r30, r20
    1dde:	dc 01       	movw	r26, r24
    1de0:	aa 0f       	add	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	9b 01       	movw	r18, r22
    1de6:	ac 01       	movw	r20, r24
    1de8:	bf 57       	subi	r27, 0x7F	; 127
    1dea:	28 f4       	brcc	.+10     	; 0x1df6 <modf+0x1a>
    1dec:	22 27       	eor	r18, r18
    1dee:	33 27       	eor	r19, r19
    1df0:	44 27       	eor	r20, r20
    1df2:	50 78       	andi	r21, 0x80	; 128
    1df4:	1f c0       	rjmp	.+62     	; 0x1e34 <modf+0x58>
    1df6:	b7 51       	subi	r27, 0x17	; 23
    1df8:	88 f4       	brcc	.+34     	; 0x1e1c <modf+0x40>
    1dfa:	ab 2f       	mov	r26, r27
    1dfc:	00 24       	eor	r0, r0
    1dfe:	46 95       	lsr	r20
    1e00:	37 95       	ror	r19
    1e02:	27 95       	ror	r18
    1e04:	01 1c       	adc	r0, r1
    1e06:	a3 95       	inc	r26
    1e08:	d2 f3       	brmi	.-12     	; 0x1dfe <modf+0x22>
    1e0a:	00 20       	and	r0, r0
    1e0c:	69 f0       	breq	.+26     	; 0x1e28 <modf+0x4c>
    1e0e:	22 0f       	add	r18, r18
    1e10:	33 1f       	adc	r19, r19
    1e12:	44 1f       	adc	r20, r20
    1e14:	b3 95       	inc	r27
    1e16:	da f3       	brmi	.-10     	; 0x1e0e <modf+0x32>
    1e18:	0d d0       	rcall	.+26     	; 0x1e34 <modf+0x58>
    1e1a:	cd cc       	rjmp	.-1638   	; 0x17b6 <__subsf3>
    1e1c:	61 30       	cpi	r22, 0x01	; 1
    1e1e:	71 05       	cpc	r23, r1
    1e20:	a0 e8       	ldi	r26, 0x80	; 128
    1e22:	8a 07       	cpc	r24, r26
    1e24:	b9 46       	sbci	r27, 0x69	; 105
    1e26:	30 f4       	brcc	.+12     	; 0x1e34 <modf+0x58>
    1e28:	9b 01       	movw	r18, r22
    1e2a:	ac 01       	movw	r20, r24
    1e2c:	66 27       	eor	r22, r22
    1e2e:	77 27       	eor	r23, r23
    1e30:	88 27       	eor	r24, r24
    1e32:	90 78       	andi	r25, 0x80	; 128
    1e34:	30 96       	adiw	r30, 0x00	; 0
    1e36:	21 f0       	breq	.+8      	; 0x1e40 <modf+0x64>
    1e38:	20 83       	st	Z, r18
    1e3a:	31 83       	std	Z+1, r19	; 0x01
    1e3c:	42 83       	std	Z+2, r20	; 0x02
    1e3e:	53 83       	std	Z+3, r21	; 0x03
    1e40:	08 95       	ret

00001e42 <__fp_mpack>:
    1e42:	9f 3f       	cpi	r25, 0xFF	; 255
    1e44:	31 f0       	breq	.+12     	; 0x1e52 <__fp_mpack_finite+0xc>

00001e46 <__fp_mpack_finite>:
    1e46:	91 50       	subi	r25, 0x01	; 1
    1e48:	20 f4       	brcc	.+8      	; 0x1e52 <__fp_mpack_finite+0xc>
    1e4a:	87 95       	ror	r24
    1e4c:	77 95       	ror	r23
    1e4e:	67 95       	ror	r22
    1e50:	b7 95       	ror	r27
    1e52:	88 0f       	add	r24, r24
    1e54:	91 1d       	adc	r25, r1
    1e56:	96 95       	lsr	r25
    1e58:	87 95       	ror	r24
    1e5a:	97 f9       	bld	r25, 7
    1e5c:	08 95       	ret

00001e5e <__tablejump2__>:
    1e5e:	ee 0f       	add	r30, r30
    1e60:	ff 1f       	adc	r31, r31
    1e62:	00 24       	eor	r0, r0
    1e64:	00 1c       	adc	r0, r0
    1e66:	0b be       	out	0x3b, r0	; 59
    1e68:	07 90       	elpm	r0, Z+
    1e6a:	f6 91       	elpm	r31, Z
    1e6c:	e0 2d       	mov	r30, r0
    1e6e:	09 94       	ijmp

00001e70 <eeprom_read_byte>:
    1e70:	f9 99       	sbic	0x1f, 1	; 31
    1e72:	fe cf       	rjmp	.-4      	; 0x1e70 <eeprom_read_byte>
    1e74:	92 bd       	out	0x22, r25	; 34
    1e76:	81 bd       	out	0x21, r24	; 33
    1e78:	f8 9a       	sbi	0x1f, 0	; 31
    1e7a:	99 27       	eor	r25, r25
    1e7c:	80 b5       	in	r24, 0x20	; 32
    1e7e:	08 95       	ret

00001e80 <eeprom_read_dword>:
    1e80:	a6 e1       	ldi	r26, 0x16	; 22
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	44 e0       	ldi	r20, 0x04	; 4
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	18 c0       	rjmp	.+48     	; 0x1eba <eeprom_read_blraw>

00001e8a <eeprom_write_byte>:
    1e8a:	26 2f       	mov	r18, r22

00001e8c <eeprom_write_r18>:
    1e8c:	f9 99       	sbic	0x1f, 1	; 31
    1e8e:	fe cf       	rjmp	.-4      	; 0x1e8c <eeprom_write_r18>
    1e90:	1f ba       	out	0x1f, r1	; 31
    1e92:	92 bd       	out	0x22, r25	; 34
    1e94:	81 bd       	out	0x21, r24	; 33
    1e96:	20 bd       	out	0x20, r18	; 32
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	fa 9a       	sbi	0x1f, 2	; 31
    1e9e:	f9 9a       	sbi	0x1f, 1	; 31
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	08 95       	ret

00001ea6 <eeprom_write_dword>:
    1ea6:	24 2f       	mov	r18, r20
    1ea8:	f1 df       	rcall	.-30     	; 0x1e8c <eeprom_write_r18>
    1eaa:	25 2f       	mov	r18, r21
    1eac:	ef df       	rcall	.-34     	; 0x1e8c <eeprom_write_r18>
    1eae:	00 c0       	rjmp	.+0      	; 0x1eb0 <eeprom_write_word>

00001eb0 <eeprom_write_word>:
    1eb0:	ec df       	rcall	.-40     	; 0x1e8a <eeprom_write_byte>
    1eb2:	27 2f       	mov	r18, r23
    1eb4:	eb cf       	rjmp	.-42     	; 0x1e8c <eeprom_write_r18>

00001eb6 <eeprom_read_block>:
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22

00001eba <eeprom_read_blraw>:
    1eba:	fc 01       	movw	r30, r24
    1ebc:	f9 99       	sbic	0x1f, 1	; 31
    1ebe:	fe cf       	rjmp	.-4      	; 0x1ebc <eeprom_read_blraw+0x2>
    1ec0:	06 c0       	rjmp	.+12     	; 0x1ece <eeprom_read_blraw+0x14>
    1ec2:	f2 bd       	out	0x22, r31	; 34
    1ec4:	e1 bd       	out	0x21, r30	; 33
    1ec6:	f8 9a       	sbi	0x1f, 0	; 31
    1ec8:	31 96       	adiw	r30, 0x01	; 1
    1eca:	00 b4       	in	r0, 0x20	; 32
    1ecc:	0d 92       	st	X+, r0
    1ece:	41 50       	subi	r20, 0x01	; 1
    1ed0:	50 40       	sbci	r21, 0x00	; 0
    1ed2:	b8 f7       	brcc	.-18     	; 0x1ec2 <eeprom_read_blraw+0x8>
    1ed4:	08 95       	ret

00001ed6 <_exit>:
    1ed6:	f8 94       	cli

00001ed8 <__stop_program>:
    1ed8:	ff cf       	rjmp	.-2      	; 0x1ed8 <__stop_program>
