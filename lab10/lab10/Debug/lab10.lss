
lab10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  00000938  000009cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000938  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800218  00800218  00000ae4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001300  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a68  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7a  00000000  00000000  00002984  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00003400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000740  00000000  00000000  000035f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aad  00000000  00000000  00003d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000047dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5d c0       	rjmp	.+186    	; 0xbc <__ctors_end>
   2:	00 00       	nop
   4:	78 c0       	rjmp	.+240    	; 0xf6 <__bad_interrupt>
   6:	00 00       	nop
   8:	76 c0       	rjmp	.+236    	; 0xf6 <__bad_interrupt>
   a:	00 00       	nop
   c:	74 c0       	rjmp	.+232    	; 0xf6 <__bad_interrupt>
   e:	00 00       	nop
  10:	72 c0       	rjmp	.+228    	; 0xf6 <__bad_interrupt>
  12:	00 00       	nop
  14:	70 c0       	rjmp	.+224    	; 0xf6 <__bad_interrupt>
  16:	00 00       	nop
  18:	6e c0       	rjmp	.+220    	; 0xf6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6c c0       	rjmp	.+216    	; 0xf6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6a c0       	rjmp	.+212    	; 0xf6 <__bad_interrupt>
  22:	00 00       	nop
  24:	68 c0       	rjmp	.+208    	; 0xf6 <__bad_interrupt>
  26:	00 00       	nop
  28:	66 c0       	rjmp	.+204    	; 0xf6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	64 c0       	rjmp	.+200    	; 0xf6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	62 c0       	rjmp	.+196    	; 0xf6 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c0       	rjmp	.+300    	; 0x162 <__vector_13>
  36:	00 00       	nop
  38:	5e c0       	rjmp	.+188    	; 0xf6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5c c0       	rjmp	.+184    	; 0xf6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5a c0       	rjmp	.+180    	; 0xf6 <__bad_interrupt>
  42:	00 00       	nop
  44:	58 c0       	rjmp	.+176    	; 0xf6 <__bad_interrupt>
  46:	00 00       	nop
  48:	56 c0       	rjmp	.+172    	; 0xf6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	54 c0       	rjmp	.+168    	; 0xf6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	52 c0       	rjmp	.+164    	; 0xf6 <__bad_interrupt>
  52:	00 00       	nop
  54:	50 c0       	rjmp	.+160    	; 0xf6 <__bad_interrupt>
  56:	00 00       	nop
  58:	4e c0       	rjmp	.+156    	; 0xf6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4c c0       	rjmp	.+152    	; 0xf6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4a c0       	rjmp	.+148    	; 0xf6 <__bad_interrupt>
  62:	00 00       	nop
  64:	48 c0       	rjmp	.+144    	; 0xf6 <__bad_interrupt>
  66:	00 00       	nop
  68:	46 c0       	rjmp	.+140    	; 0xf6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	44 c0       	rjmp	.+136    	; 0xf6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	42 c0       	rjmp	.+132    	; 0xf6 <__bad_interrupt>
  72:	00 00       	nop
  74:	40 c0       	rjmp	.+128    	; 0xf6 <__bad_interrupt>
  76:	00 00       	nop
  78:	3e c0       	rjmp	.+124    	; 0xf6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3c c0       	rjmp	.+120    	; 0xf6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3a c0       	rjmp	.+116    	; 0xf6 <__bad_interrupt>
  82:	00 00       	nop
  84:	38 c0       	rjmp	.+112    	; 0xf6 <__bad_interrupt>
  86:	00 00       	nop
  88:	36 c0       	rjmp	.+108    	; 0xf6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7c 02       	muls	r23, r28
  8e:	35 02       	muls	r19, r21
  90:	85 02       	muls	r24, r21
  92:	3b 02       	muls	r19, r27
  94:	32 02       	muls	r19, r18
  96:	43 02       	muls	r20, r19
  98:	6a 02       	muls	r22, r26
  9a:	4c 02       	muls	r20, r28
  9c:	51 02       	muls	r21, r17
  9e:	51 02       	muls	r21, r17
  a0:	57 03       	mulsu	r21, r23
  a2:	d8 02       	muls	r29, r24
  a4:	6c 03       	fmul	r22, r20
  a6:	de 02       	muls	r29, r30
  a8:	d5 02       	muls	r29, r21
  aa:	ec 02       	muls	r30, r28
  ac:	18 03       	fmul	r17, r16
  ae:	e7 02       	muls	r30, r23
  b0:	2c 03       	fmul	r18, r20
  b2:	f4 02       	muls	r31, r20
  b4:	45 03       	mulsu	r20, r21
  b6:	f9 02       	muls	r31, r25
  b8:	6f 03       	fmul	r22, r23
  ba:	ff 02       	muls	r31, r31

000000bc <__ctors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d0 e4       	ldi	r29, 0x40	; 64
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
  c8:	12 e0       	ldi	r17, 0x02	; 2
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	e8 e3       	ldi	r30, 0x38	; 56
  d0:	f9 e0       	ldi	r31, 0x09	; 9
  d2:	00 e0       	ldi	r16, 0x00	; 0
  d4:	0b bf       	out	0x3b, r16	; 59
  d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x14>
  d8:	07 90       	elpm	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	a8 31       	cpi	r26, 0x18	; 24
  de:	b1 07       	cpc	r27, r17
  e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0x10>

000000e2 <__do_clear_bss>:
  e2:	22 e0       	ldi	r18, 0x02	; 2
  e4:	a8 e1       	ldi	r26, 0x18	; 24
  e6:	b2 e0       	ldi	r27, 0x02	; 2
  e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
  ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
  ec:	a9 35       	cpi	r26, 0x59	; 89
  ee:	b2 07       	cpc	r27, r18
  f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
  f2:	59 d3       	rcall	.+1714   	; 0x7a6 <main>
  f4:	1f c4       	rjmp	.+2110   	; 0x934 <_exit>

000000f6 <__bad_interrupt>:
  f6:	84 cf       	rjmp	.-248    	; 0x0 <__vectors>

000000f8 <TimerSet>:
        if(c==0){return b;}
        a = b;
        b = c;
    }
    return 0;
}
  f8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  fc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 100:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 104:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 108:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <_avr_timer_cntcurr>
 10c:	70 93 50 02 	sts	0x0250, r23	; 0x800250 <_avr_timer_cntcurr+0x1>
 110:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <_avr_timer_cntcurr+0x2>
 114:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <_avr_timer_cntcurr+0x3>
 118:	08 95       	ret

0000011a <TimerOn>:
 11a:	8b e0       	ldi	r24, 0x0B	; 11
 11c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 120:	8d e7       	ldi	r24, 0x7D	; 125
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 128:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 132:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 136:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 13e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 142:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 146:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 14a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <_avr_timer_cntcurr>
 14e:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <_avr_timer_cntcurr+0x1>
 152:	a0 93 51 02 	sts	0x0251, r26	; 0x800251 <_avr_timer_cntcurr+0x2>
 156:	b0 93 52 02 	sts	0x0252, r27	; 0x800252 <_avr_timer_cntcurr+0x3>
 15a:	8f b7       	in	r24, 0x3f	; 63
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	8f bf       	out	0x3f, r24	; 63
 160:	08 95       	ret

00000162 <__vector_13>:
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <_avr_timer_cntcurr>
 178:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <_avr_timer_cntcurr+0x1>
 17c:	a0 91 51 02 	lds	r26, 0x0251	; 0x800251 <_avr_timer_cntcurr+0x2>
 180:	b0 91 52 02 	lds	r27, 0x0252	; 0x800252 <_avr_timer_cntcurr+0x3>
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	a1 09       	sbc	r26, r1
 188:	b1 09       	sbc	r27, r1
 18a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <_avr_timer_cntcurr>
 18e:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <_avr_timer_cntcurr+0x1>
 192:	a0 93 51 02 	sts	0x0251, r26	; 0x800251 <_avr_timer_cntcurr+0x2>
 196:	b0 93 52 02 	sts	0x0252, r27	; 0x800252 <_avr_timer_cntcurr+0x3>
 19a:	89 2b       	or	r24, r25
 19c:	8a 2b       	or	r24, r26
 19e:	8b 2b       	or	r24, r27
 1a0:	99 f4       	brne	.+38     	; 0x1c8 <__vector_13+0x66>
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <TimerFlag>
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1b0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1b4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1b8:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <_avr_timer_cntcurr>
 1bc:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <_avr_timer_cntcurr+0x1>
 1c0:	a0 93 51 02 	sts	0x0251, r26	; 0x800251 <_avr_timer_cntcurr+0x2>
 1c4:	b0 93 52 02 	sts	0x0252, r27	; 0x800252 <_avr_timer_cntcurr+0x3>
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <delay_ms>:
 1da:	18 16       	cp	r1, r24
 1dc:	19 06       	cpc	r1, r25
 1de:	5c f0       	brlt	.+22     	; 0x1f6 <delay_ms+0x1c>
 1e0:	08 95       	ret
 1e2:	00 00       	nop
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	31 09       	sbc	r19, r1
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <delay_ms+0x8>
 1ea:	4f 5f       	subi	r20, 0xFF	; 255
 1ec:	5f 4f       	sbci	r21, 0xFF	; 255
 1ee:	84 17       	cp	r24, r20
 1f0:	95 07       	cpc	r25, r21
 1f2:	19 f4       	brne	.+6      	; 0x1fa <delay_ms+0x20>
 1f4:	08 95       	ret
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	27 e0       	ldi	r18, 0x07	; 7
 1fc:	33 e0       	ldi	r19, 0x03	; 3
 1fe:	f1 cf       	rjmp	.-30     	; 0x1e2 <delay_ms+0x8>

00000200 <LCD_WriteCommand>:
 200:	10 98       	cbi	0x02, 0	; 2
 202:	8b b9       	out	0x0b, r24	; 11
 204:	11 9a       	sbi	0x02, 1	; 2
 206:	00 00       	nop
 208:	11 98       	cbi	0x02, 1	; 2
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	e5 cf       	rjmp	.-54     	; 0x1da <delay_ms>
 210:	08 95       	ret

00000212 <LCD_ClearScreen>:
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	f5 cf       	rjmp	.-22     	; 0x200 <LCD_WriteCommand>
 216:	08 95       	ret

00000218 <LCD_Cursor>:
 218:	81 31       	cpi	r24, 0x11	; 17
 21a:	18 f4       	brcc	.+6      	; 0x222 <LCD_Cursor+0xa>
 21c:	81 58       	subi	r24, 0x81	; 129
 21e:	f0 cf       	rjmp	.-32     	; 0x200 <LCD_WriteCommand>
 220:	08 95       	ret
 222:	81 55       	subi	r24, 0x51	; 81
 224:	ed cf       	rjmp	.-38     	; 0x200 <LCD_WriteCommand>
 226:	08 95       	ret

00000228 <LCD_init>:
 228:	84 e6       	ldi	r24, 0x64	; 100
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	d6 df       	rcall	.-84     	; 0x1da <delay_ms>
 22e:	88 e3       	ldi	r24, 0x38	; 56
 230:	e7 df       	rcall	.-50     	; 0x200 <LCD_WriteCommand>
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	e5 df       	rcall	.-54     	; 0x200 <LCD_WriteCommand>
 236:	8f e0       	ldi	r24, 0x0F	; 15
 238:	e3 df       	rcall	.-58     	; 0x200 <LCD_WriteCommand>
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	e1 df       	rcall	.-62     	; 0x200 <LCD_WriteCommand>
 23e:	8a e0       	ldi	r24, 0x0A	; 10
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	cb cf       	rjmp	.-106    	; 0x1da <delay_ms>
 244:	08 95       	ret

00000246 <LCD_WriteData>:
 246:	10 9a       	sbi	0x02, 0	; 2
 248:	8b b9       	out	0x0b, r24	; 11
 24a:	11 9a       	sbi	0x02, 1	; 2
 24c:	00 00       	nop
 24e:	11 98       	cbi	0x02, 1	; 2
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	c2 cf       	rjmp	.-124    	; 0x1da <delay_ms>
 256:	08 95       	ret

00000258 <LCD_DisplayString>:
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	18 2f       	mov	r17, r24
 262:	eb 01       	movw	r28, r22
 264:	d6 df       	rcall	.-84     	; 0x212 <LCD_ClearScreen>
 266:	88 81       	ld	r24, Y
 268:	88 23       	and	r24, r24
 26a:	51 f0       	breq	.+20     	; 0x280 <LCD_DisplayString+0x28>
 26c:	01 e0       	ldi	r16, 0x01	; 1
 26e:	01 0f       	add	r16, r17
 270:	81 2f       	mov	r24, r17
 272:	d2 df       	rcall	.-92     	; 0x218 <LCD_Cursor>
 274:	89 91       	ld	r24, Y+
 276:	e7 df       	rcall	.-50     	; 0x246 <LCD_WriteData>
 278:	10 2f       	mov	r17, r16
 27a:	88 81       	ld	r24, Y
 27c:	81 11       	cpse	r24, r1
 27e:	f6 cf       	rjmp	.-20     	; 0x26c <LCD_DisplayString+0x14>
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <Menu>:
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	91 05       	cpc	r25, r1
 28e:	b1 f0       	breq	.+44     	; 0x2bc <Menu+0x32>
 290:	2c f4       	brge	.+10     	; 0x29c <Menu+0x12>
 292:	00 97       	sbiw	r24, 0x00	; 0
 294:	49 f0       	breq	.+18     	; 0x2a8 <Menu+0x1e>
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	59 f0       	breq	.+22     	; 0x2b0 <Menu+0x26>
 29a:	7c c0       	rjmp	.+248    	; 0x394 <Menu+0x10a>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	91 05       	cpc	r25, r1
 2a0:	99 f0       	breq	.+38     	; 0x2c8 <Menu+0x3e>
 2a2:	04 97       	sbiw	r24, 0x04	; 4
 2a4:	b9 f0       	breq	.+46     	; 0x2d4 <Menu+0x4a>
 2a6:	76 c0       	rjmp	.+236    	; 0x394 <Menu+0x10a>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
 2ae:	7e c0       	rjmp	.+252    	; 0x3ac <Menu+0x122>
 2b0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos>
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	09 f0       	breq	.+2      	; 0x2ba <Menu+0x30>
 2b8:	79 c0       	rjmp	.+242    	; 0x3ac <Menu+0x122>
 2ba:	11 c0       	rjmp	.+34     	; 0x2de <Menu+0x54>
 2bc:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos>
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <Menu+0x3c>
 2c4:	73 c0       	rjmp	.+230    	; 0x3ac <Menu+0x122>
 2c6:	2a c0       	rjmp	.+84     	; 0x31c <Menu+0x92>
 2c8:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <Menu+0x48>
 2d0:	6d c0       	rjmp	.+218    	; 0x3ac <Menu+0x122>
 2d2:	42 c0       	rjmp	.+132    	; 0x358 <Menu+0xce>
 2d4:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	09 f0       	breq	.+2      	; 0x2de <Menu+0x54>
 2dc:	67 c0       	rjmp	.+206    	; 0x3ac <Menu+0x122>
 2de:	6e e0       	ldi	r22, 0x0E	; 14
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	b9 df       	rcall	.-142    	; 0x258 <LCD_DisplayString>
 2e6:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <key>
 2ea:	81 34       	cpi	r24, 0x41	; 65
 2ec:	31 f4       	brne	.+12     	; 0x2fa <Menu+0x70>
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	08 95       	ret
 2fa:	82 34       	cpi	r24, 0x42	; 66
 2fc:	31 f4       	brne	.+12     	; 0x30a <Menu+0x80>
 2fe:	84 e0       	ldi	r24, 0x04	; 4
 300:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	08 95       	ret
 30a:	83 34       	cpi	r24, 0x43	; 67
 30c:	09 f0       	breq	.+2      	; 0x310 <Menu+0x86>
 30e:	45 c0       	rjmp	.+138    	; 0x39a <Menu+0x110>
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	08 95       	ret
 31c:	6e e1       	ldi	r22, 0x1E	; 30
 31e:	71 e0       	ldi	r23, 0x01	; 1
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	9a df       	rcall	.-204    	; 0x258 <LCD_DisplayString>
 324:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <key>
 328:	81 34       	cpi	r24, 0x41	; 65
 32a:	31 f4       	brne	.+12     	; 0x338 <Menu+0xae>
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	08 95       	ret
 338:	82 34       	cpi	r24, 0x42	; 66
 33a:	31 f4       	brne	.+12     	; 0x348 <Menu+0xbe>
 33c:	84 e0       	ldi	r24, 0x04	; 4
 33e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	08 95       	ret
 348:	83 34       	cpi	r24, 0x43	; 67
 34a:	51 f5       	brne	.+84     	; 0x3a0 <Menu+0x116>
 34c:	83 e0       	ldi	r24, 0x03	; 3
 34e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	08 95       	ret
 358:	6a e2       	ldi	r22, 0x2A	; 42
 35a:	71 e0       	ldi	r23, 0x01	; 1
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	7c df       	rcall	.-264    	; 0x258 <LCD_DisplayString>
 360:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <key>
 364:	81 34       	cpi	r24, 0x41	; 65
 366:	31 f4       	brne	.+12     	; 0x374 <Menu+0xea>
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
 36e:	84 e0       	ldi	r24, 0x04	; 4
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	08 95       	ret
 374:	82 34       	cpi	r24, 0x42	; 66
 376:	31 f4       	brne	.+12     	; 0x384 <Menu+0xfa>
 378:	84 e0       	ldi	r24, 0x04	; 4
 37a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
 37e:	84 e0       	ldi	r24, 0x04	; 4
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	08 95       	ret
 384:	83 34       	cpi	r24, 0x43	; 67
 386:	79 f4       	brne	.+30     	; 0x3a6 <Menu+0x11c>
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
 38e:	84 e0       	ldi	r24, 0x04	; 4
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	08 95       	ret
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	08 95       	ret
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	08 95       	ret
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	08 95       	ret
 3a6:	84 e0       	ldi	r24, 0x04	; 4
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	08 95       	ret
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	08 95       	ret

000003b2 <GetKeypadKey>:
//--------End find GCD function ----------------------------------------------

// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
 3b2:	8f ee       	ldi	r24, 0xEF	; 239
 3b4:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
 3b6:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('1'); }
 3b8:	30 9b       	sbis	0x06, 0	; 6
 3ba:	29 c0       	rjmp	.+82     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
    if (GetBit(PINC,1)==0) { return('4'); }
 3bc:	31 9b       	sbis	0x06, 1	; 6
 3be:	29 c0       	rjmp	.+82     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
    if (GetBit(PINC,2)==0) { return('7'); }
 3c0:	32 9b       	sbis	0x06, 2	; 6
 3c2:	29 c0       	rjmp	.+82     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    if (GetBit(PINC,3)==0) { return('*'); }
 3c4:	33 9b       	sbis	0x06, 3	; 6
 3c6:	29 c0       	rjmp	.+82     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
 3c8:	8f ed       	ldi	r24, 0xDF	; 223
 3ca:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
 3cc:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('2'); }
 3ce:	30 9b       	sbis	0x06, 0	; 6
 3d0:	26 c0       	rjmp	.+76     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
    if (GetBit(PINC,1)==0) { return('5'); }
 3d2:	31 9b       	sbis	0x06, 1	; 6
 3d4:	26 c0       	rjmp	.+76     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
    if (GetBit(PINC,2)==0) { return('8'); }
 3d6:	32 9b       	sbis	0x06, 2	; 6
 3d8:	26 c0       	rjmp	.+76     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
    if (GetBit(PINC,3)==0) { return('0'); }
 3da:	33 9b       	sbis	0x06, 3	; 6
 3dc:	26 c0       	rjmp	.+76     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
    // ... *****FINISH*****
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
 3de:	8f eb       	ldi	r24, 0xBF	; 191
 3e0:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
 3e2:	00 00       	nop
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
 3e4:	30 9b       	sbis	0x06, 0	; 6
 3e6:	23 c0       	rjmp	.+70     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
    if (GetBit(PINC,1)==0) { return('6'); }
 3e8:	31 9b       	sbis	0x06, 1	; 6
 3ea:	23 c0       	rjmp	.+70     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
    if (GetBit(PINC,2)==0) { return('9'); }
 3ec:	32 9b       	sbis	0x06, 2	; 6
 3ee:	23 c0       	rjmp	.+70     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
    if (GetBit(PINC,3)==0) { return('#'); }
 3f0:	33 9b       	sbis	0x06, 3	; 6
 3f2:	23 c0       	rjmp	.+70     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
 3f4:	8f e7       	ldi	r24, 0x7F	; 127
 3f6:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
 3f8:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('A'); }
 3fa:	30 9b       	sbis	0x06, 0	; 6
 3fc:	20 c0       	rjmp	.+64     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
    if (GetBit(PINC,1)==0) { return('B'); }
 3fe:	31 9b       	sbis	0x06, 1	; 6
 400:	20 c0       	rjmp	.+64     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
    if (GetBit(PINC,2)==0) { return('C'); }
 402:	32 9b       	sbis	0x06, 2	; 6
 404:	20 c0       	rjmp	.+64     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
    if (GetBit(PINC,3)==0) { return('D'); }
 406:	33 9b       	sbis	0x06, 3	; 6
 408:	20 c0       	rjmp	.+64     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
    
    return('\0'); // default value
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	08 95       	ret
// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('1'); }
 40e:	81 e3       	ldi	r24, 0x31	; 49
 410:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('4'); }
 412:	84 e3       	ldi	r24, 0x34	; 52
 414:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('7'); }
 416:	87 e3       	ldi	r24, 0x37	; 55
 418:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('*'); }
 41a:	8a e2       	ldi	r24, 0x2A	; 42
 41c:	08 95       	ret
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('2'); }
 41e:	82 e3       	ldi	r24, 0x32	; 50
 420:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('5'); }
 422:	85 e3       	ldi	r24, 0x35	; 53
 424:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('8'); }
 426:	88 e3       	ldi	r24, 0x38	; 56
 428:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('0'); }
 42a:	80 e3       	ldi	r24, 0x30	; 48
 42c:	08 95       	ret
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
 42e:	83 e3       	ldi	r24, 0x33	; 51
 430:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('6'); }
 432:	86 e3       	ldi	r24, 0x36	; 54
 434:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('9'); }
 436:	89 e3       	ldi	r24, 0x39	; 57
 438:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('#'); }
 43a:	83 e2       	ldi	r24, 0x23	; 35
 43c:	08 95       	ret
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('A'); }
 43e:	81 e4       	ldi	r24, 0x41	; 65
 440:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('B'); }
 442:	82 e4       	ldi	r24, 0x42	; 66
 444:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('C'); }
 446:	83 e4       	ldi	r24, 0x43	; 67
 448:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('D'); }
 44a:	84 e4       	ldi	r24, 0x44	; 68
    
    return('\0'); // default value
    
}
 44c:	08 95       	ret

0000044e <trans>:
	}
	return state;
}

int trans(int state)
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	ec 01       	movw	r28, r24
	switch (state)
 454:	8a 30       	cpi	r24, 0x0A	; 10
 456:	91 05       	cpc	r25, r1
 458:	08 f0       	brcs	.+2      	; 0x45c <trans+0xe>
 45a:	5a c0       	rjmp	.+180    	; 0x510 <trans+0xc2>
 45c:	fc 01       	movw	r30, r24
 45e:	ea 5b       	subi	r30, 0xBA	; 186
 460:	ff 4f       	sbci	r31, 0xFF	; 255
 462:	5f c2       	rjmp	.+1214   	; 0x922 <__tablejump2__>
			}
			break;
		}
		case picked:
		{
			state = picked1;
 464:	c5 e0       	ldi	r28, 0x05	; 5
 466:	d0 e0       	ldi	r29, 0x00	; 0
 468:	5f c0       	rjmp	.+190    	; 0x528 <trans+0xda>
			state = pauseT;
			break;
		}
		case pauseT:
		{
			if(pos == 2)
 46a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos>
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	09 f0       	breq	.+2      	; 0x474 <trans+0x26>
 472:	5a c0       	rjmp	.+180    	; 0x528 <trans+0xda>
			state = options1;
			break;
		}
		case options1:
		{
			key = GetKeypadKey();
 474:	53 c0       	rjmp	.+166    	; 0x51c <trans+0xce>
 476:	9d df       	rcall	.-198    	; 0x3b2 <GetKeypadKey>
 478:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <key>
			if(key == 'A')
 47c:	81 54       	subi	r24, 0x41	; 65
 47e:	83 30       	cpi	r24, 0x03	; 3
 480:	08 f0       	brcs	.+2      	; 0x484 <trans+0x36>
 482:	52 c0       	rjmp	.+164    	; 0x528 <trans+0xda>
			state = picked1;
			break;
		}
		case picked1:
		{
			key = GetKeypadKey();
 484:	19 c0       	rjmp	.+50     	; 0x4b8 <trans+0x6a>
 486:	95 df       	rcall	.-214    	; 0x3b2 <GetKeypadKey>
 488:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <key>
			if(key == 'A')
 48c:	81 34       	cpi	r24, 0x41	; 65
 48e:	d9 f0       	breq	.+54     	; 0x4c6 <trans+0x78>
			{
				state = payment;
			}
			else if(key == 'B')
 490:	82 34       	cpi	r24, 0x42	; 66
 492:	09 f0       	breq	.+2      	; 0x496 <trans+0x48>
 494:	49 c0       	rjmp	.+146    	; 0x528 <trans+0xda>
 496:	42 c0       	rjmp	.+132    	; 0x51c <trans+0xce>
			state = payment1;
			break;
		}
		case payment1:
		{
			if(key == '#')
 498:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <key>
 49c:	83 32       	cpi	r24, 0x23	; 35
 49e:	d1 f4       	brne	.+52     	; 0x4d4 <trans+0x86>
		{
			state = change1;
		}
		case change1:
		{
			key = GetKeypadKey();
 4a0:	24 c0       	rjmp	.+72     	; 0x4ea <trans+0x9c>
 4a2:	87 df       	rcall	.-242    	; 0x3b2 <GetKeypadKey>
 4a4:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <key>
			if(key == '#')
 4a8:	83 32       	cpi	r24, 0x23	; 35
 4aa:	a9 f5       	brne	.+106    	; 0x516 <trans+0xc8>
			{
				pos = 1;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
				state = pauseT;
 4b2:	c1 e0       	ldi	r28, 0x01	; 1
 4b4:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
		case picked:
		{
			LCD_DisplayString(1, "Done  |  AddItem A    |    B");
 4b6:	38 c0       	rjmp	.+112    	; 0x528 <trans+0xda>
 4b8:	65 e3       	ldi	r22, 0x35	; 53
 4ba:	71 e0       	ldi	r23, 0x01	; 1
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	cc de       	rcall	.-616    	; 0x258 <LCD_DisplayString>
			break;
 4c0:	c4 e0       	ldi	r28, 0x04	; 4
 4c2:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
		case payment:
		{
			LCD_DisplayString(1, "Enter Payment:   ");
 4c4:	31 c0       	rjmp	.+98     	; 0x528 <trans+0xda>
 4c6:	62 e5       	ldi	r22, 0x52	; 82
 4c8:	71 e0       	ldi	r23, 0x01	; 1
 4ca:	81 e0       	ldi	r24, 0x01	; 1
			break;
 4cc:	c5 de       	rcall	.-630    	; 0x258 <LCD_DisplayString>
 4ce:	c6 e0       	ldi	r28, 0x06	; 6
 4d0:	d0 e0       	ldi	r29, 0x00	; 0
		}
		case payment1:
		{
			key = GetKeypadKey();
 4d2:	2a c0       	rjmp	.+84     	; 0x528 <trans+0xda>
 4d4:	6e df       	rcall	.-292    	; 0x3b2 <GetKeypadKey>
 4d6:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <key>
			if(key != '\0' && key != '#')
 4da:	88 23       	and	r24, r24
 4dc:	81 f0       	breq	.+32     	; 0x4fe <trans+0xb0>
 4de:	83 32       	cpi	r24, 0x23	; 35
			{
				LCD_WriteData(key);
 4e0:	89 f0       	breq	.+34     	; 0x504 <trans+0xb6>
 4e2:	b1 de       	rcall	.-670    	; 0x246 <LCD_WriteData>
 4e4:	c7 e0       	ldi	r28, 0x07	; 7
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		case change:
		{
			LCD_DisplayString(1, "total-pay=change");
 4e8:	1f c0       	rjmp	.+62     	; 0x528 <trans+0xda>
 4ea:	64 e6       	ldi	r22, 0x64	; 100
 4ec:	71 e0       	ldi	r23, 0x01	; 1
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	b3 de       	rcall	.-666    	; 0x258 <LCD_DisplayString>
			break;
 4f2:	c8 e0       	ldi	r28, 0x08	; 8
 4f4:	d0 e0       	ldi	r29, 0x00	; 0
 4f6:	18 c0       	rjmp	.+48     	; 0x528 <trans+0xda>
{
	switch (state)
	{
		case startT:
		{
			state = pauseT;
 4f8:	c1 e0       	ldi	r28, 0x01	; 1
 4fa:	d0 e0       	ldi	r29, 0x00	; 0
 4fc:	15 c0       	rjmp	.+42     	; 0x528 <trans+0xda>
 4fe:	c7 e0       	ldi	r28, 0x07	; 7
 500:	d0 e0       	ldi	r29, 0x00	; 0
 502:	12 c0       	rjmp	.+36     	; 0x528 <trans+0xda>
 504:	c7 e0       	ldi	r28, 0x07	; 7
 506:	d0 e0       	ldi	r29, 0x00	; 0
 508:	0f c0       	rjmp	.+30     	; 0x528 <trans+0xda>
			}
			break;
		}
		case options:
		{
			state = options1;
 50a:	c3 e0       	ldi	r28, 0x03	; 3
 50c:	d0 e0       	ldi	r29, 0x00	; 0
 50e:	0c c0       	rjmp	.+24     	; 0x528 <trans+0xda>
			}
			break;
		}
		default:
		{
			state = startT;
 510:	c0 e0       	ldi	r28, 0x00	; 0
 512:	d0 e0       	ldi	r29, 0x00	; 0
 514:	09 c0       	rjmp	.+18     	; 0x528 <trans+0xda>
 516:	c9 e0       	ldi	r28, 0x09	; 9
 518:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
		case options:
		{
			LCD_DisplayString(1, "A     B    C    $     $    $");
 51a:	06 c0       	rjmp	.+12     	; 0x528 <trans+0xda>
 51c:	65 e7       	ldi	r22, 0x75	; 117
 51e:	71 e0       	ldi	r23, 0x01	; 1
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	9a de       	rcall	.-716    	; 0x258 <LCD_DisplayString>
			break;
 524:	c2 e0       	ldi	r28, 0x02	; 2
 526:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
	}
	return state;
}
 528:	ce 01       	movw	r24, r28
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <prof>:

int prof(int state)
{
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	ec 01       	movw	r28, r24
	switch(state)
 536:	81 30       	cpi	r24, 0x01	; 1
 538:	91 05       	cpc	r25, r1
 53a:	61 f0       	breq	.+24     	; 0x554 <prof+0x24>
 53c:	1c f4       	brge	.+6      	; 0x544 <prof+0x14>
 53e:	89 2b       	or	r24, r25
 540:	01 f1       	breq	.+64     	; 0x582 <prof+0x52>
 542:	05 c0       	rjmp	.+10     	; 0x54e <prof+0x1e>
 544:	82 30       	cpi	r24, 0x02	; 2
 546:	91 05       	cpc	r25, r1
 548:	f9 f0       	breq	.+62     	; 0x588 <prof+0x58>
 54a:	03 97       	sbiw	r24, 0x03	; 3
 54c:	41 f0       	breq	.+16     	; 0x55e <prof+0x2e>
			}
			break;
		}
		default:
		{
			state = startP;
 54e:	c0 e0       	ldi	r28, 0x00	; 0
 550:	d0 e0       	ldi	r29, 0x00	; 0
 552:	1c c0       	rjmp	.+56     	; 0x58c <prof+0x5c>
			state = pauseP;
			break;
		}
		case pauseP:
		{
			if(pos == 3)
 554:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos>
 558:	83 30       	cpi	r24, 0x03	; 3
 55a:	c1 f4       	brne	.+48     	; 0x58c <prof+0x5c>
 55c:	0b c0       	rjmp	.+22     	; 0x574 <prof+0x44>
			state = display1;
			break;
		}
		case display1:
		{
			key = GetKeypadKey();
 55e:	29 df       	rcall	.-430    	; 0x3b2 <GetKeypadKey>
 560:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <key>
			if(key == '#')
 564:	83 32       	cpi	r24, 0x23	; 35
 566:	91 f4       	brne	.+36     	; 0x58c <prof+0x5c>
			{
				state = pauseP;
				pos = 1;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
		case display1:
		{
			key = GetKeypadKey();
			if(key == '#')
			{
				state = pauseP;
 56e:	c1 e0       	ldi	r28, 0x01	; 1
 570:	d0 e0       	ldi	r29, 0x00	; 0
 572:	0c c0       	rjmp	.+24     	; 0x58c <prof+0x5c>
		{
			break;
		}
		case display:
		{
			LCD_DisplayString(1, "Total Profits: ");
 574:	62 e9       	ldi	r22, 0x92	; 146
 576:	71 e0       	ldi	r23, 0x01	; 1
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	6e de       	rcall	.-804    	; 0x258 <LCD_DisplayString>
			break;
 57c:	c2 e0       	ldi	r28, 0x02	; 2
 57e:	d0 e0       	ldi	r29, 0x00	; 0
 580:	05 c0       	rjmp	.+10     	; 0x58c <prof+0x5c>
{
	switch(state)
	{
		case startP:
		{
			state = pauseP;
 582:	c1 e0       	ldi	r28, 0x01	; 1
 584:	d0 e0       	ldi	r29, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <prof+0x5c>
			}
			break;
		}
		case display:
		{
			state = display1;
 588:	c3 e0       	ldi	r28, 0x03	; 3
 58a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
	}
	return state;
}
 58c:	ce 01       	movw	r24, r28
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <setting>:

int setting(int state)
{
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	ec 01       	movw	r28, r24
	switch(state)
 59a:	8e 30       	cpi	r24, 0x0E	; 14
 59c:	91 05       	cpc	r25, r1
 59e:	08 f0       	brcs	.+2      	; 0x5a2 <setting+0xe>
 5a0:	3d c0       	rjmp	.+122    	; 0x61c <setting+0x88>
 5a2:	fc 01       	movw	r30, r24
 5a4:	e0 5b       	subi	r30, 0xB0	; 176
 5a6:	ff 4f       	sbci	r31, 0xFF	; 255
 5a8:	bc c1       	rjmp	.+888    	; 0x922 <__tablejump2__>
			}
			break;
		}
		case priceSet:
		{
			state = priceSet1;
 5aa:	c5 e0       	ldi	r28, 0x05	; 5
 5ac:	d0 e0       	ldi	r29, 0x00	; 0
 5ae:	a0 c0       	rjmp	.+320    	; 0x6f0 <setting+0x15c>
			state = pauseP;
			break;
		}
		case pauseS:
		{
			if(pos == 4)
 5b0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos>
 5b4:	84 30       	cpi	r24, 0x04	; 4
 5b6:	09 f0       	breq	.+2      	; 0x5ba <setting+0x26>
 5b8:	9b c0       	rjmp	.+310    	; 0x6f0 <setting+0x15c>
			state = opt1;
			break;
		}
		case opt1:
		{
			key = GetKeypadKey();
 5ba:	94 c0       	rjmp	.+296    	; 0x6e4 <setting+0x150>
 5bc:	fa de       	rcall	.-524    	; 0x3b2 <GetKeypadKey>
 5be:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <key>
			if (key == 'A')
 5c2:	81 34       	cpi	r24, 0x41	; 65
 5c4:	71 f1       	breq	.+92     	; 0x622 <setting+0x8e>
			{
				state = passSet;
			}
			else if(key == 'B')
 5c6:	82 34       	cpi	r24, 0x42	; 66
 5c8:	09 f0       	breq	.+2      	; 0x5cc <setting+0x38>
 5ca:	92 c0       	rjmp	.+292    	; 0x6f0 <setting+0x15c>
 5cc:	50 c0       	rjmp	.+160    	; 0x66e <setting+0xda>
			state = passSet1;
			break;
		}
		case passSet1:
		{
			if (key == '#')
 5ce:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <key>
 5d2:	83 32       	cpi	r24, 0x23	; 35
 5d4:	69 f5       	brne	.+90     	; 0x630 <setting+0x9c>
			state = priceSet1;
			break;
		}
		case priceSet1:
		{
			key = GetKeypadKey();
 5d6:	39 c0       	rjmp	.+114    	; 0x64a <setting+0xb6>
 5d8:	ec de       	rcall	.-552    	; 0x3b2 <GetKeypadKey>
 5da:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <key>
			if(key == 'A')
 5de:	81 54       	subi	r24, 0x41	; 65
 5e0:	83 30       	cpi	r24, 0x03	; 3
 5e2:	08 f0       	brcs	.+2      	; 0x5e6 <setting+0x52>
 5e4:	85 c0       	rjmp	.+266    	; 0x6f0 <setting+0x15c>
 5e6:	4a c0       	rjmp	.+148    	; 0x67c <setting+0xe8>
			state = enterPas1;
			break;
		}
		case enterPas1:
		{
			if (key == '#')
 5e8:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <key>
 5ec:	83 32       	cpi	r24, 0x23	; 35
 5ee:	a1 f5       	brne	.+104    	; 0x658 <setting+0xc4>
 5f0:	57 c0       	rjmp	.+174    	; 0x6a0 <setting+0x10c>
			state = enterPrice1;
			break;
		}
		case enterPrice1:
		{
			if(key == '#')
 5f2:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <key>
 5f6:	83 32       	cpi	r24, 0x23	; 35
 5f8:	09 f0       	breq	.+2      	; 0x5fc <setting+0x68>
 5fa:	47 c0       	rjmp	.+142    	; 0x68a <setting+0xf6>
			state = done1;
			break;
		}
		case done1:
		{
			key = GetKeypadKey();
 5fc:	51 c0       	rjmp	.+162    	; 0x6a0 <setting+0x10c>
 5fe:	d9 de       	rcall	.-590    	; 0x3b2 <GetKeypadKey>
 600:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <key>
			if(key == 'A')
 604:	81 34       	cpi	r24, 0x41	; 65
 606:	09 f4       	brne	.+2      	; 0x60a <setting+0x76>
 608:	6d c0       	rjmp	.+218    	; 0x6e4 <setting+0x150>
			{
				state = opt;
			}
			else if(key == '#')
 60a:	83 32       	cpi	r24, 0x23	; 35
 60c:	09 f0       	breq	.+2      	; 0x610 <setting+0x7c>
 60e:	70 c0       	rjmp	.+224    	; 0x6f0 <setting+0x15c>
			{
				pos = 1;
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos>
				state = pauseS;
 616:	c1 e0       	ldi	r28, 0x01	; 1
 618:	d0 e0       	ldi	r29, 0x00	; 0
 61a:	6a c0       	rjmp	.+212    	; 0x6f0 <setting+0x15c>
			}
			break;
		}
		default:
		{
			state = startS;
 61c:	c0 e0       	ldi	r28, 0x00	; 0
 61e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
		case passSet:
		{
			LCD_DisplayString(1, "enter old code:  ");
 620:	67 c0       	rjmp	.+206    	; 0x6f0 <setting+0x15c>
 622:	62 ea       	ldi	r22, 0xA2	; 162
 624:	71 e0       	ldi	r23, 0x01	; 1
 626:	81 e0       	ldi	r24, 0x01	; 1
			break;
 628:	17 de       	rcall	.-978    	; 0x258 <LCD_DisplayString>
 62a:	c6 e0       	ldi	r28, 0x06	; 6
 62c:	d0 e0       	ldi	r29, 0x00	; 0
		}
		case passSet1:
		{
			key = GetKeypadKey();
 62e:	60 c0       	rjmp	.+192    	; 0x6f0 <setting+0x15c>
 630:	c0 de       	rcall	.-640    	; 0x3b2 <GetKeypadKey>
 632:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <key>
			if(key != '\0' && key != '#')
 636:	88 23       	and	r24, r24
 638:	09 f4       	brne	.+2      	; 0x63c <setting+0xa8>
 63a:	3c c0       	rjmp	.+120    	; 0x6b4 <setting+0x120>
 63c:	83 32       	cpi	r24, 0x23	; 35
 63e:	09 f4       	brne	.+2      	; 0x642 <setting+0xae>
			{
				LCD_WriteData(key);
 640:	3c c0       	rjmp	.+120    	; 0x6ba <setting+0x126>
 642:	01 de       	rcall	.-1022   	; 0x246 <LCD_WriteData>
 644:	c7 e0       	ldi	r28, 0x07	; 7
 646:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		case enterPas:
		{
			LCD_DisplayString(1,"set new code:    ");
 648:	53 c0       	rjmp	.+166    	; 0x6f0 <setting+0x15c>
 64a:	64 eb       	ldi	r22, 0xB4	; 180
 64c:	71 e0       	ldi	r23, 0x01	; 1
 64e:	81 e0       	ldi	r24, 0x01	; 1
			break;
 650:	03 de       	rcall	.-1018   	; 0x258 <LCD_DisplayString>
 652:	c8 e0       	ldi	r28, 0x08	; 8
		}
		case enterPas1:
		{
			key = GetKeypadKey();
 654:	d0 e0       	ldi	r29, 0x00	; 0
 656:	4c c0       	rjmp	.+152    	; 0x6f0 <setting+0x15c>
 658:	ac de       	rcall	.-680    	; 0x3b2 <GetKeypadKey>
 65a:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <key>
			if(key != '\0' && key != '#')
 65e:	88 23       	and	r24, r24
 660:	79 f1       	breq	.+94     	; 0x6c0 <setting+0x12c>
			{
				LCD_WriteData(key);
 662:	83 32       	cpi	r24, 0x23	; 35
 664:	81 f1       	breq	.+96     	; 0x6c6 <setting+0x132>
 666:	ef dd       	rcall	.-1058   	; 0x246 <LCD_WriteData>
 668:	c9 e0       	ldi	r28, 0x09	; 9
 66a:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		}
		case priceSet:
		{
			LCD_DisplayString(1, "A     B    C    $     $    $");
 66c:	41 c0       	rjmp	.+130    	; 0x6f0 <setting+0x15c>
 66e:	65 e7       	ldi	r22, 0x75	; 117
 670:	71 e0       	ldi	r23, 0x01	; 1
 672:	81 e0       	ldi	r24, 0x01	; 1
			break;
 674:	f1 dd       	rcall	.-1054   	; 0x258 <LCD_DisplayString>
 676:	c4 e0       	ldi	r28, 0x04	; 4
 678:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
		case enterPrice:
		{
			LCD_DisplayString(1, "Enter Price:     ");
 67a:	3a c0       	rjmp	.+116    	; 0x6f0 <setting+0x15c>
 67c:	66 ec       	ldi	r22, 0xC6	; 198
 67e:	71 e0       	ldi	r23, 0x01	; 1
 680:	81 e0       	ldi	r24, 0x01	; 1
			break;
 682:	ea dd       	rcall	.-1068   	; 0x258 <LCD_DisplayString>
 684:	ca e0       	ldi	r28, 0x0A	; 10
 686:	d0 e0       	ldi	r29, 0x00	; 0
		}
		case enterPrice1:
		{
			key = GetKeypadKey();
 688:	33 c0       	rjmp	.+102    	; 0x6f0 <setting+0x15c>
 68a:	93 de       	rcall	.-730    	; 0x3b2 <GetKeypadKey>
 68c:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <key>
			if(key != '\0' && key != '#')
 690:	88 23       	and	r24, r24
 692:	e1 f0       	breq	.+56     	; 0x6cc <setting+0x138>
 694:	83 32       	cpi	r24, 0x23	; 35
			{
				LCD_WriteData(key);
 696:	e9 f0       	breq	.+58     	; 0x6d2 <setting+0x13e>
 698:	d6 dd       	rcall	.-1108   	; 0x246 <LCD_WriteData>
 69a:	cb e0       	ldi	r28, 0x0B	; 11
 69c:	d0 e0       	ldi	r29, 0x00	; 0
 69e:	28 c0       	rjmp	.+80     	; 0x6f0 <setting+0x15c>
			}
			break;
		}
		case done:
		{
			LCD_DisplayString(1, "A     |   #    settings | menu");
 6a0:	68 ed       	ldi	r22, 0xD8	; 216
 6a2:	71 e0       	ldi	r23, 0x01	; 1
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	d8 dd       	rcall	.-1104   	; 0x258 <LCD_DisplayString>
 6a8:	cc e0       	ldi	r28, 0x0C	; 12
			break;
 6aa:	d0 e0       	ldi	r29, 0x00	; 0
 6ac:	21 c0       	rjmp	.+66     	; 0x6f0 <setting+0x15c>
 6ae:	c1 e0       	ldi	r28, 0x01	; 1
{
	switch(state)
	{
		case startS:
		{
			state = pauseP;
 6b0:	d0 e0       	ldi	r29, 0x00	; 0
 6b2:	1e c0       	rjmp	.+60     	; 0x6f0 <setting+0x15c>
 6b4:	c7 e0       	ldi	r28, 0x07	; 7
 6b6:	d0 e0       	ldi	r29, 0x00	; 0
 6b8:	1b c0       	rjmp	.+54     	; 0x6f0 <setting+0x15c>
 6ba:	c7 e0       	ldi	r28, 0x07	; 7
 6bc:	d0 e0       	ldi	r29, 0x00	; 0
 6be:	18 c0       	rjmp	.+48     	; 0x6f0 <setting+0x15c>
 6c0:	c9 e0       	ldi	r28, 0x09	; 9
 6c2:	d0 e0       	ldi	r29, 0x00	; 0
 6c4:	15 c0       	rjmp	.+42     	; 0x6f0 <setting+0x15c>
 6c6:	c9 e0       	ldi	r28, 0x09	; 9
 6c8:	d0 e0       	ldi	r29, 0x00	; 0
 6ca:	12 c0       	rjmp	.+36     	; 0x6f0 <setting+0x15c>
 6cc:	cb e0       	ldi	r28, 0x0B	; 11
 6ce:	d0 e0       	ldi	r29, 0x00	; 0
 6d0:	0f c0       	rjmp	.+30     	; 0x6f0 <setting+0x15c>
 6d2:	cb e0       	ldi	r28, 0x0B	; 11
 6d4:	d0 e0       	ldi	r29, 0x00	; 0
 6d6:	0c c0       	rjmp	.+24     	; 0x6f0 <setting+0x15c>
			}
			break;
		}
		case opt:
		{
			state = opt1;
 6d8:	c3 e0       	ldi	r28, 0x03	; 3
 6da:	d0 e0       	ldi	r29, 0x00	; 0
 6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <setting+0x15c>
			}
			break;
		}
		case done:
		{
			state = done1;
 6de:	cd e0       	ldi	r28, 0x0D	; 13
 6e0:	d0 e0       	ldi	r29, 0x00	; 0
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <setting+0x15c>
		{
			break;
		}
		case opt:
		{
			LCD_DisplayString(1, "  A    |   B      code |   items");
 6e4:	67 ef       	ldi	r22, 0xF7	; 247
 6e6:	71 e0       	ldi	r23, 0x01	; 1
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	b6 dd       	rcall	.-1172   	; 0x258 <LCD_DisplayString>
 6ec:	c2 e0       	ldi	r28, 0x02	; 2
			break;
 6ee:	d0 e0       	ldi	r29, 0x00	; 0
 6f0:	ce 01       	movw	r24, r28
		{
			break;
		}
	}
	return state;
}
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	08 95       	ret

000006f8 <keypad>:
 6f8:	81 30       	cpi	r24, 0x01	; 1

unsigned char count, x, y;
int keypad(int state)
{
	switch(state)
 6fa:	91 05       	cpc	r25, r1
 6fc:	69 f0       	breq	.+26     	; 0x718 <keypad+0x20>
 6fe:	1c f4       	brge	.+6      	; 0x706 <keypad+0xe>
 700:	89 2b       	or	r24, r25
 702:	39 f0       	breq	.+14     	; 0x712 <keypad+0x1a>
 704:	36 c0       	rjmp	.+108    	; 0x772 <keypad+0x7a>
 706:	82 30       	cpi	r24, 0x02	; 2
 708:	91 05       	cpc	r25, r1
 70a:	61 f0       	breq	.+24     	; 0x724 <keypad+0x2c>
 70c:	03 97       	sbiw	r24, 0x03	; 3
 70e:	81 f0       	breq	.+32     	; 0x730 <keypad+0x38>
 710:	30 c0       	rjmp	.+96     	; 0x772 <keypad+0x7a>
	{
		case startK:
		{
			count = 0;
 712:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <count>
 716:	15 c0       	rjmp	.+42     	; 0x742 <keypad+0x4a>
			state = wait;
			break;
		}
		case wait:
		{
			x = GetKeypadKey();
 718:	4c de       	rcall	.-872    	; 0x3b2 <GetKeypadKey>
 71a:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <x>
			if(x != '\0')
 71e:	81 11       	cpse	r24, r1
 720:	33 c0       	rjmp	.+102    	; 0x788 <keypad+0x90>
			}
			break;
		}
		case press:
		{
			y = GetKeypadKey();
 722:	2d c0       	rjmp	.+90     	; 0x77e <keypad+0x86>
 724:	46 de       	rcall	.-884    	; 0x3b2 <GetKeypadKey>
 726:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <y>
			if(y == '\0')
 72a:	88 23       	and	r24, r24
 72c:	91 f1       	breq	.+100    	; 0x792 <keypad+0x9a>
 72e:	36 c0       	rjmp	.+108    	; 0x79c <keypad+0xa4>
			}
			break;
		}
		case unpress:
		{
			key = x;
 730:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <x>
 734:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <key>
			if(count == 9)
 738:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <count>
 73c:	89 30       	cpi	r24, 0x09	; 9
 73e:	89 f4       	brne	.+34     	; 0x762 <keypad+0x6a>
 740:	1b c0       	rjmp	.+54     	; 0x778 <keypad+0x80>
		{
			break;
		}
		case wait:
		{
			count++;
 742:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <count>
 746:	8f 5f       	subi	r24, 0xFF	; 255
 748:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <count>
			break;
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	08 95       	ret
		}
		case press:
		{
			count++;
 752:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <count>
 756:	8f 5f       	subi	r24, 0xFF	; 255
 758:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <count>
			break;
 75c:	82 e0       	ldi	r24, 0x02	; 2
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	08 95       	ret
		}
		case unpress:
		{
			count++;
 762:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <count>
 766:	8f 5f       	subi	r24, 0xFF	; 255
 768:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <count>
			break;
 76c:	83 e0       	ldi	r24, 0x03	; 3
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	08 95       	ret
			}
			break;
		}
		default:
		{
			state = startK;
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	08 95       	ret
			break;
		}
		case unpress:
		{
			count++;
			break;
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	90 e0       	ldi	r25, 0x00	; 0
		default:
		{
			break;
		}
	}
	return state;
 77c:	08 95       	ret
			x = GetKeypadKey();
			if(x != '\0')
			{
				state = press;
			}
			if(count == 9)
 77e:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <count>
 782:	89 30       	cpi	r24, 0x09	; 9
 784:	c9 f3       	breq	.-14     	; 0x778 <keypad+0x80>
 786:	dd cf       	rjmp	.-70     	; 0x742 <keypad+0x4a>
 788:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <count>
 78c:	89 30       	cpi	r24, 0x09	; 9
 78e:	09 f7       	brne	.-62     	; 0x752 <keypad+0x5a>
 790:	f3 cf       	rjmp	.-26     	; 0x778 <keypad+0x80>
			y = GetKeypadKey();
			if(y == '\0')
			{
				state = unpress;
			}
			if(count == 9)
 792:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <count>
 796:	89 30       	cpi	r24, 0x09	; 9
 798:	79 f3       	breq	.-34     	; 0x778 <keypad+0x80>
 79a:	e3 cf       	rjmp	.-58     	; 0x762 <keypad+0x6a>
 79c:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <count>
 7a0:	89 30       	cpi	r24, 0x09	; 9
 7a2:	b9 f6       	brne	.-82     	; 0x752 <keypad+0x5a>
 7a4:	e9 cf       	rjmp	.-46     	; 0x778 <keypad+0x80>

000007a6 <main>:
	}
	return state;
}
	
int main()
{
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	cd b7       	in	r28, 0x3d	; 61
 7ac:	de b7       	in	r29, 0x3e	; 62
 7ae:	2a 97       	sbiw	r28, 0x0a	; 10
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	f8 94       	cli
 7b4:	de bf       	out	0x3e, r29	; 62
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	81 b9       	out	0x01, r24	; 1
 7be:	12 b8       	out	0x02, r1	; 2
	DDRD = 0xFF; PORTD = 0x00;
 7c0:	8a b9       	out	0x0a, r24	; 10
 7c2:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xF0; PORTC = 0x0F;
 7c4:	80 ef       	ldi	r24, 0xF0	; 240
 7c6:	87 b9       	out	0x07, r24	; 7
 7c8:	8f e0       	ldi	r24, 0x0F	; 15
 7ca:	88 b9       	out	0x08, r24	; 8
	unsigned long int SMTick5_period = keypadperiod/GCD;

	
	//Declare an array of tasks
	static task a,b,c,d,e;
	task *tasks[] = {&a, &b, &c, &d, &e};
 7cc:	8a e0       	ldi	r24, 0x0A	; 10
 7ce:	e4 e0       	ldi	r30, 0x04	; 4
 7d0:	f1 e0       	ldi	r31, 0x01	; 1
 7d2:	de 01       	movw	r26, r28
 7d4:	11 96       	adiw	r26, 0x01	; 1
 7d6:	01 90       	ld	r0, Z+
 7d8:	0d 92       	st	X+, r0
 7da:	8a 95       	dec	r24
 7dc:	e1 f7       	brne	.-8      	; 0x7d6 <main+0x30>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	// Task 1
	a.state = startM;//Task initial state.
 7de:	e4 e4       	ldi	r30, 0x44	; 68
 7e0:	f2 e0       	ldi	r31, 0x02	; 2
 7e2:	10 82       	st	Z, r1
	a.period = SMTick1_period;//Task Period.
 7e4:	8a e0       	ldi	r24, 0x0A	; 10
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	a0 e0       	ldi	r26, 0x00	; 0
 7ea:	b0 e0       	ldi	r27, 0x00	; 0
 7ec:	81 83       	std	Z+1, r24	; 0x01
 7ee:	92 83       	std	Z+2, r25	; 0x02
 7f0:	a3 83       	std	Z+3, r26	; 0x03
 7f2:	b4 83       	std	Z+4, r27	; 0x04
	a.elapsedTime = SMTick1_period;//Task current elapsed time.
 7f4:	85 83       	std	Z+5, r24	; 0x05
 7f6:	96 83       	std	Z+6, r25	; 0x06
 7f8:	a7 83       	std	Z+7, r26	; 0x07
 7fa:	b0 87       	std	Z+8, r27	; 0x08
	a.TickFct = &Menu;//Function pointer for the tick.
 7fc:	85 e4       	ldi	r24, 0x45	; 69
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	92 87       	std	Z+10, r25	; 0x0a
 802:	81 87       	std	Z+9, r24	; 0x09
	
	// Task 2
	b.state = startT;//Task initial state.
 804:	e9 e3       	ldi	r30, 0x39	; 57
 806:	f2 e0       	ldi	r31, 0x02	; 2
 808:	10 82       	st	Z, r1
	b.period = SMTick2_period;//Task Period.
 80a:	82 e0       	ldi	r24, 0x02	; 2
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	a0 e0       	ldi	r26, 0x00	; 0
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	81 83       	std	Z+1, r24	; 0x01
 814:	92 83       	std	Z+2, r25	; 0x02
 816:	a3 83       	std	Z+3, r26	; 0x03
 818:	b4 83       	std	Z+4, r27	; 0x04
	b.elapsedTime = SMTick2_period;//Task current elapsed time.
 81a:	85 83       	std	Z+5, r24	; 0x05
 81c:	96 83       	std	Z+6, r25	; 0x06
 81e:	a7 83       	std	Z+7, r26	; 0x07
 820:	b0 87       	std	Z+8, r27	; 0x08
	b.TickFct = &trans;//Function pointer for the tick.
 822:	27 e2       	ldi	r18, 0x27	; 39
 824:	32 e0       	ldi	r19, 0x02	; 2
 826:	32 87       	std	Z+10, r19	; 0x0a
 828:	21 87       	std	Z+9, r18	; 0x09
	
	c.state = startS;//Task initial state.
 82a:	ee e2       	ldi	r30, 0x2E	; 46
 82c:	f2 e0       	ldi	r31, 0x02	; 2
 82e:	10 82       	st	Z, r1
	c.period = SMTick3_period;//Task Period.
 830:	81 83       	std	Z+1, r24	; 0x01
 832:	92 83       	std	Z+2, r25	; 0x02
 834:	a3 83       	std	Z+3, r26	; 0x03
 836:	b4 83       	std	Z+4, r27	; 0x04
	c.elapsedTime = SMTick3_period;//Task current elapsed time.
 838:	85 83       	std	Z+5, r24	; 0x05
 83a:	96 83       	std	Z+6, r25	; 0x06
 83c:	a7 83       	std	Z+7, r26	; 0x07
 83e:	b0 87       	std	Z+8, r27	; 0x08
	c.TickFct = &setting;//Function pointer for the tick.
 840:	2a ec       	ldi	r18, 0xCA	; 202
 842:	32 e0       	ldi	r19, 0x02	; 2
 844:	32 87       	std	Z+10, r19	; 0x0a
 846:	21 87       	std	Z+9, r18	; 0x09
	
	d.state = startP;//Task initial state.
 848:	e3 e2       	ldi	r30, 0x23	; 35
 84a:	f2 e0       	ldi	r31, 0x02	; 2
 84c:	10 82       	st	Z, r1
	d.period = SMTick4_period;//Task Period.
 84e:	81 83       	std	Z+1, r24	; 0x01
 850:	92 83       	std	Z+2, r25	; 0x02
 852:	a3 83       	std	Z+3, r26	; 0x03
 854:	b4 83       	std	Z+4, r27	; 0x04
	d.elapsedTime = SMTick4_period;//Task current elapsed time.
 856:	85 83       	std	Z+5, r24	; 0x05
 858:	96 83       	std	Z+6, r25	; 0x06
 85a:	a7 83       	std	Z+7, r26	; 0x07
 85c:	b0 87       	std	Z+8, r27	; 0x08
	d.TickFct = &prof;//Function pointer for the tick.
 85e:	88 e9       	ldi	r24, 0x98	; 152
 860:	92 e0       	ldi	r25, 0x02	; 2
 862:	92 87       	std	Z+10, r25	; 0x0a
 864:	81 87       	std	Z+9, r24	; 0x09
	
	e.state = startK;//Task initial state.
 866:	e8 e1       	ldi	r30, 0x18	; 24
 868:	f2 e0       	ldi	r31, 0x02	; 2
 86a:	10 82       	st	Z, r1
	e.period = SMTick5_period;//Task Period.
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	a0 e0       	ldi	r26, 0x00	; 0
 872:	b0 e0       	ldi	r27, 0x00	; 0
 874:	81 83       	std	Z+1, r24	; 0x01
 876:	92 83       	std	Z+2, r25	; 0x02
 878:	a3 83       	std	Z+3, r26	; 0x03
 87a:	b4 83       	std	Z+4, r27	; 0x04
	e.elapsedTime = SMTick5_period;//Task current elapsed time.
 87c:	85 83       	std	Z+5, r24	; 0x05
 87e:	96 83       	std	Z+6, r25	; 0x06
 880:	a7 83       	std	Z+7, r26	; 0x07
 882:	b0 87       	std	Z+8, r27	; 0x08
	e.TickFct = &keypad;//Function pointer for the tick.
 884:	8c e7       	ldi	r24, 0x7C	; 124
 886:	93 e0       	ldi	r25, 0x03	; 3
 888:	92 87       	std	Z+10, r25	; 0x0a
 88a:	81 87       	std	Z+9, r24	; 0x09
	
	// Set the timer and turn it on
	TimerSet(GCD);
 88c:	64 e6       	ldi	r22, 0x64	; 100
 88e:	70 e0       	ldi	r23, 0x00	; 0
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	31 dc       	rcall	.-1950   	; 0xf8 <TimerSet>
	TimerOn();
 896:	41 dc       	rcall	.-1918   	; 0x11a <TimerOn>
	
	LCD_init();
 898:	c7 dc       	rcall	.-1650   	; 0x228 <LCD_init>
 89a:	bb dc       	rcall	.-1674   	; 0x212 <LCD_ClearScreen>
	LCD_ClearScreen();
 89c:	7e 01       	movw	r14, r28
 89e:	8b e0       	ldi	r24, 0x0B	; 11
 8a0:	e8 0e       	add	r14, r24
 8a2:	f1 1c       	adc	r15, r1
 8a4:	de 01       	movw	r26, r28
 8a6:	11 96       	adiw	r26, 0x01	; 1
 8a8:	6d 01       	movw	r12, r26
 8aa:	f6 01       	movw	r30, r12
 8ac:	01 91       	ld	r16, Z+
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 8ae:	11 91       	ld	r17, Z+
 8b0:	6f 01       	movw	r12, r30
 8b2:	d8 01       	movw	r26, r16
 8b4:	15 96       	adiw	r26, 0x05	; 5
 8b6:	4d 91       	ld	r20, X+
 8b8:	5d 91       	ld	r21, X+
 8ba:	6d 91       	ld	r22, X+
 8bc:	7c 91       	ld	r23, X
 8be:	18 97       	sbiw	r26, 0x08	; 8
 8c0:	11 96       	adiw	r26, 0x01	; 1
 8c2:	8d 91       	ld	r24, X+
 8c4:	9d 91       	ld	r25, X+
 8c6:	0d 90       	ld	r0, X+
 8c8:	bc 91       	ld	r27, X
 8ca:	a0 2d       	mov	r26, r0
 8cc:	48 17       	cp	r20, r24
 8ce:	59 07       	cpc	r21, r25
 8d0:	6a 07       	cpc	r22, r26
 8d2:	7b 07       	cpc	r23, r27
 8d4:	81 f4       	brne	.+32     	; 0x8f6 <main+0x150>
 8d6:	f8 01       	movw	r30, r16
 8d8:	80 81       	ld	r24, Z
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 8da:	01 84       	ldd	r0, Z+9	; 0x09
 8dc:	f2 85       	ldd	r31, Z+10	; 0x0a
 8de:	e0 2d       	mov	r30, r0
 8e0:	08 2e       	mov	r0, r24
 8e2:	00 0c       	add	r0, r0
 8e4:	99 0b       	sbc	r25, r25
 8e6:	09 95       	icall
 8e8:	d8 01       	movw	r26, r16
 8ea:	8c 93       	st	X, r24
 8ec:	f8 01       	movw	r30, r16
 8ee:	15 82       	std	Z+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 8f0:	16 82       	std	Z+6, r1	; 0x06
 8f2:	17 82       	std	Z+7, r1	; 0x07
 8f4:	10 86       	std	Z+8, r1	; 0x08
 8f6:	f8 01       	movw	r30, r16
 8f8:	85 81       	ldd	r24, Z+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 8fa:	96 81       	ldd	r25, Z+6	; 0x06
 8fc:	a7 81       	ldd	r26, Z+7	; 0x07
 8fe:	b0 85       	ldd	r27, Z+8	; 0x08
 900:	01 96       	adiw	r24, 0x01	; 1
 902:	a1 1d       	adc	r26, r1
 904:	b1 1d       	adc	r27, r1
 906:	85 83       	std	Z+5, r24	; 0x05
 908:	96 83       	std	Z+6, r25	; 0x06
 90a:	a7 83       	std	Z+7, r26	; 0x07
 90c:	b0 87       	std	Z+8, r27	; 0x08
 90e:	ce 14       	cp	r12, r14
 910:	df 04       	cpc	r13, r15
	LCD_ClearScreen();
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 912:	59 f6       	brne	.-106    	; 0x8aa <main+0x104>
 914:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <TimerFlag>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 918:	88 23       	and	r24, r24
 91a:	e1 f3       	breq	.-8      	; 0x914 <main+0x16e>
 91c:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <TimerFlag>
		TimerFlag = 0;
 920:	c1 cf       	rjmp	.-126    	; 0x8a4 <main+0xfe>

00000922 <__tablejump2__>:
 922:	ee 0f       	add	r30, r30
	}
 924:	ff 1f       	adc	r31, r31
 926:	00 24       	eor	r0, r0
 928:	00 1c       	adc	r0, r0
 92a:	0b be       	out	0x3b, r0	; 59
 92c:	07 90       	elpm	r0, Z+
 92e:	f6 91       	elpm	r31, Z
 930:	e0 2d       	mov	r30, r0
 932:	09 94       	ijmp

00000934 <_exit>:
 934:	f8 94       	cli

00000936 <__stop_program>:
 936:	ff cf       	rjmp	.-2      	; 0x936 <__stop_program>
