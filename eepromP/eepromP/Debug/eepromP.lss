
eepromP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00001028  000010bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001028  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800158  00800158  00001114  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001188  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001571  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a70  00000000  00000000  00002859  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5a  00000000  00000000  000032c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00003f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ed  00000000  00000000  0000410c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008cc  00000000  00000000  000046f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004fc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
       6:	00 00       	nop
       8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
       a:	00 00       	nop
       c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
       e:	00 00       	nop
      10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
      12:	00 00       	nop
      14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
      16:	00 00       	nop
      18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
      1e:	00 00       	nop
      20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
      22:	00 00       	nop
      24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
      26:	00 00       	nop
      28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a0 c0       	rjmp	.+320    	; 0x16e <__bad_interrupt>
      2e:	00 00       	nop
      30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
      32:	00 00       	nop
      34:	d2 c0       	rjmp	.+420    	; 0x1da <__vector_13>
      36:	00 00       	nop
      38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
      3e:	00 00       	nop
      40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
      42:	00 00       	nop
      44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
      4e:	00 00       	nop
      50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
      52:	00 00       	nop
      54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
      56:	00 00       	nop
      58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	88 c0       	rjmp	.+272    	; 0x16e <__bad_interrupt>
      5e:	00 00       	nop
      60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
      62:	00 00       	nop
      64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
      66:	00 00       	nop
      68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
      6e:	00 00       	nop
      70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
      72:	00 00       	nop
      74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
      76:	00 00       	nop
      78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
      7e:	00 00       	nop
      80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
      82:	00 00       	nop
      84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
      86:	00 00       	nop
      88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 01       	movw	r26, r16
      8e:	da 01       	movw	r26, r20
      90:	dc 01       	movw	r26, r24
      92:	de 01       	movw	r26, r28
      94:	e0 01       	movw	r28, r0
      96:	e2 01       	movw	r28, r4
      98:	e4 01       	movw	r28, r8
      9a:	e6 01       	movw	r28, r12
      9c:	e8 01       	movw	r28, r16
      9e:	08 02       	muls	r16, r24
      a0:	f4 01       	movw	r30, r8
      a2:	f6 01       	movw	r30, r12
      a4:	f8 01       	movw	r30, r16
      a6:	fa 01       	movw	r30, r20
      a8:	fc 01       	movw	r30, r24
      aa:	fe 01       	movw	r30, r28
      ac:	00 02       	muls	r16, r16
      ae:	02 02       	muls	r16, r18
      b0:	04 02       	muls	r16, r20
      b2:	07 63       	ori	r16, 0x37	; 55
      b4:	42 36       	cpi	r20, 0x62	; 98
      b6:	b7 9b       	sbis	0x16, 7	; 22
      b8:	d8 a7       	std	Y+40, r29	; 0x28
      ba:	1a 39       	cpi	r17, 0x9A	; 154
      bc:	68 56       	subi	r22, 0x68	; 104
      be:	18 ae       	std	Y+56, r1	; 0x38
      c0:	ba ab       	std	Y+50, r27	; 0x32
      c2:	55 8c       	ldd	r5, Z+29	; 0x1d
      c4:	1d 3c       	cpi	r17, 0xCD	; 205
      c6:	b7 cc       	rjmp	.-1682   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      c8:	57 63       	ori	r21, 0x37	; 55
      ca:	bd 6d       	ori	r27, 0xDD	; 221
      cc:	ed fd       	.word	0xfded	; ????
      ce:	75 3e       	cpi	r23, 0xE5	; 229
      d0:	f6 17       	cp	r31, r22
      d2:	72 31       	cpi	r23, 0x12	; 18
      d4:	bf 00       	.word	0x00bf	; ????
      d6:	00 00       	nop
      d8:	80 3f       	cpi	r24, 0xF0	; 240
      da:	08 00       	.word	0x0008	; ????
      dc:	00 00       	nop
      de:	be 92       	st	-X, r11
      e0:	24 49       	sbci	r18, 0x94	; 148
      e2:	12 3e       	cpi	r17, 0xE2	; 226
      e4:	ab aa       	std	Y+51, r10	; 0x33
      e6:	aa 2a       	or	r10, r26
      e8:	be cd       	rjmp	.-1156   	; 0xfffffc66 <__eeprom_end+0xff7efc66>
      ea:	cc cc       	rjmp	.-1640   	; 0xfffffa84 <__eeprom_end+0xff7efa84>
      ec:	4c 3e       	cpi	r20, 0xEC	; 236
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	be ab       	std	Y+54, r27	; 0x36
      f4:	aa aa       	std	Y+50, r10	; 0x32
      f6:	aa 3e       	cpi	r26, 0xEA	; 234
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	bf 00       	.word	0x00bf	; ????
      fe:	00 00       	nop
     100:	80 3f       	cpi	r24, 0xF0	; 240
     102:	00 00       	nop
     104:	00 00       	nop
     106:	00 08       	sbc	r0, r0
     108:	41 78       	andi	r20, 0x81	; 129
     10a:	d3 bb       	out	0x13, r29	; 19
     10c:	43 87       	std	Z+11, r20	; 0x0b
     10e:	d1 13       	cpse	r29, r17
     110:	3d 19       	sub	r19, r13
     112:	0e 3c       	cpi	r16, 0xCE	; 206
     114:	c3 bd       	out	0x23, r28	; 35
     116:	42 82       	std	Z+2, r4	; 0x02
     118:	ad 2b       	or	r26, r29
     11a:	3e 68       	ori	r19, 0x8E	; 142
     11c:	ec 82       	std	Y+4, r14	; 0x04
     11e:	76 be       	out	0x36, r7	; 54
     120:	d9 8f       	std	Y+25, r29	; 0x19
     122:	e1 a9       	ldd	r30, Z+49	; 0x31
     124:	3e 4c       	sbci	r19, 0xCE	; 206
     126:	80 ef       	ldi	r24, 0xF0	; 240
     128:	ff be       	out	0x3f, r15	; 63
     12a:	01 c4       	rjmp	.+2050   	; 0x92e <__addsf3+0x18>
     12c:	ff 7f       	andi	r31, 0xFF	; 255
     12e:	3f 00       	.word	0x003f	; ????
     130:	00 00       	nop
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d0 e4       	ldi	r29, 0x40	; 64
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61

00000140 <__do_copy_data>:
     140:	11 e0       	ldi	r17, 0x01	; 1
     142:	a0 e0       	ldi	r26, 0x00	; 0
     144:	b1 e0       	ldi	r27, 0x01	; 1
     146:	e8 e2       	ldi	r30, 0x28	; 40
     148:	f0 e1       	ldi	r31, 0x10	; 16
     14a:	00 e0       	ldi	r16, 0x00	; 0
     14c:	0b bf       	out	0x3b, r16	; 59
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x14>
     150:	07 90       	elpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	a8 35       	cpi	r26, 0x58	; 88
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0x10>

0000015a <__do_clear_bss>:
     15a:	21 e0       	ldi	r18, 0x01	; 1
     15c:	a8 e5       	ldi	r26, 0x58	; 88
     15e:	b1 e0       	ldi	r27, 0x01	; 1
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	a8 37       	cpi	r26, 0x78	; 120
     166:	b2 07       	cpc	r27, r18
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	b9 d3       	rcall	.+1906   	; 0x8de <main>
     16c:	5b c7       	rjmp	.+3766   	; 0x1024 <_exit>

0000016e <__bad_interrupt>:
     16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <TimerSet>:
        if(c==0){return b;}
        a = b;
        b = c;
    }
    return 0;
}
     170:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     174:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     178:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     17c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     180:	60 93 71 01 	sts	0x0171, r22	; 0x800171 <_avr_timer_cntcurr>
     184:	70 93 72 01 	sts	0x0172, r23	; 0x800172 <_avr_timer_cntcurr+0x1>
     188:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <_avr_timer_cntcurr+0x2>
     18c:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <_avr_timer_cntcurr+0x3>
     190:	08 95       	ret

00000192 <TimerOn>:
     192:	8b e0       	ldi	r24, 0x0B	; 11
     194:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     198:	8d e7       	ldi	r24, 0x7D	; 125
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     1aa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     1ae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     1b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     1ba:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     1be:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     1c2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <_avr_timer_cntcurr>
     1c6:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <_avr_timer_cntcurr+0x1>
     1ca:	a0 93 73 01 	sts	0x0173, r26	; 0x800173 <_avr_timer_cntcurr+0x2>
     1ce:	b0 93 74 01 	sts	0x0174, r27	; 0x800174 <_avr_timer_cntcurr+0x3>
     1d2:	8f b7       	in	r24, 0x3f	; 63
     1d4:	80 68       	ori	r24, 0x80	; 128
     1d6:	8f bf       	out	0x3f, r24	; 63
     1d8:	08 95       	ret

000001da <__vector_13>:
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
     1e4:	8f 93       	push	r24
     1e6:	9f 93       	push	r25
     1e8:	af 93       	push	r26
     1ea:	bf 93       	push	r27
     1ec:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <_avr_timer_cntcurr>
     1f0:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <_avr_timer_cntcurr+0x1>
     1f4:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <_avr_timer_cntcurr+0x2>
     1f8:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <_avr_timer_cntcurr+0x3>
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	a1 09       	sbc	r26, r1
     200:	b1 09       	sbc	r27, r1
     202:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <_avr_timer_cntcurr>
     206:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <_avr_timer_cntcurr+0x1>
     20a:	a0 93 73 01 	sts	0x0173, r26	; 0x800173 <_avr_timer_cntcurr+0x2>
     20e:	b0 93 74 01 	sts	0x0174, r27	; 0x800174 <_avr_timer_cntcurr+0x3>
     212:	89 2b       	or	r24, r25
     214:	8a 2b       	or	r24, r26
     216:	8b 2b       	or	r24, r27
     218:	99 f4       	brne	.+38     	; 0x240 <__vector_13+0x66>
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <TimerFlag>
     220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     224:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     228:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     22c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     230:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <_avr_timer_cntcurr>
     234:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <_avr_timer_cntcurr+0x1>
     238:	a0 93 73 01 	sts	0x0173, r26	; 0x800173 <_avr_timer_cntcurr+0x2>
     23c:	b0 93 74 01 	sts	0x0174, r27	; 0x800174 <_avr_timer_cntcurr+0x3>
     240:	bf 91       	pop	r27
     242:	af 91       	pop	r26
     244:	9f 91       	pop	r25
     246:	8f 91       	pop	r24
     248:	0f 90       	pop	r0
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	0f 90       	pop	r0
     24e:	1f 90       	pop	r1
     250:	18 95       	reti

00000252 <delay_ms>:
     252:	18 16       	cp	r1, r24
     254:	19 06       	cpc	r1, r25
     256:	5c f0       	brlt	.+22     	; 0x26e <delay_ms+0x1c>
     258:	08 95       	ret
     25a:	00 00       	nop
     25c:	21 50       	subi	r18, 0x01	; 1
     25e:	31 09       	sbc	r19, r1
     260:	e1 f7       	brne	.-8      	; 0x25a <delay_ms+0x8>
     262:	4f 5f       	subi	r20, 0xFF	; 255
     264:	5f 4f       	sbci	r21, 0xFF	; 255
     266:	84 17       	cp	r24, r20
     268:	95 07       	cpc	r25, r21
     26a:	19 f4       	brne	.+6      	; 0x272 <delay_ms+0x20>
     26c:	08 95       	ret
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	27 e0       	ldi	r18, 0x07	; 7
     274:	33 e0       	ldi	r19, 0x03	; 3
     276:	f1 cf       	rjmp	.-30     	; 0x25a <delay_ms+0x8>

00000278 <LCD_WriteCommand>:
     278:	10 98       	cbi	0x02, 0	; 2
     27a:	8b b9       	out	0x0b, r24	; 11
     27c:	11 9a       	sbi	0x02, 1	; 2
     27e:	00 00       	nop
     280:	11 98       	cbi	0x02, 1	; 2
     282:	82 e0       	ldi	r24, 0x02	; 2
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	e5 cf       	rjmp	.-54     	; 0x252 <delay_ms>
     288:	08 95       	ret

0000028a <LCD_ClearScreen>:
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	f5 cf       	rjmp	.-22     	; 0x278 <LCD_WriteCommand>
     28e:	08 95       	ret

00000290 <LCD_Cursor>:
     290:	81 31       	cpi	r24, 0x11	; 17
     292:	18 f4       	brcc	.+6      	; 0x29a <LCD_Cursor+0xa>
     294:	81 58       	subi	r24, 0x81	; 129
     296:	f0 cf       	rjmp	.-32     	; 0x278 <LCD_WriteCommand>
     298:	08 95       	ret
     29a:	81 55       	subi	r24, 0x51	; 81
     29c:	ed cf       	rjmp	.-38     	; 0x278 <LCD_WriteCommand>
     29e:	08 95       	ret

000002a0 <LCD_init>:
     2a0:	84 e6       	ldi	r24, 0x64	; 100
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	d6 df       	rcall	.-84     	; 0x252 <delay_ms>
     2a6:	88 e3       	ldi	r24, 0x38	; 56
     2a8:	e7 df       	rcall	.-50     	; 0x278 <LCD_WriteCommand>
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	e5 df       	rcall	.-54     	; 0x278 <LCD_WriteCommand>
     2ae:	8f e0       	ldi	r24, 0x0F	; 15
     2b0:	e3 df       	rcall	.-58     	; 0x278 <LCD_WriteCommand>
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	e1 df       	rcall	.-62     	; 0x278 <LCD_WriteCommand>
     2b6:	8a e0       	ldi	r24, 0x0A	; 10
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	cb cf       	rjmp	.-106    	; 0x252 <delay_ms>
     2bc:	08 95       	ret

000002be <LCD_WriteData>:
     2be:	10 9a       	sbi	0x02, 0	; 2
     2c0:	8b b9       	out	0x0b, r24	; 11
     2c2:	11 9a       	sbi	0x02, 1	; 2
     2c4:	00 00       	nop
     2c6:	11 98       	cbi	0x02, 1	; 2
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	c2 cf       	rjmp	.-124    	; 0x252 <delay_ms>
     2ce:	08 95       	ret

000002d0 <LCD_DisplayString>:
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	18 2f       	mov	r17, r24
     2da:	eb 01       	movw	r28, r22
     2dc:	d6 df       	rcall	.-84     	; 0x28a <LCD_ClearScreen>
     2de:	88 81       	ld	r24, Y
     2e0:	88 23       	and	r24, r24
     2e2:	51 f0       	breq	.+20     	; 0x2f8 <LCD_DisplayString+0x28>
     2e4:	01 e0       	ldi	r16, 0x01	; 1
     2e6:	01 0f       	add	r16, r17
     2e8:	81 2f       	mov	r24, r17
     2ea:	d2 df       	rcall	.-92     	; 0x290 <LCD_Cursor>
     2ec:	89 91       	ld	r24, Y+
     2ee:	e7 df       	rcall	.-50     	; 0x2be <LCD_WriteData>
     2f0:	10 2f       	mov	r17, r16
     2f2:	88 81       	ld	r24, Y
     2f4:	81 11       	cpse	r24, r1
     2f6:	f6 cf       	rjmp	.-20     	; 0x2e4 <LCD_DisplayString+0x14>
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	08 95       	ret

00000302 <GetKeypadKey>:
//--------End find GCD function ----------------------------------------------

// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
     302:	8f ee       	ldi	r24, 0xEF	; 239
     304:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
     306:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('1'); }
     308:	30 9b       	sbis	0x06, 0	; 6
     30a:	29 c0       	rjmp	.+82     	; 0x35e <GetKeypadKey+0x5c>
    if (GetBit(PINC,1)==0) { return('4'); }
     30c:	31 9b       	sbis	0x06, 1	; 6
     30e:	29 c0       	rjmp	.+82     	; 0x362 <GetKeypadKey+0x60>
    if (GetBit(PINC,2)==0) { return('7'); }
     310:	32 9b       	sbis	0x06, 2	; 6
     312:	29 c0       	rjmp	.+82     	; 0x366 <GetKeypadKey+0x64>
    if (GetBit(PINC,3)==0) { return('*'); }
     314:	33 9b       	sbis	0x06, 3	; 6
     316:	29 c0       	rjmp	.+82     	; 0x36a <GetKeypadKey+0x68>
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
     318:	8f ed       	ldi	r24, 0xDF	; 223
     31a:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
     31c:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('2'); }
     31e:	30 9b       	sbis	0x06, 0	; 6
     320:	26 c0       	rjmp	.+76     	; 0x36e <GetKeypadKey+0x6c>
    if (GetBit(PINC,1)==0) { return('5'); }
     322:	31 9b       	sbis	0x06, 1	; 6
     324:	26 c0       	rjmp	.+76     	; 0x372 <GetKeypadKey+0x70>
    if (GetBit(PINC,2)==0) { return('8'); }
     326:	32 9b       	sbis	0x06, 2	; 6
     328:	26 c0       	rjmp	.+76     	; 0x376 <GetKeypadKey+0x74>
    if (GetBit(PINC,3)==0) { return('0'); }
     32a:	33 9b       	sbis	0x06, 3	; 6
     32c:	26 c0       	rjmp	.+76     	; 0x37a <GetKeypadKey+0x78>
    // ... *****FINISH*****
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
     32e:	8f eb       	ldi	r24, 0xBF	; 191
     330:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
     332:	00 00       	nop
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
     334:	30 9b       	sbis	0x06, 0	; 6
     336:	23 c0       	rjmp	.+70     	; 0x37e <GetKeypadKey+0x7c>
    if (GetBit(PINC,1)==0) { return('6'); }
     338:	31 9b       	sbis	0x06, 1	; 6
     33a:	23 c0       	rjmp	.+70     	; 0x382 <GetKeypadKey+0x80>
    if (GetBit(PINC,2)==0) { return('9'); }
     33c:	32 9b       	sbis	0x06, 2	; 6
     33e:	23 c0       	rjmp	.+70     	; 0x386 <GetKeypadKey+0x84>
    if (GetBit(PINC,3)==0) { return('#'); }
     340:	33 9b       	sbis	0x06, 3	; 6
     342:	23 c0       	rjmp	.+70     	; 0x38a <GetKeypadKey+0x88>
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
     344:	8f e7       	ldi	r24, 0x7F	; 127
     346:	88 b9       	out	0x08, r24	; 8
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
     348:	00 00       	nop
    if (GetBit(PINC,0)==0) { return('A'); }
     34a:	30 9b       	sbis	0x06, 0	; 6
     34c:	20 c0       	rjmp	.+64     	; 0x38e <GetKeypadKey+0x8c>
    if (GetBit(PINC,1)==0) { return('B'); }
     34e:	31 9b       	sbis	0x06, 1	; 6
     350:	20 c0       	rjmp	.+64     	; 0x392 <GetKeypadKey+0x90>
    if (GetBit(PINC,2)==0) { return('C'); }
     352:	32 9b       	sbis	0x06, 2	; 6
     354:	20 c0       	rjmp	.+64     	; 0x396 <GetKeypadKey+0x94>
    if (GetBit(PINC,3)==0) { return('D'); }
     356:	33 9b       	sbis	0x06, 3	; 6
     358:	20 c0       	rjmp	.+64     	; 0x39a <GetKeypadKey+0x98>
    
    return('\0'); // default value
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	08 95       	ret
// Keypad input function
unsigned char GetKeypadKey() {
    
    PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('1'); }
     35e:	81 e3       	ldi	r24, 0x31	; 49
     360:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('4'); }
     362:	84 e3       	ldi	r24, 0x34	; 52
     364:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('7'); }
     366:	87 e3       	ldi	r24, 0x37	; 55
     368:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('*'); }
     36a:	8a e2       	ldi	r24, 0x2A	; 42
     36c:	08 95       	ret
    
    // Check keys in col 2
    PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('2'); }
     36e:	82 e3       	ldi	r24, 0x32	; 50
     370:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('5'); }
     372:	85 e3       	ldi	r24, 0x35	; 53
     374:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('8'); }
     376:	88 e3       	ldi	r24, 0x38	; 56
     378:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('0'); }
     37a:	80 e3       	ldi	r24, 0x30	; 48
     37c:	08 95       	ret
    
    // Check keys in col 3
    PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
    asm("nop"); // add a delay to allow PORTC to stabilize before checking
    // ... *****FINISH*****
    if (GetBit(PINC,0)==0) { return('3'); }
     37e:	83 e3       	ldi	r24, 0x33	; 51
     380:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('6'); }
     382:	86 e3       	ldi	r24, 0x36	; 54
     384:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('9'); }
     386:	89 e3       	ldi	r24, 0x39	; 57
     388:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('#'); }
     38a:	83 e2       	ldi	r24, 0x23	; 35
     38c:	08 95       	ret
    
    // Check keys in col 4
    // ... *****FINISH*****
    PORTC = 0x7F;   // Enables column 7 with 0, disable all others with 1
    asm("nop"); // Adds delay to allow PORTC to stabilize before checking
    if (GetBit(PINC,0)==0) { return('A'); }
     38e:	81 e4       	ldi	r24, 0x41	; 65
     390:	08 95       	ret
    if (GetBit(PINC,1)==0) { return('B'); }
     392:	82 e4       	ldi	r24, 0x42	; 66
     394:	08 95       	ret
    if (GetBit(PINC,2)==0) { return('C'); }
     396:	83 e4       	ldi	r24, 0x43	; 67
     398:	08 95       	ret
    if (GetBit(PINC,3)==0) { return('D'); }
     39a:	84 e4       	ldi	r24, 0x44	; 68
    
    return('\0'); // default value
    
}
     39c:	08 95       	ret

0000039e <changetoInteger>:
    int (*TickFct)(int); //Task tick function
} task;

unsigned char changetoInteger(unsigned char var)
{
	switch(var)
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	fc 01       	movw	r30, r24
     3a2:	f1 97       	sbiw	r30, 0x31	; 49
     3a4:	e9 30       	cpi	r30, 0x09	; 9
     3a6:	f1 05       	cpc	r31, r1
     3a8:	a8 f4       	brcc	.+42     	; 0x3d4 <changetoInteger+0x36>
     3aa:	ea 5b       	subi	r30, 0xBA	; 186
     3ac:	ff 4f       	sbci	r31, 0xFF	; 255
     3ae:	06 c6       	rjmp	.+3084   	; 0xfbc <__tablejump2__>
	{
		case '0': return 0;
		case '1': return 1;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	08 95       	ret
		case '2': return 2;
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	08 95       	ret
		case '3': return 3;
     3b8:	83 e0       	ldi	r24, 0x03	; 3
     3ba:	08 95       	ret
		case '4': return 4;
     3bc:	84 e0       	ldi	r24, 0x04	; 4
     3be:	08 95       	ret
		case '5': return 5;
     3c0:	85 e0       	ldi	r24, 0x05	; 5
     3c2:	08 95       	ret
		case '6': return 6;
     3c4:	86 e0       	ldi	r24, 0x06	; 6
     3c6:	08 95       	ret
		case '7': return 7;
     3c8:	87 e0       	ldi	r24, 0x07	; 7
     3ca:	08 95       	ret
		case '8': return 8;
     3cc:	88 e0       	ldi	r24, 0x08	; 8
     3ce:	08 95       	ret
		case '9': return 9;
     3d0:	89 e0       	ldi	r24, 0x09	; 9
     3d2:	08 95       	ret

unsigned char changetoInteger(unsigned char var)
{
	switch(var)
	{
		case '0': return 0;
     3d4:	80 e0       	ldi	r24, 0x00	; 0
		case '7': return 7;
		case '8': return 8;
		case '9': return 9;
		default: return 0;
	}
}
     3d6:	08 95       	ret

000003d8 <changetoChar>:
char changetoChar(unsigned char num)
{
	switch(num)
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	8a 30       	cpi	r24, 0x0A	; 10
     3dc:	91 05       	cpc	r25, r1
     3de:	b0 f4       	brcc	.+44     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3e0:	fc 01       	movw	r30, r24
     3e2:	e1 5b       	subi	r30, 0xB1	; 177
     3e4:	ff 4f       	sbci	r31, 0xFF	; 255
     3e6:	ea c5       	rjmp	.+3028   	; 0xfbc <__tablejump2__>
	{
		case 0: return '0';
		case 1: return '1';
     3e8:	81 e3       	ldi	r24, 0x31	; 49
     3ea:	08 95       	ret
		case 2: return '2';
     3ec:	82 e3       	ldi	r24, 0x32	; 50
     3ee:	08 95       	ret
		case 3: return '3';
     3f0:	83 e3       	ldi	r24, 0x33	; 51
     3f2:	08 95       	ret
		case 4: return '4';
     3f4:	84 e3       	ldi	r24, 0x34	; 52
     3f6:	08 95       	ret
		case 5: return '5';
     3f8:	85 e3       	ldi	r24, 0x35	; 53
     3fa:	08 95       	ret
		case 6: return '6';
     3fc:	86 e3       	ldi	r24, 0x36	; 54
     3fe:	08 95       	ret
		case 7: return '7';
     400:	87 e3       	ldi	r24, 0x37	; 55
     402:	08 95       	ret
		case 8: return '8';
     404:	88 e3       	ldi	r24, 0x38	; 56
     406:	08 95       	ret
		case 9: return '9';
     408:	89 e3       	ldi	r24, 0x39	; 57
     40a:	08 95       	ret
		default: return '\0';
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	08 95       	ret
}
char changetoChar(unsigned char num)
{
	switch(num)
	{
		case 0: return '0';
     410:	80 e3       	ldi	r24, 0x30	; 48
		case 8: return '8';
		case 9: return '9';
		default: return '\0';

	}
}
     412:	08 95       	ret

00000414 <findHowManyB4Dec>:
unsigned char findHowManyB4Dec(unsigned char num)
{
	if(num >= 100)
     414:	84 36       	cpi	r24, 0x64	; 100
     416:	38 f4       	brcc	.+14     	; 0x426 <findHowManyB4Dec+0x12>
	{
		return 3;
	}
	else if(num >= 10)
     418:	8a 30       	cpi	r24, 0x0A	; 10
     41a:	38 f4       	brcc	.+14     	; 0x42a <findHowManyB4Dec+0x16>
}
unsigned char findHowManyB4Dec(unsigned char num)
{
	if(num >= 100)
	{
		return 3;
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	81 11       	cpse	r24, r1
     420:	05 c0       	rjmp	.+10     	; 0x42c <findHowManyB4Dec+0x18>
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	03 c0       	rjmp	.+6      	; 0x42c <findHowManyB4Dec+0x18>
     426:	93 e0       	ldi	r25, 0x03	; 3
     428:	01 c0       	rjmp	.+2      	; 0x42c <findHowManyB4Dec+0x18>
	}
	else if(num >= 10)
	{
		return 2;
     42a:	92 e0       	ldi	r25, 0x02	; 2
	else
	{
		return 0;
	}
	
}
     42c:	89 2f       	mov	r24, r25
     42e:	08 95       	ret

00000430 <ReadOrDisplay>:
float dec = 0;
int decVal = 0;
int intVal = 0;
//--------Shared Variables----------------------------------------------------
void ReadOrDisplay()
{
     430:	8f 92       	push	r8
     432:	9f 92       	push	r9
     434:	af 92       	push	r10
     436:	bf 92       	push	r11
     438:	cf 92       	push	r12
     43a:	df 92       	push	r13
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
	switch(rdstate)
     448:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <rdstate>
     44c:	82 30       	cpi	r24, 0x02	; 2
     44e:	09 f4       	brne	.+2      	; 0x452 <ReadOrDisplay+0x22>
     450:	51 c0       	rjmp	.+162    	; 0x4f4 <ReadOrDisplay+0xc4>
     452:	28 f4       	brcc	.+10     	; 0x45e <ReadOrDisplay+0x2e>
     454:	88 23       	and	r24, r24
     456:	61 f0       	breq	.+24     	; 0x470 <ReadOrDisplay+0x40>
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	a9 f1       	breq	.+106    	; 0x4c6 <ReadOrDisplay+0x96>
     45c:	63 c0       	rjmp	.+198    	; 0x524 <ReadOrDisplay+0xf4>
     45e:	84 30       	cpi	r24, 0x04	; 4
     460:	09 f4       	brne	.+2      	; 0x464 <ReadOrDisplay+0x34>
     462:	58 c0       	rjmp	.+176    	; 0x514 <ReadOrDisplay+0xe4>
     464:	08 f4       	brcc	.+2      	; 0x468 <ReadOrDisplay+0x38>
     466:	52 c0       	rjmp	.+164    	; 0x50c <ReadOrDisplay+0xdc>
     468:	85 30       	cpi	r24, 0x05	; 5
     46a:	09 f4       	brne	.+2      	; 0x46e <ReadOrDisplay+0x3e>
     46c:	4c c0       	rjmp	.+152    	; 0x506 <ReadOrDisplay+0xd6>
     46e:	5a c0       	rjmp	.+180    	; 0x524 <ReadOrDisplay+0xf4>
	{
		case start:
		{
			rdstate = options;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rdstate>
			LCD_DisplayString(1, "A = Write              B = Read ");
     476:	64 e0       	ldi	r22, 0x04	; 4
     478:	71 e0       	ldi	r23, 0x01	; 1
     47a:	2a df       	rcall	.-428    	; 0x2d0 <LCD_DisplayString>
			count = 0;
     47c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <count>
			place = 0;
     480:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <place>
			num1 = 0;
     484:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <num1>
			num2 = 0;
     488:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <num2>
			holder2 = 0;
     48c:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <holder2>
			holder = 0;
     490:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <holder>
			decpart = 0;
     494:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <decpart>
     498:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <decpart+0x1>
     49c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <decpart+0x2>
     4a0:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <decpart+0x3>
			dec = 0;
     4a4:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <dec>
     4a8:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <dec+0x1>
     4ac:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <dec+0x2>
     4b0:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <dec+0x3>
			decVal = 0;
     4b4:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <decVal+0x1>
     4b8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <decVal>
			intVal = 0;
     4bc:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <__data_end+0x1>
     4c0:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <__data_end>
			break;
		}
		case options:
		{
			key = GetKeypadKey();
     4c4:	32 c0       	rjmp	.+100    	; 0x52a <ReadOrDisplay+0xfa>
     4c6:	1d df       	rcall	.-454    	; 0x302 <GetKeypadKey>
     4c8:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <key>
			if(key == 'A')
     4cc:	81 34       	cpi	r24, 0x41	; 65
     4ce:	41 f4       	brne	.+16     	; 0x4e0 <ReadOrDisplay+0xb0>
			{
				rdstate = write;
     4d0:	82 e0       	ldi	r24, 0x02	; 2
     4d2:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rdstate>
				LCD_DisplayString(1, "enter price:              ");
     4d6:	65 e2       	ldi	r22, 0x25	; 37
     4d8:	71 e0       	ldi	r23, 0x01	; 1
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	f9 de       	rcall	.-526    	; 0x2d0 <LCD_DisplayString>
     4de:	25 c0       	rjmp	.+74     	; 0x52a <ReadOrDisplay+0xfa>
			}
			else if(key == 'B')
     4e0:	82 34       	cpi	r24, 0x42	; 66
     4e2:	19 f5       	brne	.+70     	; 0x52a <ReadOrDisplay+0xfa>
			{
				rdstate = display;
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rdstate>
				LCD_DisplayString(1, "price is:              ");
     4ea:	60 e4       	ldi	r22, 0x40	; 64
     4ec:	71 e0       	ldi	r23, 0x01	; 1
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	ef de       	rcall	.-546    	; 0x2d0 <LCD_DisplayString>
			}
			break;
		}
		case write:
		{
			key = GetKeypadKey();
     4f2:	1b c0       	rjmp	.+54     	; 0x52a <ReadOrDisplay+0xfa>
     4f4:	06 df       	rcall	.-500    	; 0x302 <GetKeypadKey>
     4f6:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <key>
			if(key == '#')
     4fa:	83 32       	cpi	r24, 0x23	; 35
     4fc:	b1 f4       	brne	.+44     	; 0x52a <ReadOrDisplay+0xfa>
			{
				rdstate = write1;
     4fe:	85 e0       	ldi	r24, 0x05	; 5
     500:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rdstate>
     504:	1d c0       	rjmp	.+58     	; 0x540 <ReadOrDisplay+0x110>
			}
			break;
		}
		case write1:
		{
			rdstate = start;
     506:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rdstate>
			break;
		}
		case display:
		{
			rdstate = display2;
     50a:	dc c1       	rjmp	.+952    	; 0x8c4 <ReadOrDisplay+0x494>
     50c:	84 e0       	ldi	r24, 0x04	; 4
     50e:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rdstate>
			break;
		}
		case display2:
		{
			key = GetKeypadKey();
     512:	d8 c1       	rjmp	.+944    	; 0x8c4 <ReadOrDisplay+0x494>
     514:	f6 de       	rcall	.-532    	; 0x302 <GetKeypadKey>
     516:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <key>
			if(key == '#')
     51a:	83 32       	cpi	r24, 0x23	; 35
     51c:	31 f4       	brne	.+12     	; 0x52a <ReadOrDisplay+0xfa>
			{
				rdstate = start;
     51e:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rdstate>
     522:	d0 c1       	rjmp	.+928    	; 0x8c4 <ReadOrDisplay+0x494>
			}
			break;
		}
		default:
		{
			rdstate = start;
     524:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rdstate>
			break;
     528:	cd c1       	rjmp	.+922    	; 0x8c4 <ReadOrDisplay+0x494>
		}
	}	
	switch(rdstate)
     52a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <rdstate>
     52e:	83 30       	cpi	r24, 0x03	; 3
     530:	09 f4       	brne	.+2      	; 0x534 <ReadOrDisplay+0x104>
     532:	e0 c0       	rjmp	.+448    	; 0x6f4 <ReadOrDisplay+0x2c4>
     534:	85 30       	cpi	r24, 0x05	; 5
     536:	21 f0       	breq	.+8      	; 0x540 <ReadOrDisplay+0x110>
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	09 f0       	breq	.+2      	; 0x53e <ReadOrDisplay+0x10e>
     53c:	c3 c1       	rjmp	.+902    	; 0x8c4 <ReadOrDisplay+0x494>
     53e:	07 c0       	rjmp	.+14     	; 0x54e <ReadOrDisplay+0x11e>
			break;
		}
		case write1:
		{
			//LCD_ClearScreen();
			for(int i = 0; i < place; i++)
     540:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <place>
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	18 16       	cp	r1, r24
     548:	19 06       	cpc	r1, r25
     54a:	3c f1       	brlt	.+78     	; 0x59a <ReadOrDisplay+0x16a>
		{
			break;
		}
		case write:
		{
			key = GetKeypadKey();
     54c:	67 c0       	rjmp	.+206    	; 0x61c <ReadOrDisplay+0x1ec>
     54e:	d9 de       	rcall	.-590    	; 0x302 <GetKeypadKey>
     550:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <key>
			if(key !=  '\0' && key != '#' && key != 'A' && key != 'B' && key!= 'C' && key != 'D')
     554:	88 23       	and	r24, r24
     556:	c9 f0       	breq	.+50     	; 0x58a <ReadOrDisplay+0x15a>
     558:	83 32       	cpi	r24, 0x23	; 35
     55a:	b9 f0       	breq	.+46     	; 0x58a <ReadOrDisplay+0x15a>
     55c:	9f eb       	ldi	r25, 0xBF	; 191
     55e:	98 0f       	add	r25, r24
     560:	94 30       	cpi	r25, 0x04	; 4
			{
				LCD_WriteData(key);
     562:	98 f0       	brcs	.+38     	; 0x58a <ReadOrDisplay+0x15a>
     564:	ac de       	rcall	.-680    	; 0x2be <LCD_WriteData>
				if (key == '*')
     566:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <key>
     56a:	9a 32       	cpi	r25, 0x2A	; 42
     56c:	21 f4       	brne	.+8      	; 0x576 <ReadOrDisplay+0x146>
				{
					place = count;
     56e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <count>
     572:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <place>
				}
				number[count] = key;
     576:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <count>
     57a:	e8 2f       	mov	r30, r24
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	e6 59       	subi	r30, 0x96	; 150
     580:	fe 4f       	sbci	r31, 0xFE	; 254
     582:	90 83       	st	Z, r25
				count++;
     584:	8f 5f       	subi	r24, 0xFF	; 255
     586:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <count>
			}
			holder2 = place - 1;
     58a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <place>
     58e:	81 50       	subi	r24, 0x01	; 1
     590:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <holder2>
			holder = 0;
     594:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <holder>
			break;
     598:	95 c1       	rjmp	.+810    	; 0x8c4 <ReadOrDisplay+0x494>
     59a:	0a e6       	ldi	r16, 0x6A	; 106
		}
		case write1:
		{
			//LCD_ClearScreen();
			for(int i = 0; i < place; i++)
     59c:	11 e0       	ldi	r17, 0x01	; 1
     59e:	e1 2c       	mov	r14, r1
			{
				//LCD_WriteData(number[i]);
				holder = changetoInteger(number[i]);
     5a0:	f1 2c       	mov	r15, r1
     5a2:	f8 01       	movw	r30, r16
     5a4:	81 91       	ld	r24, Z+
     5a6:	8f 01       	movw	r16, r30
     5a8:	fa de       	rcall	.-524    	; 0x39e <changetoInteger>
     5aa:	c8 2f       	mov	r28, r24
     5ac:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <holder>
				num1 = holder*pow(10, holder2) + num1;
     5b0:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <holder2>
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	aa d2       	rcall	.+1364   	; 0xb10 <__floatunsisf>
     5bc:	9b 01       	movw	r18, r22
     5be:	ac 01       	movw	r20, r24
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	80 e2       	ldi	r24, 0x20	; 32
     5c6:	91 e4       	ldi	r25, 0x41	; 65
     5c8:	94 d3       	rcall	.+1832   	; 0xcf2 <pow>
     5ca:	4b 01       	movw	r8, r22
     5cc:	5c 01       	movw	r10, r24
     5ce:	6c 2f       	mov	r22, r28
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	9e d2       	rcall	.+1340   	; 0xb14 <__floatsisf>
     5d8:	a5 01       	movw	r20, r10
     5da:	94 01       	movw	r18, r8
     5dc:	27 d3       	rcall	.+1614   	; 0xc2c <__mulsf3>
     5de:	4b 01       	movw	r8, r22
     5e0:	5c 01       	movw	r10, r24
     5e2:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <num1>
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	93 d2       	rcall	.+1318   	; 0xb14 <__floatsisf>
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	c5 01       	movw	r24, r10
     5f4:	b4 01       	movw	r22, r8
     5f6:	8f d1       	rcall	.+798    	; 0x916 <__addsf3>
     5f8:	5f d2       	rcall	.+1214   	; 0xab8 <__fixunssfsi>
     5fa:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <num1>
				holder2--;
     5fe:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <holder2>
     602:	81 50       	subi	r24, 0x01	; 1
     604:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <holder2>
			break;
		}
		case write1:
		{
			//LCD_ClearScreen();
			for(int i = 0; i < place; i++)
     608:	ff ef       	ldi	r31, 0xFF	; 255
     60a:	ef 1a       	sub	r14, r31
     60c:	ff 0a       	sbc	r15, r31
     60e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <place>
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	e8 16       	cp	r14, r24
     616:	f9 06       	cpc	r15, r25
     618:	0c f4       	brge	.+2      	; 0x61c <ReadOrDisplay+0x1ec>
     61a:	c3 cf       	rjmp	.-122    	; 0x5a2 <ReadOrDisplay+0x172>
				holder = changetoInteger(number[i]);
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			//LCD_WriteData('.');
			holder2 = 1;
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <holder2>
			for(int j = place+1; j < count; j++)
     622:	7c 01       	movw	r14, r24
     624:	2f ef       	ldi	r18, 0xFF	; 255
     626:	e2 1a       	sub	r14, r18
     628:	f2 0a       	sbc	r15, r18
     62a:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <count>
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	e2 16       	cp	r14, r18
     632:	f3 06       	cpc	r15, r19
     634:	0c f0       	brlt	.+2      	; 0x638 <ReadOrDisplay+0x208>
     636:	40 c0       	rjmp	.+128    	; 0x6b8 <ReadOrDisplay+0x288>
     638:	8c 01       	movw	r16, r24
			{					//LCD_WriteData(number[j]);
				holder = changetoInteger(number[j]);
     63a:	05 59       	subi	r16, 0x95	; 149
     63c:	1e 4f       	sbci	r17, 0xFE	; 254
     63e:	f8 01       	movw	r30, r16
     640:	81 91       	ld	r24, Z+
     642:	8f 01       	movw	r16, r30
     644:	ac de       	rcall	.-680    	; 0x39e <changetoInteger>
     646:	c8 2f       	mov	r28, r24
				num2 = holder*pow(10, holder2) + num2;
     648:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <holder>
     64c:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <holder2>
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	5c d2       	rcall	.+1208   	; 0xb10 <__floatunsisf>
     658:	9b 01       	movw	r18, r22
     65a:	ac 01       	movw	r20, r24
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	80 e2       	ldi	r24, 0x20	; 32
     662:	91 e4       	ldi	r25, 0x41	; 65
     664:	46 d3       	rcall	.+1676   	; 0xcf2 <pow>
     666:	4b 01       	movw	r8, r22
     668:	5c 01       	movw	r10, r24
     66a:	6c 2f       	mov	r22, r28
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	50 d2       	rcall	.+1184   	; 0xb14 <__floatsisf>
     674:	a5 01       	movw	r20, r10
     676:	94 01       	movw	r18, r8
     678:	d9 d2       	rcall	.+1458   	; 0xc2c <__mulsf3>
     67a:	4b 01       	movw	r8, r22
     67c:	5c 01       	movw	r10, r24
     67e:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <num2>
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	45 d2       	rcall	.+1162   	; 0xb14 <__floatsisf>
     68a:	9b 01       	movw	r18, r22
     68c:	ac 01       	movw	r20, r24
     68e:	c5 01       	movw	r24, r10
     690:	b4 01       	movw	r22, r8
     692:	41 d1       	rcall	.+642    	; 0x916 <__addsf3>
     694:	11 d2       	rcall	.+1058   	; 0xab8 <__fixunssfsi>
     696:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <num2>
				holder2--;
     69a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <holder2>
     69e:	81 50       	subi	r24, 0x01	; 1
     6a0:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <holder2>
				num1 = holder*pow(10, holder2) + num1;
				holder2--;
			}
			//LCD_WriteData('.');
			holder2 = 1;
			for(int j = place+1; j < count; j++)
     6a4:	ff ef       	ldi	r31, 0xFF	; 255
     6a6:	ef 1a       	sub	r14, r31
     6a8:	ff 0a       	sbc	r15, r31
     6aa:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <count>
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	e8 16       	cp	r14, r24
     6b2:	f9 06       	cpc	r15, r25
				holder2--;
			}
			float n1 = (float) num1;
			float n2 = (float) num2;
			float dec = n1 + (n2/100);
			eeprom_write_float(3, dec);
     6b4:	0c f4       	brge	.+2      	; 0x6b8 <ReadOrDisplay+0x288>
     6b6:	c3 cf       	rjmp	.-122    	; 0x63e <ReadOrDisplay+0x20e>
     6b8:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <num2>
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	26 d2       	rcall	.+1100   	; 0xb10 <__floatunsisf>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	48 ec       	ldi	r20, 0xC8	; 200
     6ca:	52 e4       	ldi	r21, 0x42	; 66
     6cc:	88 d1       	rcall	.+784    	; 0x9de <__divsf3>
     6ce:	6b 01       	movw	r12, r22
     6d0:	7c 01       	movw	r14, r24
     6d2:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <num1>
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	19 d2       	rcall	.+1074   	; 0xb10 <__floatunsisf>
     6de:	9b 01       	movw	r18, r22
     6e0:	ac 01       	movw	r20, r24
     6e2:	c7 01       	movw	r24, r14
     6e4:	b6 01       	movw	r22, r12
     6e6:	17 d1       	rcall	.+558    	; 0x916 <__addsf3>
     6e8:	ab 01       	movw	r20, r22
     6ea:	bc 01       	movw	r22, r24
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	90 e0       	ldi	r25, 0x00	; 0
			break;
     6f0:	73 d4       	rcall	.+2278   	; 0xfd8 <eeprom_write_dword>
		}
		case display:
		{
			dec = eeprom_read_float(3);
     6f2:	e8 c0       	rjmp	.+464    	; 0x8c4 <ReadOrDisplay+0x494>
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	6a d4       	rcall	.+2260   	; 0xfce <eeprom_read_dword>
     6fa:	4b 01       	movw	r8, r22
     6fc:	5c 01       	movw	r10, r24
     6fe:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <dec>
     702:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <dec+0x1>
     706:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <dec+0x2>
     70a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <dec+0x3>
			decpart = (dec - (int)dec) * 100;
     70e:	cf d1       	rcall	.+926    	; 0xaae <__fixsfsi>
     710:	6b 01       	movw	r12, r22
     712:	7c 01       	movw	r14, r24
     714:	07 2e       	mov	r0, r23
     716:	00 0c       	add	r0, r0
     718:	88 0b       	sbc	r24, r24
     71a:	99 0b       	sbc	r25, r25
     71c:	fb d1       	rcall	.+1014   	; 0xb14 <__floatsisf>
     71e:	9b 01       	movw	r18, r22
     720:	ac 01       	movw	r20, r24
     722:	c5 01       	movw	r24, r10
     724:	b4 01       	movw	r22, r8
     726:	f6 d0       	rcall	.+492    	; 0x914 <__subsf3>
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	48 ec       	ldi	r20, 0xC8	; 200
     72e:	52 e4       	ldi	r21, 0x42	; 66
     730:	7d d2       	rcall	.+1274   	; 0xc2c <__mulsf3>
     732:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <decpart>
     736:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <decpart+0x1>
     73a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <decpart+0x2>
     73e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <decpart+0x3>
     742:	cc 2d       	mov	r28, r12
			int decVal = (int)decpart;
			int intVal = (int)dec;
			
			num1 = (unsigned char)intVal;
     744:	c0 92 67 01 	sts	0x0167, r12	; 0x800167 <num1>
     748:	b2 d1       	rcall	.+868    	; 0xaae <__fixsfsi>
			num2 = (unsigned char)decVal;
     74a:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <num2>
     74e:	c3 36       	cpi	r28, 0x63	; 99
			
			if(num1 >= 99)
     750:	18 f0       	brcs	.+6      	; 0x758 <ReadOrDisplay+0x328>
     752:	c3 94       	inc	r12
			{
				num1++;
     754:	c0 92 67 01 	sts	0x0167, r12	; 0x800167 <num1>
			}
			place = findHowManyB4Dec(num1);
     758:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <num1>
     75c:	5b de       	rcall	.-842    	; 0x414 <findHowManyB4Dec>
     75e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <place>
			
			holder2 = place - 1;
     762:	9f ef       	ldi	r25, 0xFF	; 255
     764:	98 0f       	add	r25, r24
     766:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <holder2>
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     76a:	88 23       	and	r24, r24
     76c:	09 f4       	brne	.+2      	; 0x770 <ReadOrDisplay+0x340>
     76e:	55 c0       	rjmp	.+170    	; 0x81a <ReadOrDisplay+0x3ea>
     770:	c0 e0       	ldi	r28, 0x00	; 0
			{
				holder3 = num1/(pow(10,holder2));
     772:	d0 e0       	ldi	r29, 0x00	; 0
     774:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <num1>
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	ca d1       	rcall	.+916    	; 0xb14 <__floatsisf>
     780:	6b 01       	movw	r12, r22
     782:	7c 01       	movw	r14, r24
     784:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <holder2>
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	c0 d1       	rcall	.+896    	; 0xb10 <__floatunsisf>
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	80 e2       	ldi	r24, 0x20	; 32
     79a:	91 e4       	ldi	r25, 0x41	; 65
     79c:	aa d2       	rcall	.+1364   	; 0xcf2 <pow>
     79e:	9b 01       	movw	r18, r22
     7a0:	ac 01       	movw	r20, r24
     7a2:	c7 01       	movw	r24, r14
     7a4:	b6 01       	movw	r22, r12
     7a6:	1b d1       	rcall	.+566    	; 0x9de <__divsf3>
     7a8:	87 d1       	rcall	.+782    	; 0xab8 <__fixunssfsi>
				num1 = num1 - (holder3 * pow(10, holder2));
     7aa:	16 2f       	mov	r17, r22
     7ac:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <num1>
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	ae d1       	rcall	.+860    	; 0xb14 <__floatsisf>
     7b8:	6b 01       	movw	r12, r22
     7ba:	7c 01       	movw	r14, r24
     7bc:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <holder2>
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	a4 d1       	rcall	.+840    	; 0xb10 <__floatunsisf>
     7c8:	9b 01       	movw	r18, r22
     7ca:	ac 01       	movw	r20, r24
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	80 e2       	ldi	r24, 0x20	; 32
     7d2:	91 e4       	ldi	r25, 0x41	; 65
     7d4:	8e d2       	rcall	.+1308   	; 0xcf2 <pow>
     7d6:	4b 01       	movw	r8, r22
     7d8:	5c 01       	movw	r10, r24
     7da:	61 2f       	mov	r22, r17
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	98 d1       	rcall	.+816    	; 0xb14 <__floatsisf>
     7e4:	a5 01       	movw	r20, r10
     7e6:	94 01       	movw	r18, r8
     7e8:	21 d2       	rcall	.+1090   	; 0xc2c <__mulsf3>
     7ea:	9b 01       	movw	r18, r22
     7ec:	ac 01       	movw	r20, r24
     7ee:	c7 01       	movw	r24, r14
     7f0:	b6 01       	movw	r22, r12
     7f2:	90 d0       	rcall	.+288    	; 0x914 <__subsf3>
     7f4:	61 d1       	rcall	.+706    	; 0xab8 <__fixunssfsi>
     7f6:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <num1>
     7fa:	81 2f       	mov	r24, r17
				LCD_WriteData(changetoChar(holder3));
     7fc:	ed dd       	rcall	.-1062   	; 0x3d8 <changetoChar>
     7fe:	5f dd       	rcall	.-1346   	; 0x2be <LCD_WriteData>
     800:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <holder2>
				holder2--;
     804:	81 50       	subi	r24, 0x01	; 1
     806:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <holder2>
			
			holder2 = place - 1;
			
			unsigned char holder3 = 0;
			
			for(int i = 0; i < place; i++)
     80a:	21 96       	adiw	r28, 0x01	; 1
     80c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <place>
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	c8 17       	cp	r28, r24
     814:	d9 07       	cpc	r29, r25
     816:	0c f4       	brge	.+2      	; 0x81a <ReadOrDisplay+0x3ea>
				holder3 = num1/(pow(10,holder2));
				num1 = num1 - (holder3 * pow(10, holder2));
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			holder2 = 1;
     818:	ad cf       	rjmp	.-166    	; 0x774 <ReadOrDisplay+0x344>
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <holder2>
			LCD_WriteData('.');
     820:	8e e2       	ldi	r24, 0x2E	; 46
     822:	4d dd       	rcall	.-1382   	; 0x2be <LCD_WriteData>
     824:	c2 e0       	ldi	r28, 0x02	; 2
			for(int i = 0; i < 2; i++)
			{
				holder3 = num2/(pow(10,holder2));
     826:	d0 e0       	ldi	r29, 0x00	; 0
     828:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <num2>
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	70 d1       	rcall	.+736    	; 0xb14 <__floatsisf>
     834:	6b 01       	movw	r12, r22
     836:	7c 01       	movw	r14, r24
     838:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <holder2>
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	66 d1       	rcall	.+716    	; 0xb10 <__floatunsisf>
     844:	9b 01       	movw	r18, r22
     846:	ac 01       	movw	r20, r24
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	80 e2       	ldi	r24, 0x20	; 32
     84e:	91 e4       	ldi	r25, 0x41	; 65
     850:	50 d2       	rcall	.+1184   	; 0xcf2 <pow>
     852:	9b 01       	movw	r18, r22
     854:	ac 01       	movw	r20, r24
     856:	c7 01       	movw	r24, r14
     858:	b6 01       	movw	r22, r12
     85a:	c1 d0       	rcall	.+386    	; 0x9de <__divsf3>
				num2 = num2 - (holder3 * pow(10, holder2));
     85c:	2d d1       	rcall	.+602    	; 0xab8 <__fixunssfsi>
     85e:	16 2f       	mov	r17, r22
     860:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <num2>
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	54 d1       	rcall	.+680    	; 0xb14 <__floatsisf>
     86c:	6b 01       	movw	r12, r22
     86e:	7c 01       	movw	r14, r24
     870:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <holder2>
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	4a d1       	rcall	.+660    	; 0xb10 <__floatunsisf>
     87c:	9b 01       	movw	r18, r22
     87e:	ac 01       	movw	r20, r24
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	80 e2       	ldi	r24, 0x20	; 32
     886:	91 e4       	ldi	r25, 0x41	; 65
     888:	34 d2       	rcall	.+1128   	; 0xcf2 <pow>
     88a:	4b 01       	movw	r8, r22
     88c:	5c 01       	movw	r10, r24
     88e:	61 2f       	mov	r22, r17
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	3e d1       	rcall	.+636    	; 0xb14 <__floatsisf>
     898:	a5 01       	movw	r20, r10
     89a:	94 01       	movw	r18, r8
     89c:	c7 d1       	rcall	.+910    	; 0xc2c <__mulsf3>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	c7 01       	movw	r24, r14
     8a4:	b6 01       	movw	r22, r12
     8a6:	36 d0       	rcall	.+108    	; 0x914 <__subsf3>
     8a8:	07 d1       	rcall	.+526    	; 0xab8 <__fixunssfsi>
     8aa:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <num2>
     8ae:	81 2f       	mov	r24, r17
     8b0:	93 dd       	rcall	.-1242   	; 0x3d8 <changetoChar>
     8b2:	05 dd       	rcall	.-1526   	; 0x2be <LCD_WriteData>
     8b4:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <holder2>
				LCD_WriteData(changetoChar(holder3));
     8b8:	81 50       	subi	r24, 0x01	; 1
     8ba:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <holder2>
     8be:	21 97       	sbiw	r28, 0x01	; 1
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <ReadOrDisplay+0x494>
				holder2--;
     8c2:	b2 cf       	rjmp	.-156    	; 0x828 <ReadOrDisplay+0x3f8>
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
				LCD_WriteData(changetoChar(holder3));
				holder2--;
			}
			holder2 = 1;
			LCD_WriteData('.');
			for(int i = 0; i < 2; i++)
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
		default:
		{
			break;
		}
	}
}
     8d2:	cf 90       	pop	r12
     8d4:	bf 90       	pop	r11
     8d6:	af 90       	pop	r10
     8d8:	9f 90       	pop	r9
     8da:	8f 90       	pop	r8
     8dc:	08 95       	ret

000008de <main>:
     8de:	8f ef       	ldi	r24, 0xFF	; 255
     8e0:	81 b9       	out	0x01, r24	; 1
     8e2:	12 b8       	out	0x02, r1	; 2
     8e4:	8a b9       	out	0x0a, r24	; 10
     8e6:	1b b8       	out	0x0b, r1	; 11
     8e8:	80 ef       	ldi	r24, 0xF0	; 240
     8ea:	87 b9       	out	0x07, r24	; 7
{
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
	DDRD = 0xFF; PORTD = 0x00;
	DDRC = 0xF0; PORTC = 0x0F;
     8ec:	8f e0       	ldi	r24, 0x0F	; 15
     8ee:	88 b9       	out	0x08, r24	; 8
	// . . . etc
	
	// Period for the tasks
	
	// Set the timer and turn it on
	TimerSet(200);
     8f0:	68 ec       	ldi	r22, 0xC8	; 200
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	3b dc       	rcall	.-1930   	; 0x170 <TimerSet>
	TimerOn();
     8fa:	4b dc       	rcall	.-1898   	; 0x192 <TimerOn>
	
	LCD_init();
     8fc:	d1 dc       	rcall	.-1630   	; 0x2a0 <LCD_init>
     8fe:	c5 dc       	rcall	.-1654   	; 0x28a <LCD_ClearScreen>
	LCD_ClearScreen();
     900:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rdstate>
	
	rdstate = start;
     904:	95 dd       	rcall	.-1238   	; 0x430 <ReadOrDisplay>
	while(1) {
		ReadOrDisplay();
     906:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <TimerFlag>
		while(!TimerFlag);
     90a:	88 23       	and	r24, r24
     90c:	e1 f3       	breq	.-8      	; 0x906 <main+0x28>
     90e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <TimerFlag>
		TimerFlag = 0;
     912:	f8 cf       	rjmp	.-16     	; 0x904 <main+0x26>

00000914 <__subsf3>:
     914:	50 58       	subi	r21, 0x80	; 128

00000916 <__addsf3>:
	}
     916:	bb 27       	eor	r27, r27
     918:	aa 27       	eor	r26, r26
     91a:	0e d0       	rcall	.+28     	; 0x938 <__addsf3x>
     91c:	4d c1       	rjmp	.+666    	; 0xbb8 <__fp_round>
     91e:	3e d1       	rcall	.+636    	; 0xb9c <__fp_pscA>
     920:	30 f0       	brcs	.+12     	; 0x92e <__addsf3+0x18>
     922:	43 d1       	rcall	.+646    	; 0xbaa <__fp_pscB>
     924:	20 f0       	brcs	.+8      	; 0x92e <__addsf3+0x18>
     926:	31 f4       	brne	.+12     	; 0x934 <__addsf3+0x1e>
     928:	9f 3f       	cpi	r25, 0xFF	; 255
     92a:	11 f4       	brne	.+4      	; 0x930 <__addsf3+0x1a>
     92c:	1e f4       	brtc	.+6      	; 0x934 <__addsf3+0x1e>
     92e:	33 c1       	rjmp	.+614    	; 0xb96 <__fp_nan>
     930:	0e f4       	brtc	.+2      	; 0x934 <__addsf3+0x1e>
     932:	e0 95       	com	r30
     934:	e7 fb       	bst	r30, 7
     936:	29 c1       	rjmp	.+594    	; 0xb8a <__fp_inf>

00000938 <__addsf3x>:
     938:	e9 2f       	mov	r30, r25
     93a:	4f d1       	rcall	.+670    	; 0xbda <__fp_split3>
     93c:	80 f3       	brcs	.-32     	; 0x91e <__addsf3+0x8>
     93e:	ba 17       	cp	r27, r26
     940:	62 07       	cpc	r22, r18
     942:	73 07       	cpc	r23, r19
     944:	84 07       	cpc	r24, r20
     946:	95 07       	cpc	r25, r21
     948:	18 f0       	brcs	.+6      	; 0x950 <__addsf3x+0x18>
     94a:	71 f4       	brne	.+28     	; 0x968 <__addsf3x+0x30>
     94c:	9e f5       	brtc	.+102    	; 0x9b4 <__addsf3x+0x7c>
     94e:	67 c1       	rjmp	.+718    	; 0xc1e <__fp_zero>
     950:	0e f4       	brtc	.+2      	; 0x954 <__addsf3x+0x1c>
     952:	e0 95       	com	r30
     954:	0b 2e       	mov	r0, r27
     956:	ba 2f       	mov	r27, r26
     958:	a0 2d       	mov	r26, r0
     95a:	0b 01       	movw	r0, r22
     95c:	b9 01       	movw	r22, r18
     95e:	90 01       	movw	r18, r0
     960:	0c 01       	movw	r0, r24
     962:	ca 01       	movw	r24, r20
     964:	a0 01       	movw	r20, r0
     966:	11 24       	eor	r1, r1
     968:	ff 27       	eor	r31, r31
     96a:	59 1b       	sub	r21, r25
     96c:	99 f0       	breq	.+38     	; 0x994 <__addsf3x+0x5c>
     96e:	59 3f       	cpi	r21, 0xF9	; 249
     970:	50 f4       	brcc	.+20     	; 0x986 <__addsf3x+0x4e>
     972:	50 3e       	cpi	r21, 0xE0	; 224
     974:	68 f1       	brcs	.+90     	; 0x9d0 <__addsf3x+0x98>
     976:	1a 16       	cp	r1, r26
     978:	f0 40       	sbci	r31, 0x00	; 0
     97a:	a2 2f       	mov	r26, r18
     97c:	23 2f       	mov	r18, r19
     97e:	34 2f       	mov	r19, r20
     980:	44 27       	eor	r20, r20
     982:	58 5f       	subi	r21, 0xF8	; 248
     984:	f3 cf       	rjmp	.-26     	; 0x96c <__addsf3x+0x34>
     986:	46 95       	lsr	r20
     988:	37 95       	ror	r19
     98a:	27 95       	ror	r18
     98c:	a7 95       	ror	r26
     98e:	f0 40       	sbci	r31, 0x00	; 0
     990:	53 95       	inc	r21
     992:	c9 f7       	brne	.-14     	; 0x986 <__addsf3x+0x4e>
     994:	7e f4       	brtc	.+30     	; 0x9b4 <__addsf3x+0x7c>
     996:	1f 16       	cp	r1, r31
     998:	ba 0b       	sbc	r27, r26
     99a:	62 0b       	sbc	r22, r18
     99c:	73 0b       	sbc	r23, r19
     99e:	84 0b       	sbc	r24, r20
     9a0:	ba f0       	brmi	.+46     	; 0x9d0 <__addsf3x+0x98>
     9a2:	91 50       	subi	r25, 0x01	; 1
     9a4:	a1 f0       	breq	.+40     	; 0x9ce <__addsf3x+0x96>
     9a6:	ff 0f       	add	r31, r31
     9a8:	bb 1f       	adc	r27, r27
     9aa:	66 1f       	adc	r22, r22
     9ac:	77 1f       	adc	r23, r23
     9ae:	88 1f       	adc	r24, r24
     9b0:	c2 f7       	brpl	.-16     	; 0x9a2 <__addsf3x+0x6a>
     9b2:	0e c0       	rjmp	.+28     	; 0x9d0 <__addsf3x+0x98>
     9b4:	ba 0f       	add	r27, r26
     9b6:	62 1f       	adc	r22, r18
     9b8:	73 1f       	adc	r23, r19
     9ba:	84 1f       	adc	r24, r20
     9bc:	48 f4       	brcc	.+18     	; 0x9d0 <__addsf3x+0x98>
     9be:	87 95       	ror	r24
     9c0:	77 95       	ror	r23
     9c2:	67 95       	ror	r22
     9c4:	b7 95       	ror	r27
     9c6:	f7 95       	ror	r31
     9c8:	9e 3f       	cpi	r25, 0xFE	; 254
     9ca:	08 f0       	brcs	.+2      	; 0x9ce <__addsf3x+0x96>
     9cc:	b3 cf       	rjmp	.-154    	; 0x934 <__addsf3+0x1e>
     9ce:	93 95       	inc	r25
     9d0:	88 0f       	add	r24, r24
     9d2:	08 f0       	brcs	.+2      	; 0x9d6 <__addsf3x+0x9e>
     9d4:	99 27       	eor	r25, r25
     9d6:	ee 0f       	add	r30, r30
     9d8:	97 95       	ror	r25
     9da:	87 95       	ror	r24
     9dc:	08 95       	ret

000009de <__divsf3>:
     9de:	0c d0       	rcall	.+24     	; 0x9f8 <__divsf3x>
     9e0:	eb c0       	rjmp	.+470    	; 0xbb8 <__fp_round>
     9e2:	e3 d0       	rcall	.+454    	; 0xbaa <__fp_pscB>
     9e4:	40 f0       	brcs	.+16     	; 0x9f6 <__divsf3+0x18>
     9e6:	da d0       	rcall	.+436    	; 0xb9c <__fp_pscA>
     9e8:	30 f0       	brcs	.+12     	; 0x9f6 <__divsf3+0x18>
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <__divsf3+0x16>
     9ec:	5f 3f       	cpi	r21, 0xFF	; 255
     9ee:	19 f0       	breq	.+6      	; 0x9f6 <__divsf3+0x18>
     9f0:	cc c0       	rjmp	.+408    	; 0xb8a <__fp_inf>
     9f2:	51 11       	cpse	r21, r1
     9f4:	15 c1       	rjmp	.+554    	; 0xc20 <__fp_szero>
     9f6:	cf c0       	rjmp	.+414    	; 0xb96 <__fp_nan>

000009f8 <__divsf3x>:
     9f8:	f0 d0       	rcall	.+480    	; 0xbda <__fp_split3>
     9fa:	98 f3       	brcs	.-26     	; 0x9e2 <__divsf3+0x4>

000009fc <__divsf3_pse>:
     9fc:	99 23       	and	r25, r25
     9fe:	c9 f3       	breq	.-14     	; 0x9f2 <__divsf3+0x14>
     a00:	55 23       	and	r21, r21
     a02:	b1 f3       	breq	.-20     	; 0x9f0 <__divsf3+0x12>
     a04:	95 1b       	sub	r25, r21
     a06:	55 0b       	sbc	r21, r21
     a08:	bb 27       	eor	r27, r27
     a0a:	aa 27       	eor	r26, r26
     a0c:	62 17       	cp	r22, r18
     a0e:	73 07       	cpc	r23, r19
     a10:	84 07       	cpc	r24, r20
     a12:	38 f0       	brcs	.+14     	; 0xa22 <__divsf3_pse+0x26>
     a14:	9f 5f       	subi	r25, 0xFF	; 255
     a16:	5f 4f       	sbci	r21, 0xFF	; 255
     a18:	22 0f       	add	r18, r18
     a1a:	33 1f       	adc	r19, r19
     a1c:	44 1f       	adc	r20, r20
     a1e:	aa 1f       	adc	r26, r26
     a20:	a9 f3       	breq	.-22     	; 0xa0c <__divsf3_pse+0x10>
     a22:	33 d0       	rcall	.+102    	; 0xa8a <__divsf3_pse+0x8e>
     a24:	0e 2e       	mov	r0, r30
     a26:	3a f0       	brmi	.+14     	; 0xa36 <__divsf3_pse+0x3a>
     a28:	e0 e8       	ldi	r30, 0x80	; 128
     a2a:	30 d0       	rcall	.+96     	; 0xa8c <__divsf3_pse+0x90>
     a2c:	91 50       	subi	r25, 0x01	; 1
     a2e:	50 40       	sbci	r21, 0x00	; 0
     a30:	e6 95       	lsr	r30
     a32:	00 1c       	adc	r0, r0
     a34:	ca f7       	brpl	.-14     	; 0xa28 <__divsf3_pse+0x2c>
     a36:	29 d0       	rcall	.+82     	; 0xa8a <__divsf3_pse+0x8e>
     a38:	fe 2f       	mov	r31, r30
     a3a:	27 d0       	rcall	.+78     	; 0xa8a <__divsf3_pse+0x8e>
     a3c:	66 0f       	add	r22, r22
     a3e:	77 1f       	adc	r23, r23
     a40:	88 1f       	adc	r24, r24
     a42:	bb 1f       	adc	r27, r27
     a44:	26 17       	cp	r18, r22
     a46:	37 07       	cpc	r19, r23
     a48:	48 07       	cpc	r20, r24
     a4a:	ab 07       	cpc	r26, r27
     a4c:	b0 e8       	ldi	r27, 0x80	; 128
     a4e:	09 f0       	breq	.+2      	; 0xa52 <__divsf3_pse+0x56>
     a50:	bb 0b       	sbc	r27, r27
     a52:	80 2d       	mov	r24, r0
     a54:	bf 01       	movw	r22, r30
     a56:	ff 27       	eor	r31, r31
     a58:	93 58       	subi	r25, 0x83	; 131
     a5a:	5f 4f       	sbci	r21, 0xFF	; 255
     a5c:	2a f0       	brmi	.+10     	; 0xa68 <__divsf3_pse+0x6c>
     a5e:	9e 3f       	cpi	r25, 0xFE	; 254
     a60:	51 05       	cpc	r21, r1
     a62:	68 f0       	brcs	.+26     	; 0xa7e <__divsf3_pse+0x82>
     a64:	92 c0       	rjmp	.+292    	; 0xb8a <__fp_inf>
     a66:	dc c0       	rjmp	.+440    	; 0xc20 <__fp_szero>
     a68:	5f 3f       	cpi	r21, 0xFF	; 255
     a6a:	ec f3       	brlt	.-6      	; 0xa66 <__divsf3_pse+0x6a>
     a6c:	98 3e       	cpi	r25, 0xE8	; 232
     a6e:	dc f3       	brlt	.-10     	; 0xa66 <__divsf3_pse+0x6a>
     a70:	86 95       	lsr	r24
     a72:	77 95       	ror	r23
     a74:	67 95       	ror	r22
     a76:	b7 95       	ror	r27
     a78:	f7 95       	ror	r31
     a7a:	9f 5f       	subi	r25, 0xFF	; 255
     a7c:	c9 f7       	brne	.-14     	; 0xa70 <__divsf3_pse+0x74>
     a7e:	88 0f       	add	r24, r24
     a80:	91 1d       	adc	r25, r1
     a82:	96 95       	lsr	r25
     a84:	87 95       	ror	r24
     a86:	97 f9       	bld	r25, 7
     a88:	08 95       	ret
     a8a:	e1 e0       	ldi	r30, 0x01	; 1
     a8c:	66 0f       	add	r22, r22
     a8e:	77 1f       	adc	r23, r23
     a90:	88 1f       	adc	r24, r24
     a92:	bb 1f       	adc	r27, r27
     a94:	62 17       	cp	r22, r18
     a96:	73 07       	cpc	r23, r19
     a98:	84 07       	cpc	r24, r20
     a9a:	ba 07       	cpc	r27, r26
     a9c:	20 f0       	brcs	.+8      	; 0xaa6 <__divsf3_pse+0xaa>
     a9e:	62 1b       	sub	r22, r18
     aa0:	73 0b       	sbc	r23, r19
     aa2:	84 0b       	sbc	r24, r20
     aa4:	ba 0b       	sbc	r27, r26
     aa6:	ee 1f       	adc	r30, r30
     aa8:	88 f7       	brcc	.-30     	; 0xa8c <__divsf3_pse+0x90>
     aaa:	e0 95       	com	r30
     aac:	08 95       	ret

00000aae <__fixsfsi>:
     aae:	04 d0       	rcall	.+8      	; 0xab8 <__fixunssfsi>
     ab0:	68 94       	set
     ab2:	b1 11       	cpse	r27, r1
     ab4:	b5 c0       	rjmp	.+362    	; 0xc20 <__fp_szero>
     ab6:	08 95       	ret

00000ab8 <__fixunssfsi>:
     ab8:	98 d0       	rcall	.+304    	; 0xbea <__fp_splitA>
     aba:	88 f0       	brcs	.+34     	; 0xade <__fixunssfsi+0x26>
     abc:	9f 57       	subi	r25, 0x7F	; 127
     abe:	90 f0       	brcs	.+36     	; 0xae4 <__fixunssfsi+0x2c>
     ac0:	b9 2f       	mov	r27, r25
     ac2:	99 27       	eor	r25, r25
     ac4:	b7 51       	subi	r27, 0x17	; 23
     ac6:	a0 f0       	brcs	.+40     	; 0xaf0 <__fixunssfsi+0x38>
     ac8:	d1 f0       	breq	.+52     	; 0xafe <__fixunssfsi+0x46>
     aca:	66 0f       	add	r22, r22
     acc:	77 1f       	adc	r23, r23
     ace:	88 1f       	adc	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	1a f0       	brmi	.+6      	; 0xada <__fixunssfsi+0x22>
     ad4:	ba 95       	dec	r27
     ad6:	c9 f7       	brne	.-14     	; 0xaca <__fixunssfsi+0x12>
     ad8:	12 c0       	rjmp	.+36     	; 0xafe <__fixunssfsi+0x46>
     ada:	b1 30       	cpi	r27, 0x01	; 1
     adc:	81 f0       	breq	.+32     	; 0xafe <__fixunssfsi+0x46>
     ade:	9f d0       	rcall	.+318    	; 0xc1e <__fp_zero>
     ae0:	b1 e0       	ldi	r27, 0x01	; 1
     ae2:	08 95       	ret
     ae4:	9c c0       	rjmp	.+312    	; 0xc1e <__fp_zero>
     ae6:	67 2f       	mov	r22, r23
     ae8:	78 2f       	mov	r23, r24
     aea:	88 27       	eor	r24, r24
     aec:	b8 5f       	subi	r27, 0xF8	; 248
     aee:	39 f0       	breq	.+14     	; 0xafe <__fixunssfsi+0x46>
     af0:	b9 3f       	cpi	r27, 0xF9	; 249
     af2:	cc f3       	brlt	.-14     	; 0xae6 <__fixunssfsi+0x2e>
     af4:	86 95       	lsr	r24
     af6:	77 95       	ror	r23
     af8:	67 95       	ror	r22
     afa:	b3 95       	inc	r27
     afc:	d9 f7       	brne	.-10     	; 0xaf4 <__fixunssfsi+0x3c>
     afe:	3e f4       	brtc	.+14     	; 0xb0e <__fixunssfsi+0x56>
     b00:	90 95       	com	r25
     b02:	80 95       	com	r24
     b04:	70 95       	com	r23
     b06:	61 95       	neg	r22
     b08:	7f 4f       	sbci	r23, 0xFF	; 255
     b0a:	8f 4f       	sbci	r24, 0xFF	; 255
     b0c:	9f 4f       	sbci	r25, 0xFF	; 255
     b0e:	08 95       	ret

00000b10 <__floatunsisf>:
     b10:	e8 94       	clt
     b12:	09 c0       	rjmp	.+18     	; 0xb26 <__floatsisf+0x12>

00000b14 <__floatsisf>:
     b14:	97 fb       	bst	r25, 7
     b16:	3e f4       	brtc	.+14     	; 0xb26 <__floatsisf+0x12>
     b18:	90 95       	com	r25
     b1a:	80 95       	com	r24
     b1c:	70 95       	com	r23
     b1e:	61 95       	neg	r22
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	8f 4f       	sbci	r24, 0xFF	; 255
     b24:	9f 4f       	sbci	r25, 0xFF	; 255
     b26:	99 23       	and	r25, r25
     b28:	a9 f0       	breq	.+42     	; 0xb54 <__floatsisf+0x40>
     b2a:	f9 2f       	mov	r31, r25
     b2c:	96 e9       	ldi	r25, 0x96	; 150
     b2e:	bb 27       	eor	r27, r27
     b30:	93 95       	inc	r25
     b32:	f6 95       	lsr	r31
     b34:	87 95       	ror	r24
     b36:	77 95       	ror	r23
     b38:	67 95       	ror	r22
     b3a:	b7 95       	ror	r27
     b3c:	f1 11       	cpse	r31, r1
     b3e:	f8 cf       	rjmp	.-16     	; 0xb30 <__floatsisf+0x1c>
     b40:	fa f4       	brpl	.+62     	; 0xb80 <__floatsisf+0x6c>
     b42:	bb 0f       	add	r27, r27
     b44:	11 f4       	brne	.+4      	; 0xb4a <__floatsisf+0x36>
     b46:	60 ff       	sbrs	r22, 0
     b48:	1b c0       	rjmp	.+54     	; 0xb80 <__floatsisf+0x6c>
     b4a:	6f 5f       	subi	r22, 0xFF	; 255
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	8f 4f       	sbci	r24, 0xFF	; 255
     b50:	9f 4f       	sbci	r25, 0xFF	; 255
     b52:	16 c0       	rjmp	.+44     	; 0xb80 <__floatsisf+0x6c>
     b54:	88 23       	and	r24, r24
     b56:	11 f0       	breq	.+4      	; 0xb5c <__floatsisf+0x48>
     b58:	96 e9       	ldi	r25, 0x96	; 150
     b5a:	11 c0       	rjmp	.+34     	; 0xb7e <__floatsisf+0x6a>
     b5c:	77 23       	and	r23, r23
     b5e:	21 f0       	breq	.+8      	; 0xb68 <__floatsisf+0x54>
     b60:	9e e8       	ldi	r25, 0x8E	; 142
     b62:	87 2f       	mov	r24, r23
     b64:	76 2f       	mov	r23, r22
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <__floatsisf+0x5e>
     b68:	66 23       	and	r22, r22
     b6a:	71 f0       	breq	.+28     	; 0xb88 <__floatsisf+0x74>
     b6c:	96 e8       	ldi	r25, 0x86	; 134
     b6e:	86 2f       	mov	r24, r22
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	2a f0       	brmi	.+10     	; 0xb80 <__floatsisf+0x6c>
     b76:	9a 95       	dec	r25
     b78:	66 0f       	add	r22, r22
     b7a:	77 1f       	adc	r23, r23
     b7c:	88 1f       	adc	r24, r24
     b7e:	da f7       	brpl	.-10     	; 0xb76 <__floatsisf+0x62>
     b80:	88 0f       	add	r24, r24
     b82:	96 95       	lsr	r25
     b84:	87 95       	ror	r24
     b86:	97 f9       	bld	r25, 7
     b88:	08 95       	ret

00000b8a <__fp_inf>:
     b8a:	97 f9       	bld	r25, 7
     b8c:	9f 67       	ori	r25, 0x7F	; 127
     b8e:	80 e8       	ldi	r24, 0x80	; 128
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	08 95       	ret

00000b96 <__fp_nan>:
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	80 ec       	ldi	r24, 0xC0	; 192
     b9a:	08 95       	ret

00000b9c <__fp_pscA>:
     b9c:	00 24       	eor	r0, r0
     b9e:	0a 94       	dec	r0
     ba0:	16 16       	cp	r1, r22
     ba2:	17 06       	cpc	r1, r23
     ba4:	18 06       	cpc	r1, r24
     ba6:	09 06       	cpc	r0, r25
     ba8:	08 95       	ret

00000baa <__fp_pscB>:
     baa:	00 24       	eor	r0, r0
     bac:	0a 94       	dec	r0
     bae:	12 16       	cp	r1, r18
     bb0:	13 06       	cpc	r1, r19
     bb2:	14 06       	cpc	r1, r20
     bb4:	05 06       	cpc	r0, r21
     bb6:	08 95       	ret

00000bb8 <__fp_round>:
     bb8:	09 2e       	mov	r0, r25
     bba:	03 94       	inc	r0
     bbc:	00 0c       	add	r0, r0
     bbe:	11 f4       	brne	.+4      	; 0xbc4 <__fp_round+0xc>
     bc0:	88 23       	and	r24, r24
     bc2:	52 f0       	brmi	.+20     	; 0xbd8 <__fp_round+0x20>
     bc4:	bb 0f       	add	r27, r27
     bc6:	40 f4       	brcc	.+16     	; 0xbd8 <__fp_round+0x20>
     bc8:	bf 2b       	or	r27, r31
     bca:	11 f4       	brne	.+4      	; 0xbd0 <__fp_round+0x18>
     bcc:	60 ff       	sbrs	r22, 0
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__fp_round+0x20>
     bd0:	6f 5f       	subi	r22, 0xFF	; 255
     bd2:	7f 4f       	sbci	r23, 0xFF	; 255
     bd4:	8f 4f       	sbci	r24, 0xFF	; 255
     bd6:	9f 4f       	sbci	r25, 0xFF	; 255
     bd8:	08 95       	ret

00000bda <__fp_split3>:
     bda:	57 fd       	sbrc	r21, 7
     bdc:	90 58       	subi	r25, 0x80	; 128
     bde:	44 0f       	add	r20, r20
     be0:	55 1f       	adc	r21, r21
     be2:	59 f0       	breq	.+22     	; 0xbfa <__fp_splitA+0x10>
     be4:	5f 3f       	cpi	r21, 0xFF	; 255
     be6:	71 f0       	breq	.+28     	; 0xc04 <__fp_splitA+0x1a>
     be8:	47 95       	ror	r20

00000bea <__fp_splitA>:
     bea:	88 0f       	add	r24, r24
     bec:	97 fb       	bst	r25, 7
     bee:	99 1f       	adc	r25, r25
     bf0:	61 f0       	breq	.+24     	; 0xc0a <__fp_splitA+0x20>
     bf2:	9f 3f       	cpi	r25, 0xFF	; 255
     bf4:	79 f0       	breq	.+30     	; 0xc14 <__fp_splitA+0x2a>
     bf6:	87 95       	ror	r24
     bf8:	08 95       	ret
     bfa:	12 16       	cp	r1, r18
     bfc:	13 06       	cpc	r1, r19
     bfe:	14 06       	cpc	r1, r20
     c00:	55 1f       	adc	r21, r21
     c02:	f2 cf       	rjmp	.-28     	; 0xbe8 <__fp_split3+0xe>
     c04:	46 95       	lsr	r20
     c06:	f1 df       	rcall	.-30     	; 0xbea <__fp_splitA>
     c08:	08 c0       	rjmp	.+16     	; 0xc1a <__fp_splitA+0x30>
     c0a:	16 16       	cp	r1, r22
     c0c:	17 06       	cpc	r1, r23
     c0e:	18 06       	cpc	r1, r24
     c10:	99 1f       	adc	r25, r25
     c12:	f1 cf       	rjmp	.-30     	; 0xbf6 <__fp_splitA+0xc>
     c14:	86 95       	lsr	r24
     c16:	71 05       	cpc	r23, r1
     c18:	61 05       	cpc	r22, r1
     c1a:	08 94       	sec
     c1c:	08 95       	ret

00000c1e <__fp_zero>:
     c1e:	e8 94       	clt

00000c20 <__fp_szero>:
     c20:	bb 27       	eor	r27, r27
     c22:	66 27       	eor	r22, r22
     c24:	77 27       	eor	r23, r23
     c26:	cb 01       	movw	r24, r22
     c28:	97 f9       	bld	r25, 7
     c2a:	08 95       	ret

00000c2c <__mulsf3>:
     c2c:	0b d0       	rcall	.+22     	; 0xc44 <__mulsf3x>
     c2e:	c4 cf       	rjmp	.-120    	; 0xbb8 <__fp_round>
     c30:	b5 df       	rcall	.-150    	; 0xb9c <__fp_pscA>
     c32:	28 f0       	brcs	.+10     	; 0xc3e <__mulsf3+0x12>
     c34:	ba df       	rcall	.-140    	; 0xbaa <__fp_pscB>
     c36:	18 f0       	brcs	.+6      	; 0xc3e <__mulsf3+0x12>
     c38:	95 23       	and	r25, r21
     c3a:	09 f0       	breq	.+2      	; 0xc3e <__mulsf3+0x12>
     c3c:	a6 cf       	rjmp	.-180    	; 0xb8a <__fp_inf>
     c3e:	ab cf       	rjmp	.-170    	; 0xb96 <__fp_nan>
     c40:	11 24       	eor	r1, r1
     c42:	ee cf       	rjmp	.-36     	; 0xc20 <__fp_szero>

00000c44 <__mulsf3x>:
     c44:	ca df       	rcall	.-108    	; 0xbda <__fp_split3>
     c46:	a0 f3       	brcs	.-24     	; 0xc30 <__mulsf3+0x4>

00000c48 <__mulsf3_pse>:
     c48:	95 9f       	mul	r25, r21
     c4a:	d1 f3       	breq	.-12     	; 0xc40 <__mulsf3+0x14>
     c4c:	95 0f       	add	r25, r21
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	55 1f       	adc	r21, r21
     c52:	62 9f       	mul	r22, r18
     c54:	f0 01       	movw	r30, r0
     c56:	72 9f       	mul	r23, r18
     c58:	bb 27       	eor	r27, r27
     c5a:	f0 0d       	add	r31, r0
     c5c:	b1 1d       	adc	r27, r1
     c5e:	63 9f       	mul	r22, r19
     c60:	aa 27       	eor	r26, r26
     c62:	f0 0d       	add	r31, r0
     c64:	b1 1d       	adc	r27, r1
     c66:	aa 1f       	adc	r26, r26
     c68:	64 9f       	mul	r22, r20
     c6a:	66 27       	eor	r22, r22
     c6c:	b0 0d       	add	r27, r0
     c6e:	a1 1d       	adc	r26, r1
     c70:	66 1f       	adc	r22, r22
     c72:	82 9f       	mul	r24, r18
     c74:	22 27       	eor	r18, r18
     c76:	b0 0d       	add	r27, r0
     c78:	a1 1d       	adc	r26, r1
     c7a:	62 1f       	adc	r22, r18
     c7c:	73 9f       	mul	r23, r19
     c7e:	b0 0d       	add	r27, r0
     c80:	a1 1d       	adc	r26, r1
     c82:	62 1f       	adc	r22, r18
     c84:	83 9f       	mul	r24, r19
     c86:	a0 0d       	add	r26, r0
     c88:	61 1d       	adc	r22, r1
     c8a:	22 1f       	adc	r18, r18
     c8c:	74 9f       	mul	r23, r20
     c8e:	33 27       	eor	r19, r19
     c90:	a0 0d       	add	r26, r0
     c92:	61 1d       	adc	r22, r1
     c94:	23 1f       	adc	r18, r19
     c96:	84 9f       	mul	r24, r20
     c98:	60 0d       	add	r22, r0
     c9a:	21 1d       	adc	r18, r1
     c9c:	82 2f       	mov	r24, r18
     c9e:	76 2f       	mov	r23, r22
     ca0:	6a 2f       	mov	r22, r26
     ca2:	11 24       	eor	r1, r1
     ca4:	9f 57       	subi	r25, 0x7F	; 127
     ca6:	50 40       	sbci	r21, 0x00	; 0
     ca8:	8a f0       	brmi	.+34     	; 0xccc <__mulsf3_pse+0x84>
     caa:	e1 f0       	breq	.+56     	; 0xce4 <__mulsf3_pse+0x9c>
     cac:	88 23       	and	r24, r24
     cae:	4a f0       	brmi	.+18     	; 0xcc2 <__mulsf3_pse+0x7a>
     cb0:	ee 0f       	add	r30, r30
     cb2:	ff 1f       	adc	r31, r31
     cb4:	bb 1f       	adc	r27, r27
     cb6:	66 1f       	adc	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	88 1f       	adc	r24, r24
     cbc:	91 50       	subi	r25, 0x01	; 1
     cbe:	50 40       	sbci	r21, 0x00	; 0
     cc0:	a9 f7       	brne	.-22     	; 0xcac <__mulsf3_pse+0x64>
     cc2:	9e 3f       	cpi	r25, 0xFE	; 254
     cc4:	51 05       	cpc	r21, r1
     cc6:	70 f0       	brcs	.+28     	; 0xce4 <__mulsf3_pse+0x9c>
     cc8:	60 cf       	rjmp	.-320    	; 0xb8a <__fp_inf>
     cca:	aa cf       	rjmp	.-172    	; 0xc20 <__fp_szero>
     ccc:	5f 3f       	cpi	r21, 0xFF	; 255
     cce:	ec f3       	brlt	.-6      	; 0xcca <__mulsf3_pse+0x82>
     cd0:	98 3e       	cpi	r25, 0xE8	; 232
     cd2:	dc f3       	brlt	.-10     	; 0xcca <__mulsf3_pse+0x82>
     cd4:	86 95       	lsr	r24
     cd6:	77 95       	ror	r23
     cd8:	67 95       	ror	r22
     cda:	b7 95       	ror	r27
     cdc:	f7 95       	ror	r31
     cde:	e7 95       	ror	r30
     ce0:	9f 5f       	subi	r25, 0xFF	; 255
     ce2:	c1 f7       	brne	.-16     	; 0xcd4 <__mulsf3_pse+0x8c>
     ce4:	fe 2b       	or	r31, r30
     ce6:	88 0f       	add	r24, r24
     ce8:	91 1d       	adc	r25, r1
     cea:	96 95       	lsr	r25
     cec:	87 95       	ror	r24
     cee:	97 f9       	bld	r25, 7
     cf0:	08 95       	ret

00000cf2 <pow>:
     cf2:	fa 01       	movw	r30, r20
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	30 96       	adiw	r30, 0x00	; 0
     cfa:	21 05       	cpc	r18, r1
     cfc:	31 05       	cpc	r19, r1
     cfe:	99 f1       	breq	.+102    	; 0xd66 <pow+0x74>
     d00:	61 15       	cp	r22, r1
     d02:	71 05       	cpc	r23, r1
     d04:	61 f4       	brne	.+24     	; 0xd1e <pow+0x2c>
     d06:	80 38       	cpi	r24, 0x80	; 128
     d08:	bf e3       	ldi	r27, 0x3F	; 63
     d0a:	9b 07       	cpc	r25, r27
     d0c:	49 f1       	breq	.+82     	; 0xd60 <pow+0x6e>
     d0e:	68 94       	set
     d10:	90 38       	cpi	r25, 0x80	; 128
     d12:	81 05       	cpc	r24, r1
     d14:	61 f0       	breq	.+24     	; 0xd2e <pow+0x3c>
     d16:	80 38       	cpi	r24, 0x80	; 128
     d18:	bf ef       	ldi	r27, 0xFF	; 255
     d1a:	9b 07       	cpc	r25, r27
     d1c:	41 f0       	breq	.+16     	; 0xd2e <pow+0x3c>
     d1e:	99 23       	and	r25, r25
     d20:	42 f5       	brpl	.+80     	; 0xd72 <pow+0x80>
     d22:	ff 3f       	cpi	r31, 0xFF	; 255
     d24:	e1 05       	cpc	r30, r1
     d26:	31 05       	cpc	r19, r1
     d28:	21 05       	cpc	r18, r1
     d2a:	11 f1       	breq	.+68     	; 0xd70 <pow+0x7e>
     d2c:	e8 94       	clt
     d2e:	08 94       	sec
     d30:	e7 95       	ror	r30
     d32:	d9 01       	movw	r26, r18
     d34:	aa 23       	and	r26, r26
     d36:	29 f4       	brne	.+10     	; 0xd42 <pow+0x50>
     d38:	ab 2f       	mov	r26, r27
     d3a:	be 2f       	mov	r27, r30
     d3c:	f8 5f       	subi	r31, 0xF8	; 248
     d3e:	d0 f3       	brcs	.-12     	; 0xd34 <pow+0x42>
     d40:	10 c0       	rjmp	.+32     	; 0xd62 <pow+0x70>
     d42:	ff 5f       	subi	r31, 0xFF	; 255
     d44:	70 f4       	brcc	.+28     	; 0xd62 <pow+0x70>
     d46:	a6 95       	lsr	r26
     d48:	e0 f7       	brcc	.-8      	; 0xd42 <pow+0x50>
     d4a:	f7 39       	cpi	r31, 0x97	; 151
     d4c:	50 f0       	brcs	.+20     	; 0xd62 <pow+0x70>
     d4e:	19 f0       	breq	.+6      	; 0xd56 <pow+0x64>
     d50:	ff 3a       	cpi	r31, 0xAF	; 175
     d52:	38 f4       	brcc	.+14     	; 0xd62 <pow+0x70>
     d54:	9f 77       	andi	r25, 0x7F	; 127
     d56:	9f 93       	push	r25
     d58:	0c d0       	rcall	.+24     	; 0xd72 <pow+0x80>
     d5a:	0f 90       	pop	r0
     d5c:	07 fc       	sbrc	r0, 7
     d5e:	90 58       	subi	r25, 0x80	; 128
     d60:	08 95       	ret
     d62:	3e f0       	brts	.+14     	; 0xd72 <pow+0x80>
     d64:	18 cf       	rjmp	.-464    	; 0xb96 <__fp_nan>
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	80 e8       	ldi	r24, 0x80	; 128
     d6c:	9f e3       	ldi	r25, 0x3F	; 63
     d6e:	08 95       	ret
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	9f 77       	andi	r25, 0x7F	; 127
     d74:	5f 93       	push	r21
     d76:	4f 93       	push	r20
     d78:	3f 93       	push	r19
     d7a:	2f 93       	push	r18
     d7c:	9e d0       	rcall	.+316    	; 0xeba <log>
     d7e:	2f 91       	pop	r18
     d80:	3f 91       	pop	r19
     d82:	4f 91       	pop	r20
     d84:	5f 91       	pop	r21
     d86:	52 df       	rcall	.-348    	; 0xc2c <__mulsf3>
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <exp>
     d8a:	19 f4       	brne	.+6      	; 0xd92 <pow+0xa0>
     d8c:	0e f0       	brts	.+2      	; 0xd90 <pow+0x9e>
     d8e:	fd ce       	rjmp	.-518    	; 0xb8a <__fp_inf>
     d90:	46 cf       	rjmp	.-372    	; 0xc1e <__fp_zero>
     d92:	01 cf       	rjmp	.-510    	; 0xb96 <__fp_nan>

00000d94 <exp>:
     d94:	2a df       	rcall	.-428    	; 0xbea <__fp_splitA>
     d96:	c8 f3       	brcs	.-14     	; 0xd8a <pow+0x98>
     d98:	96 38       	cpi	r25, 0x86	; 134
     d9a:	c0 f7       	brcc	.-16     	; 0xd8c <pow+0x9a>
     d9c:	07 f8       	bld	r0, 7
     d9e:	0f 92       	push	r0
     da0:	e8 94       	clt
     da2:	2b e3       	ldi	r18, 0x3B	; 59
     da4:	3a ea       	ldi	r19, 0xAA	; 170
     da6:	48 eb       	ldi	r20, 0xB8	; 184
     da8:	5f e7       	ldi	r21, 0x7F	; 127
     daa:	4e df       	rcall	.-356    	; 0xc48 <__mulsf3_pse>
     dac:	0f 92       	push	r0
     dae:	0f 92       	push	r0
     db0:	0f 92       	push	r0
     db2:	4d b7       	in	r20, 0x3d	; 61
     db4:	5e b7       	in	r21, 0x3e	; 62
     db6:	0f 92       	push	r0
     db8:	c0 d0       	rcall	.+384    	; 0xf3a <modf>
     dba:	e2 eb       	ldi	r30, 0xB2	; 178
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	16 d0       	rcall	.+44     	; 0xdec <__fp_powser>
     dc0:	4f 91       	pop	r20
     dc2:	5f 91       	pop	r21
     dc4:	ef 91       	pop	r30
     dc6:	ff 91       	pop	r31
     dc8:	e5 95       	asr	r30
     dca:	ee 1f       	adc	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	49 f0       	breq	.+18     	; 0xde2 <exp+0x4e>
     dd0:	fe 57       	subi	r31, 0x7E	; 126
     dd2:	e0 68       	ori	r30, 0x80	; 128
     dd4:	44 27       	eor	r20, r20
     dd6:	ee 0f       	add	r30, r30
     dd8:	44 1f       	adc	r20, r20
     dda:	fa 95       	dec	r31
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <exp+0x42>
     dde:	41 95       	neg	r20
     de0:	55 0b       	sbc	r21, r21
     de2:	32 d0       	rcall	.+100    	; 0xe48 <ldexp>
     de4:	0f 90       	pop	r0
     de6:	07 fe       	sbrs	r0, 7
     de8:	26 c0       	rjmp	.+76     	; 0xe36 <inverse>
     dea:	08 95       	ret

00000dec <__fp_powser>:
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	1f 93       	push	r17
     df2:	0f 93       	push	r16
     df4:	ff 92       	push	r15
     df6:	ef 92       	push	r14
     df8:	df 92       	push	r13
     dfa:	7b 01       	movw	r14, r22
     dfc:	8c 01       	movw	r16, r24
     dfe:	68 94       	set
     e00:	05 c0       	rjmp	.+10     	; 0xe0c <__fp_powser+0x20>
     e02:	da 2e       	mov	r13, r26
     e04:	ef 01       	movw	r28, r30
     e06:	1e df       	rcall	.-452    	; 0xc44 <__mulsf3x>
     e08:	fe 01       	movw	r30, r28
     e0a:	e8 94       	clt
     e0c:	a5 91       	lpm	r26, Z+
     e0e:	25 91       	lpm	r18, Z+
     e10:	35 91       	lpm	r19, Z+
     e12:	45 91       	lpm	r20, Z+
     e14:	55 91       	lpm	r21, Z+
     e16:	ae f3       	brts	.-22     	; 0xe02 <__fp_powser+0x16>
     e18:	ef 01       	movw	r28, r30
     e1a:	8e dd       	rcall	.-1252   	; 0x938 <__addsf3x>
     e1c:	fe 01       	movw	r30, r28
     e1e:	97 01       	movw	r18, r14
     e20:	a8 01       	movw	r20, r16
     e22:	da 94       	dec	r13
     e24:	79 f7       	brne	.-34     	; 0xe04 <__fp_powser+0x18>
     e26:	df 90       	pop	r13
     e28:	ef 90       	pop	r14
     e2a:	ff 90       	pop	r15
     e2c:	0f 91       	pop	r16
     e2e:	1f 91       	pop	r17
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <inverse>:
     e36:	9b 01       	movw	r18, r22
     e38:	ac 01       	movw	r20, r24
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	80 e8       	ldi	r24, 0x80	; 128
     e40:	9f e3       	ldi	r25, 0x3F	; 63
     e42:	cd cd       	rjmp	.-1126   	; 0x9de <__divsf3>
     e44:	a2 ce       	rjmp	.-700    	; 0xb8a <__fp_inf>
     e46:	ac c0       	rjmp	.+344    	; 0xfa0 <__fp_mpack>

00000e48 <ldexp>:
     e48:	d0 de       	rcall	.-608    	; 0xbea <__fp_splitA>
     e4a:	e8 f3       	brcs	.-6      	; 0xe46 <inverse+0x10>
     e4c:	99 23       	and	r25, r25
     e4e:	d9 f3       	breq	.-10     	; 0xe46 <inverse+0x10>
     e50:	94 0f       	add	r25, r20
     e52:	51 1d       	adc	r21, r1
     e54:	bb f3       	brvs	.-18     	; 0xe44 <inverse+0xe>
     e56:	91 50       	subi	r25, 0x01	; 1
     e58:	50 40       	sbci	r21, 0x00	; 0
     e5a:	94 f0       	brlt	.+36     	; 0xe80 <ldexp+0x38>
     e5c:	59 f0       	breq	.+22     	; 0xe74 <ldexp+0x2c>
     e5e:	88 23       	and	r24, r24
     e60:	32 f0       	brmi	.+12     	; 0xe6e <ldexp+0x26>
     e62:	66 0f       	add	r22, r22
     e64:	77 1f       	adc	r23, r23
     e66:	88 1f       	adc	r24, r24
     e68:	91 50       	subi	r25, 0x01	; 1
     e6a:	50 40       	sbci	r21, 0x00	; 0
     e6c:	c1 f7       	brne	.-16     	; 0xe5e <ldexp+0x16>
     e6e:	9e 3f       	cpi	r25, 0xFE	; 254
     e70:	51 05       	cpc	r21, r1
     e72:	44 f7       	brge	.-48     	; 0xe44 <inverse+0xe>
     e74:	88 0f       	add	r24, r24
     e76:	91 1d       	adc	r25, r1
     e78:	96 95       	lsr	r25
     e7a:	87 95       	ror	r24
     e7c:	97 f9       	bld	r25, 7
     e7e:	08 95       	ret
     e80:	5f 3f       	cpi	r21, 0xFF	; 255
     e82:	ac f0       	brlt	.+42     	; 0xeae <ldexp+0x66>
     e84:	98 3e       	cpi	r25, 0xE8	; 232
     e86:	9c f0       	brlt	.+38     	; 0xeae <ldexp+0x66>
     e88:	bb 27       	eor	r27, r27
     e8a:	86 95       	lsr	r24
     e8c:	77 95       	ror	r23
     e8e:	67 95       	ror	r22
     e90:	b7 95       	ror	r27
     e92:	08 f4       	brcc	.+2      	; 0xe96 <ldexp+0x4e>
     e94:	b1 60       	ori	r27, 0x01	; 1
     e96:	93 95       	inc	r25
     e98:	c1 f7       	brne	.-16     	; 0xe8a <ldexp+0x42>
     e9a:	bb 0f       	add	r27, r27
     e9c:	58 f7       	brcc	.-42     	; 0xe74 <ldexp+0x2c>
     e9e:	11 f4       	brne	.+4      	; 0xea4 <ldexp+0x5c>
     ea0:	60 ff       	sbrs	r22, 0
     ea2:	e8 cf       	rjmp	.-48     	; 0xe74 <ldexp+0x2c>
     ea4:	6f 5f       	subi	r22, 0xFF	; 255
     ea6:	7f 4f       	sbci	r23, 0xFF	; 255
     ea8:	8f 4f       	sbci	r24, 0xFF	; 255
     eaa:	9f 4f       	sbci	r25, 0xFF	; 255
     eac:	e3 cf       	rjmp	.-58     	; 0xe74 <ldexp+0x2c>
     eae:	b8 ce       	rjmp	.-656    	; 0xc20 <__fp_szero>
     eb0:	0e f0       	brts	.+2      	; 0xeb4 <ldexp+0x6c>
     eb2:	76 c0       	rjmp	.+236    	; 0xfa0 <__fp_mpack>
     eb4:	70 ce       	rjmp	.-800    	; 0xb96 <__fp_nan>
     eb6:	68 94       	set
     eb8:	68 ce       	rjmp	.-816    	; 0xb8a <__fp_inf>

00000eba <log>:
     eba:	97 de       	rcall	.-722    	; 0xbea <__fp_splitA>
     ebc:	c8 f3       	brcs	.-14     	; 0xeb0 <ldexp+0x68>
     ebe:	99 23       	and	r25, r25
     ec0:	d1 f3       	breq	.-12     	; 0xeb6 <ldexp+0x6e>
     ec2:	c6 f3       	brts	.-16     	; 0xeb4 <ldexp+0x6c>
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	1f 93       	push	r17
     eca:	0f 93       	push	r16
     ecc:	ff 92       	push	r15
     ece:	c9 2f       	mov	r28, r25
     ed0:	dd 27       	eor	r29, r29
     ed2:	88 23       	and	r24, r24
     ed4:	2a f0       	brmi	.+10     	; 0xee0 <log+0x26>
     ed6:	21 97       	sbiw	r28, 0x01	; 1
     ed8:	66 0f       	add	r22, r22
     eda:	77 1f       	adc	r23, r23
     edc:	88 1f       	adc	r24, r24
     ede:	da f7       	brpl	.-10     	; 0xed6 <log+0x1c>
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e8       	ldi	r20, 0x80	; 128
     ee6:	5f eb       	ldi	r21, 0xBF	; 191
     ee8:	9f e3       	ldi	r25, 0x3F	; 63
     eea:	88 39       	cpi	r24, 0x98	; 152
     eec:	20 f0       	brcs	.+8      	; 0xef6 <log+0x3c>
     eee:	80 3e       	cpi	r24, 0xE0	; 224
     ef0:	30 f0       	brcs	.+12     	; 0xefe <log+0x44>
     ef2:	21 96       	adiw	r28, 0x01	; 1
     ef4:	8f 77       	andi	r24, 0x7F	; 127
     ef6:	0f dd       	rcall	.-1506   	; 0x916 <__addsf3>
     ef8:	ea ed       	ldi	r30, 0xDA	; 218
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <log+0x4a>
     efe:	0b dd       	rcall	.-1514   	; 0x916 <__addsf3>
     f00:	e7 e0       	ldi	r30, 0x07	; 7
     f02:	f1 e0       	ldi	r31, 0x01	; 1
     f04:	73 df       	rcall	.-282    	; 0xdec <__fp_powser>
     f06:	8b 01       	movw	r16, r22
     f08:	be 01       	movw	r22, r28
     f0a:	ec 01       	movw	r28, r24
     f0c:	fb 2e       	mov	r15, r27
     f0e:	6f 57       	subi	r22, 0x7F	; 127
     f10:	71 09       	sbc	r23, r1
     f12:	75 95       	asr	r23
     f14:	77 1f       	adc	r23, r23
     f16:	88 0b       	sbc	r24, r24
     f18:	99 0b       	sbc	r25, r25
     f1a:	fc dd       	rcall	.-1032   	; 0xb14 <__floatsisf>
     f1c:	28 e1       	ldi	r18, 0x18	; 24
     f1e:	32 e7       	ldi	r19, 0x72	; 114
     f20:	41 e3       	ldi	r20, 0x31	; 49
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	8f de       	rcall	.-738    	; 0xc44 <__mulsf3x>
     f26:	af 2d       	mov	r26, r15
     f28:	98 01       	movw	r18, r16
     f2a:	ae 01       	movw	r20, r28
     f2c:	ff 90       	pop	r15
     f2e:	0f 91       	pop	r16
     f30:	1f 91       	pop	r17
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	00 dd       	rcall	.-1536   	; 0x938 <__addsf3x>
     f38:	3f ce       	rjmp	.-898    	; 0xbb8 <__fp_round>

00000f3a <modf>:
     f3a:	fa 01       	movw	r30, r20
     f3c:	dc 01       	movw	r26, r24
     f3e:	aa 0f       	add	r26, r26
     f40:	bb 1f       	adc	r27, r27
     f42:	9b 01       	movw	r18, r22
     f44:	ac 01       	movw	r20, r24
     f46:	bf 57       	subi	r27, 0x7F	; 127
     f48:	28 f4       	brcc	.+10     	; 0xf54 <modf+0x1a>
     f4a:	22 27       	eor	r18, r18
     f4c:	33 27       	eor	r19, r19
     f4e:	44 27       	eor	r20, r20
     f50:	50 78       	andi	r21, 0x80	; 128
     f52:	1f c0       	rjmp	.+62     	; 0xf92 <modf+0x58>
     f54:	b7 51       	subi	r27, 0x17	; 23
     f56:	88 f4       	brcc	.+34     	; 0xf7a <modf+0x40>
     f58:	ab 2f       	mov	r26, r27
     f5a:	00 24       	eor	r0, r0
     f5c:	46 95       	lsr	r20
     f5e:	37 95       	ror	r19
     f60:	27 95       	ror	r18
     f62:	01 1c       	adc	r0, r1
     f64:	a3 95       	inc	r26
     f66:	d2 f3       	brmi	.-12     	; 0xf5c <modf+0x22>
     f68:	00 20       	and	r0, r0
     f6a:	69 f0       	breq	.+26     	; 0xf86 <modf+0x4c>
     f6c:	22 0f       	add	r18, r18
     f6e:	33 1f       	adc	r19, r19
     f70:	44 1f       	adc	r20, r20
     f72:	b3 95       	inc	r27
     f74:	da f3       	brmi	.-10     	; 0xf6c <modf+0x32>
     f76:	0d d0       	rcall	.+26     	; 0xf92 <modf+0x58>
     f78:	cd cc       	rjmp	.-1638   	; 0x914 <__subsf3>
     f7a:	61 30       	cpi	r22, 0x01	; 1
     f7c:	71 05       	cpc	r23, r1
     f7e:	a0 e8       	ldi	r26, 0x80	; 128
     f80:	8a 07       	cpc	r24, r26
     f82:	b9 46       	sbci	r27, 0x69	; 105
     f84:	30 f4       	brcc	.+12     	; 0xf92 <modf+0x58>
     f86:	9b 01       	movw	r18, r22
     f88:	ac 01       	movw	r20, r24
     f8a:	66 27       	eor	r22, r22
     f8c:	77 27       	eor	r23, r23
     f8e:	88 27       	eor	r24, r24
     f90:	90 78       	andi	r25, 0x80	; 128
     f92:	30 96       	adiw	r30, 0x00	; 0
     f94:	21 f0       	breq	.+8      	; 0xf9e <modf+0x64>
     f96:	20 83       	st	Z, r18
     f98:	31 83       	std	Z+1, r19	; 0x01
     f9a:	42 83       	std	Z+2, r20	; 0x02
     f9c:	53 83       	std	Z+3, r21	; 0x03
     f9e:	08 95       	ret

00000fa0 <__fp_mpack>:
     fa0:	9f 3f       	cpi	r25, 0xFF	; 255
     fa2:	31 f0       	breq	.+12     	; 0xfb0 <__fp_mpack_finite+0xc>

00000fa4 <__fp_mpack_finite>:
     fa4:	91 50       	subi	r25, 0x01	; 1
     fa6:	20 f4       	brcc	.+8      	; 0xfb0 <__fp_mpack_finite+0xc>
     fa8:	87 95       	ror	r24
     faa:	77 95       	ror	r23
     fac:	67 95       	ror	r22
     fae:	b7 95       	ror	r27
     fb0:	88 0f       	add	r24, r24
     fb2:	91 1d       	adc	r25, r1
     fb4:	96 95       	lsr	r25
     fb6:	87 95       	ror	r24
     fb8:	97 f9       	bld	r25, 7
     fba:	08 95       	ret

00000fbc <__tablejump2__>:
     fbc:	ee 0f       	add	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	00 24       	eor	r0, r0
     fc2:	00 1c       	adc	r0, r0
     fc4:	0b be       	out	0x3b, r0	; 59
     fc6:	07 90       	elpm	r0, Z+
     fc8:	f6 91       	elpm	r31, Z
     fca:	e0 2d       	mov	r30, r0
     fcc:	09 94       	ijmp

00000fce <eeprom_read_dword>:
     fce:	a6 e1       	ldi	r26, 0x16	; 22
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	44 e0       	ldi	r20, 0x04	; 4
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	0a c0       	rjmp	.+20     	; 0xfec <eeprom_read_blraw>

00000fd8 <eeprom_write_dword>:
     fd8:	24 2f       	mov	r18, r20
     fda:	17 d0       	rcall	.+46     	; 0x100a <eeprom_write_r18>
     fdc:	25 2f       	mov	r18, r21
     fde:	15 d0       	rcall	.+42     	; 0x100a <eeprom_write_r18>
     fe0:	00 c0       	rjmp	.+0      	; 0xfe2 <eeprom_write_word>

00000fe2 <eeprom_write_word>:
     fe2:	12 d0       	rcall	.+36     	; 0x1008 <eeprom_write_byte>
     fe4:	27 2f       	mov	r18, r23
     fe6:	11 c0       	rjmp	.+34     	; 0x100a <eeprom_write_r18>

00000fe8 <eeprom_read_block>:
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22

00000fec <eeprom_read_blraw>:
     fec:	fc 01       	movw	r30, r24
     fee:	f9 99       	sbic	0x1f, 1	; 31
     ff0:	fe cf       	rjmp	.-4      	; 0xfee <eeprom_read_blraw+0x2>
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <eeprom_read_blraw+0x14>
     ff4:	f2 bd       	out	0x22, r31	; 34
     ff6:	e1 bd       	out	0x21, r30	; 33
     ff8:	f8 9a       	sbi	0x1f, 0	; 31
     ffa:	31 96       	adiw	r30, 0x01	; 1
     ffc:	00 b4       	in	r0, 0x20	; 32
     ffe:	0d 92       	st	X+, r0
    1000:	41 50       	subi	r20, 0x01	; 1
    1002:	50 40       	sbci	r21, 0x00	; 0
    1004:	b8 f7       	brcc	.-18     	; 0xff4 <eeprom_read_blraw+0x8>
    1006:	08 95       	ret

00001008 <eeprom_write_byte>:
    1008:	26 2f       	mov	r18, r22

0000100a <eeprom_write_r18>:
    100a:	f9 99       	sbic	0x1f, 1	; 31
    100c:	fe cf       	rjmp	.-4      	; 0x100a <eeprom_write_r18>
    100e:	1f ba       	out	0x1f, r1	; 31
    1010:	92 bd       	out	0x22, r25	; 34
    1012:	81 bd       	out	0x21, r24	; 33
    1014:	20 bd       	out	0x20, r18	; 32
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	fa 9a       	sbi	0x1f, 2	; 31
    101c:	f9 9a       	sbi	0x1f, 1	; 31
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	08 95       	ret

00001024 <_exit>:
    1024:	f8 94       	cli

00001026 <__stop_program>:
    1026:	ff cf       	rjmp	.-2      	; 0x1026 <__stop_program>
